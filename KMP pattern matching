#include <iostream>
#include <string.h>

using namespace std;
void computeLPS(char *pat,int size,int *lps)
{
    int i=0,j=1;
    lps[0]=0;
    while(j<size)
    {
        if(pat[i]==pat[j])
        {
            lps[j]=i+1;
            ++i;
            ++j;
        }
        else
        {
            if(i==0)
            {
                lps[j]=0;
                ++j;
            }
            else
            {
                i=lps[i-1];
            }
        }
    }
    
    cout<<endl<<pat<<endl;
    
    for(int x=0;x<size;++x)
    cout<<lps[x];
    cout<<endl;
}
void KMP(char *txt,char *pat)
{   
    //pre processing of pattern array to create lps[] array
    int patSize =strlen(pat);
    int lps[patSize];
    computeLPS(pat,patSize,lps);
    
    //searching patterns using lps[]
    int txtSize=strlen(txt);
    int i=0;//for text
    int j=0;//for pattern
    while(i<txtSize)
    {   if(txt[i]==pat[j])
            {
                ++i;
                ++j;
            }
        if(j==patSize)
        {cout<<"pattern found at index:"<<i-j<<".\n";
        j=lps[j-1];
        }
        else if(i<txtSize && txt[i]!=pat[j])
        {
            if(j==0)
            {++i;}
            else
            j=lps[j-1];
        }
        
    }
    
    
}
int main()
{   
    char *txt="AAABAAABAAAA";
    char *pat = "AAAA";
    KMP(txt,pat);
    return 0;
}
