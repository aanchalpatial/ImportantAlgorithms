//G = (V, E)

//Maximum number of edges in directed graph: |V|*(|V|-1)
//Maximum number of edges in undirected graph: ( |V|*(|V|-1) )/2

/*adjancey list & matrix representation
adjacency matrix rep of undirected graph always creates a symmetric matrix

Space complexity of Adjacency matrix VS Adjacency List: 0(V*V) <-> 0(V+E)

Time complexity of Operation in Adjacency matrix VS Adjacency List
1)check if 2 vertices are adjacent:           0(1)  <->  O(V)
2)find all vertices adjacent to a vertex v    O(V)  <->  0(degree(v))       **most common operation**
3)add an edge                                 0(1)  <->  0(1)
4)remove an edge                              0(1)  <->  O(V)
5)add/remove a vertex                         O(V^2) <-> less than V^2

Adjacency list is the MOSTLY preferred representation. It is well suited for SPARSE graphs.
Adjacency matrix representation is suited for dense graphs.
eg: BFS time complexity with adjacency list is O(V+E) & with adjacency matrix is O(V^2)
*/

//graph traversals: bfs & dfs

/*
GRAPHS SUMMARY:-

1) Shortest Path in Unweighted Graph: BFS
2) Shortest Path in Weighted Graph: Bellmon Ford, DJikstra's, Floyd Warshall & Topological Sort Based Solution
3) Cycle in Undirected Graph: dfs + a parent variable
4) Cycle in Directed Graph: dfs + recursion stack & Kahn's algorithm(bfs) + countOfNodesProcessed variable
5) Topological Sort: kahn algo( bfs + indegree array - visited array(not required) ) & dfs + stack
6) Strongly connected components of an UNDIRECTED graph: BFS or DFS
7) Strongly connected components of an DIRECTED graph: Tarjan's algorithm & Kosaraju's algorithm
8) Minimum Spanning Tree: Prim's & Kruskal Algorithms

*/


