
/*
The shortest path problem is about finding shortest path between the source point and every other point in the graph.
This problem could be solved easily using (BFS) if all edge weights were (1), but in weighted graph weights can take any value. 
*/

//1)
//Shortest Path in UNWEIGHTED graph
//Hint :- Use BFS, it naturally finds shortest distance path
//Time: Same as BFS i.e O(V+E)

void shortestPath(vector<int> adj[], int s, int v){      //v: number of vertices named 0 to v-1
    
    bool visited[v];
    for(int i=0;i<v;++i) visited[i] = false;
    
    int shortestDistance[v] = {INT_MAX};
    
    queue<int> q;
    q.push(s);
    visited[s] = true;
    shortestDistance[s] = 0;
    
    while(!q.empty()){
        int t = q.front();
        q.pop();
        //cout<<t<<", ";
        //pushing all unvisited neighbours of current node
        for(int i=0;i<adj[t].size();++i){
            if(visited[adj[t][i]]==false) {
                q.push(adj[t][i]);
                visited[adj[t][i]] = true;
                shortestDistance[adj[t][i]] = shortestDistance[t]+1;
            }
        }
    } 
    
    for(int i=0;i<v;++i) cout<<shortestDistance[i]<<", ";
    cout<<endl;
}


//2)
//Shortest Path in WEIGHTED DAG only : Topological Sort Based solution
/*
For a general weighted graph, we can calculate single source shortest distances in O(VE) time using Bellman–Ford Algorithm.
For a graph with no negative weights, we can do better and calculate single source shortest distances in O(E + VLogV) time using
Dijkstra’s algorithm. (We will study them in greedy & dp)
Can we do even better for Directed Acyclic Graph (DAG)? We can calculate single source shortest distancesin O(V+E) time for DAGs.
The idea is to use Topological Sorting.
*/
//time: O(V+E)
/*
1) Initialize dist[] = {INF, INF, ….} and dist[s] = 0 where s is the source vertex.
2) Create a toplogical order of all vertices.
3) Do following for every vertex u in topological order.
………..Do following for every adjacent vertex v of u
………………if (dist[v] > dist[u] + weight(u, v))
………………………dist[v] = dist[u] + weight(u, v)
*/          

#include <bits/stdc++.h>
using namespace std;

void addEdge(vector<pair<int, int>> adj[], int v1, int v2, int w){
    adj[v1].push_back(make_pair(v2, w));
}

void bfs_topological_sort(vector<pair<int, int>> adj[],int result[], int v){
    
    int indegree[v] = {0};
    for(int i=0;i<v;++i){
        for(int j=0;j<adj[i].size();++j){
            ++indegree[adj[i][j].first];
        }
    }
    
    
    queue<int> q;
    //pushing all 0 indegree vertices in queue
    for(int i=0;i<v;++i){
        //cout<<i<<": "<<indegree[i]<<endl;
        if(indegree[i]==0) q.push(i);
    }
    
    int index = 0;
    while(!q.empty()){
        int t = q.front();
        q.pop();
        result[index++] = t;
        for(int i=0;i<adj[t].size();++i){
            --indegree[adj[t][i].first];
            if(indegree[adj[t][i].first]==0) q.push(adj[t][i].first);
        }
    }
}

void shortestPathDAG(vector<pair<int, int>> adj[], int v, int s){
    //Step 1: Do topological sort
    //we will use bfs based approach i.e Kahn's Algorithm
    
    int result[v]={-1};      //result of topological sorting stored in this array
    bfs_topological_sort(adj, result, v);
    
    // for(int i=0;i<v;++i) cout<<result[i]<<", ";
    // cout<<endl;
    
    //Step 2: Traverse tropological ordering
    int shortestPath[v];
    for(int i=0;i<v;++i) shortestPath[i] = INT_MAX;
    //initialise distance to 0 of the source node
    //say node 0 is source
    shortestPath[s] = 0;
    for(int u: result){
        for(pair<int, int> v: adj[u]){
            
            if(shortestPath[v.first]>shortestPath[u]+v.second){
                shortestPath[v.first] = shortestPath[u]+v.second;
            }
        }
    }
    
    cout<<"Shortest Path Distance: ";
    for(int i=0;i<v;++i) cout<<shortestPath[i]<<", ";
    cout<<endl;
}

int main() {
    
    int v = 6;
    vector<pair<int, int>> adjacency_list[v];
    addEdge(adjacency_list, 0, 1, 2);
    addEdge(adjacency_list, 1, 2, 3);
    addEdge(adjacency_list, 2, 3, 6);
    addEdge(adjacency_list, 0, 4, 1);
    addEdge(adjacency_list, 4, 5, 4);
    addEdge(adjacency_list, 5, 3, 1);
    addEdge(adjacency_list, 4, 2, 2);
    
    
    shortestPathDAG(adjacency_list, v, 0);
    
    
	return 0;
}
