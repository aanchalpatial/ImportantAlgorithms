//Shortest Path In WEIGHTED DIRECTED GRAPH WITH ONLY POSITIVE EDGES

//METHOD) DJisktra's Algorithm : Find Shortest Path in weighted graphs with only positive edges
//O(E+VlogV)
//note :- djikstra'a algorithm is very much similar to prim's algorithm for MST : https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/17)Graph/7)Minimum%20Spanning%20Tree

/*Algorithm:
1) Create a set sptSet (shortest path tree set) that keeps track of vertices included in shortest path tree, i.e.,
   whose minimum distance from source is calculated and finalized. Initially, this set is empty.
2) Assign a distance value to all vertices in the input graph. Initialize all distance values as INFINITE. Assign distance value 
   as 0 for the source vertex so that it is picked first.
3) While sptSet doesn’t include all vertices
 ….a) Pick a vertex u which is not there in sptSet and has minimum distance value.
 ….b) Include u to sptSet.
 ….c) Update distance value of all adjacent vertices of u. To update the distance values, iterate through all adjacent vertices. 
      For every adjacent vertex v, if sum of distance value of u (from source) and weight of edge u-v, is less than the distance value
      of v, then update the distance value of v.
*/
/*Important Points:
->We can create a parent array, update the parent array when distance is updated and 
    use it show the shortest path from source to different vertices.
->The code finds shortest distances from source to all vertices. If we are interested only in shortest distance from the source
    to a single target, we can break the for the loop when the picked minimum distance vertex is equal to target
->Time Complexity of the implementation is O(V^2). If the input graph is represented using adjacency list, it can be reduced 
    to O(E log V) with the help of binary heap.
->Dijkstra’s algorithm doesn’t work for graphs with negative weight edges. For graphs with negative weight edges, Bellman–Ford 
    algorithm can be used.
*/


/*There are many different approaches to implement DJikstra's:
1) DJikstra using adjacency matric representation: O(V^2)
https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/
*/

vector <int> dijkstra1(int V, vector<vector<int>> adj[], int S) {
    // METHOD 1:
    // Time: O(V^2), but can optimise if we use min heap for finding minimum
    vector<int> key(V, INT_MAX);        // should be called distance vector
    key[S] = 0;
    vector<int> inMst(V, false);        // should be called finalised vector
    for(int i=0;i<V;++i) {
        int minKey = INT_MAX;
        int minKeyVertex = -1;
        // step 1: finding min weighted vertex which has not been included in inMst yet
        for(int j=0;j<V;++j) {
            if(inMst[j]==false&&key[j]<minKey) {
                minKey = key[j];
                minKeyVertex = j;
            }
        }
        // add to inMst & total weight so far
        inMst[minKeyVertex] = true;
        // step 2: update adjacents, decrease key if required
        for(int j=0;j<adj[minKeyVertex].size();++j) {
            int adjV = adj[minKeyVertex][j][0];
            int adjVWeight = adj[minKeyVertex][j][1];
            if(inMst[adjV]==false&&key[adjV]>key[minKeyVertex] + adjVWeight) {          // Relax function
                key[adjV] = key[minKeyVertex] + adjVWeight;
            }
        }
    }
    return key;
}

/*
2) DJikstra using adjacency list representation with CUSTOM made min heap : O(ElogV)
https://www.geeksforgeeks.org/dijkstras-algorithm-for-adjacency-list-representation-greedy-algo-8/

3) Djisktra using C++ STL set : O(ElogV)
https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-set-in-stl/
The second implementation is time complexity wise better, but is really complex as we have implemented our own priority queue. 
STL provides priority_queue, but the provided priority queue doesn’t support decrease key and delete operations.Above operations 
can be easily implemented by set data structure of c++ STL

4) Djikstra using C++ STL priority_queue : O(ElogV) i.e APPROACH IMPLEMENTED BELOW
https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-priority_queue-stl/
However, the problem is, priority_queue doesn’t support decrease key. To resolve this problem, do not update a key,but insert one 
more copy of it.Whenever distance of a vertex is reduced, we add one more instance of vertex in priority_queue. Even if there are
multiple instances, we only consider the instance with minimum distance and ignore other instances.
*/

//Djikstra using priority_queue
#include <bits/stdc++.h>
using namespace std;

void addEdge(vector<pair<int, int>> adj[], int u, int v, int weight){
    adj[u].push_back(make_pair(v, weight));
    //since graph is undirected
    adj[v].push_back(make_pair(u, weight)); 
}

struct myComp{
    bool operator()(pair<int, int> p1, pair<int, int> p2){
        return p1.first>p2.first;
    }
};

vector <int> dijkstra2(int V, vector<vector<int>> adj[], int S) {
    /* METHOD 2: min heap approach, we can either use custom min heap or the one provided in c++ stl
    but the min heap provided in c++ still doesn't have decrease key operation required in step 2 of previous approach
    To resolve this problem, The prim's algorithm can be modified so that decrease key is never required. 
    The idea is, not to insert all vertices in priority queue, but only those which are not in MST and have been visited through a vertex that has included in MST. 
    We keep track of vertices included in MST in a separate boolean array inMST[].
    */
    // Time: O(V+E)logV
    vector<int> key(V, INT_MAX);        // should be called distance
    key[S] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, myComp> minH;        // <weight, vertex>
    minH.push({0, S});
    while(!minH.empty()) {                  
        // step 1: find min weighted vertex
        pair<int, int> v = minH.top();
        minH.pop();
        // step 3: push adjacents
        for(int j=0;j<adj[v.second].size();++j) {
            int adjV = adj[v.second][j][0];
            int adjVWeight = adj[v.second][j][1];
            if(key[adjV]>key[v.second] + adjVWeight) {          // Relax function
                key[adjV] = key[v.second] + adjVWeight;
                minH.push({adjVWeight,  adjV});
            }
        }
    }
    return key;
    }
}


int main() {
    
    int v = 9;
    vector<pair<int, int>> adj[v];      //pair of (vertex, weight)
    addEdge(adj, 0, 1, 4); 
    addEdge(adj, 0, 7, 8); 
    addEdge(adj, 1, 2, 8); 
    addEdge(adj, 1, 7, 11); 
    addEdge(adj, 2, 3, 7); 
    addEdge(adj, 2, 8, 2); 
    addEdge(adj, 2, 5, 4); 
    addEdge(adj, 3, 4, 9); 
    addEdge(adj, 3, 5, 14); 
    addEdge(adj, 4, 5, 10); 
    addEdge(adj, 5, 6, 2); 
    addEdge(adj, 6, 7, 1); 
    addEdge(adj, 6, 8, 6); 
    addEdge(adj, 7, 8, 7); 
    
    vector<int> distance = djikstra2(v, adj, 1);

    cout<<"Vertex\tDistance from source"<<endl;
    for(int i=0;i<V;++i) {
        cout<<i<<"\t"<<distance[i]<<endl;
    }
    
	return 0;
}

// *** IMPORTANT ***
/* Prims algorith for MST is very similar to djiktra's algorith for shortest path in +ve weighted edges graph 
Prim and Dijkstra algorithms are almost the same, except for the "relax function".

The only difference I see is that Prim's algorithm stores a minimum cost edge whereas Dijkstra's algorithm 
stores the total cost from a source vertex to the current vertex.

This is where Prim's implementation DIFFERS FROM DJIKSTRA's. In Dijkstr's algorithm, we didn't need inMST[] array as distances
 always increase. We require this array here because key value of a processed vertex may decrease if not checked.
In other words, Unlike Dijkstra’s implementation, a boolean array inMST[] is mandatory in prims because the key values 
of newly inserted items can be less than the key values of extracted items. So we must not consider extracted items.

prims vs dj 1: https://www.diffchecker.com/OYmwegCu/

prims vs dj 2: https://www.diffchecker.com/tzAhTYuj/
*/

/*Djikstra's Algorithm Follow Up Questions :- 
1) Does Djikstra's Algorithm work in cases when there are negative weighted edges as well?		Ans: NO
2) Does shortest path calculated using djikstra's changes when we add a value k to every edge ?		Ans: YES(because there may be more number of edges in shortest path currently)
3) Does shortest path calculated using djikstra's changes when we multiply a value k to every edge ?	Ans: NO
*/


//APPLICATIONS : MINIMUM COST PATH
//Problem Link : https://practice.geeksforgeeks.org/problems/minimum-cost-path/0
/*
Given a square grid of size N, each cell of which contains integer cost which represents a cost to traverse through that cell, 
we need to find a path from top left cell to bottom right cell by which total cost incurred is minimum. You can move in 4 directions : up, down, left an right.
Note : It is assumed that negative cost cycles do not exist in input matrix.

Example:
Input:
2
5
31 100 65 12 18 10 13 47 157 6 100 113 174 11 33 88 124 41 20 140 99 32 111 41 20
2
42 93 7 14

Output:
327
63

Explanation:
Testcase 1:
Grid is:
31, 100, 65, 12, 18,
10, 13, 47, 157, 6,
100. 113, 174, 11, 33,
88, 124, 41, 20, 140,
99, 32, 111, 41, 20
A cost grid is given in below diagram, minimum
cost to reach bottom right from top left
is 327 (31 + 10 + 13 + 47 + 65 + 12 + 18 + 6 + 33 + 11 + 20 + 41 + 20)

*/
#include<bits/stdc++.h>
using namespace std;

struct myComp{
    bool operator()(pair<int,pair<int, int>> p1, pair<int,pair<int, int>> p2){
        return p1.first>p2.first;
    }
};
int minimumCostPath(vector<int> grid[], int N){
    
    //djikstra algorithm
    //O(ElogV)
    
    pair<int, int> src = make_pair(0,0);
    pair<int, int> tgt = make_pair(N-1, N-1);
    priority_queue<pair<int,pair<int, int>>, vector<pair<int,pair<int, int>>>, myComp> pq;
    pq.push(make_pair(grid[src.first][src.second],src));
    
    int rowNbr[] = {-1,0,1,0};
    int colNbr[] = {0,1,0,-1};
    int distance[N][N];
    for(int i=0;i<N;++i){
        for(int j=0;j<N;++j){
            distance[i][j] = INT_MAX;
        }
    }
    distance[src.first][src.second] = grid[src.first][src.second];
    
    while(!pq.empty()){
        pair<int, pair<int, int>> t = pq.top();
        pq.pop();
        pair<int, int> u = t.second;
        int u_distance = t.first;
        
        
        if(u.first==tgt.first&&u.second==tgt.second) break;
        
        for(int i=0;i<4;++i){
            int r = u.first+rowNbr[i];
            int c = u.second+colNbr[i];
            if( (r>=0&&r<N)&&(c>=0&&c<N) ){
               if(distance[r][c]>distance[u.first][u.second]+grid[r][c]){
                   distance[r][c] = distance[u.first][u.second]+grid[r][c];
                   pq.push(make_pair(distance[r][c], make_pair(r,c)));
               }
               
            }
        }
        
        
    }
    
    // for(int i=0;i<N;++i){
    //     for(int j=0;j<N;++j){
    //         cout<<distance[i][j]<<" ";
    //     }
    //     cout<<endl;
    // }
    
    return distance[N-1][N-1];
}
int main()
 {
	int T;
	cin>>T;
	for(int j=0;j<T;++j){
	    int n;
	    cin>>n;
	    vector<int> grid[n];
	    for(int i=0;i<n;++i){
	        for(int j=0;j<n;++j){
	            int x;
	            cin>>x;
	            grid[i].push_back(x);
	        }
	    }
	    
	    int result = minimumCostPath(grid, n);
	    cout<<result<<endl;
	}
	return 0;
}

