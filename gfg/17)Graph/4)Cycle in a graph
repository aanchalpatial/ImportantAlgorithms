//1) 
//Detection of a Cycle in an UNDIRECTED Graph
//Can be done using either bfs or dfs : O(V+E)
//1A) Below is dfs based solution: *** dfs + a parent variable ***

bool DFS(vector<int> adj[], int s, bool visited[], int parent){
    //cout<<s<<", ";
    visited[s] = true;
    for(int i=0;i<adj[s].size();++i){
        if(visited[adj[s][i]]==false){
            if(DFS(adj, adj[s][i], visited, s)) return true;
        }else if(adj[s][i]!=parent){
            return true;
        }
    }
    return false;
}

bool DetectCycleUndirectedGraph(vector<int> adj[], int v){
    bool visited[v];
    for(int i=0;i<v;++i) visited[i] = false;
    
    for(int i=0;i<v;++i){   
        if(visited[i]==false){
            if(DFS(adj, i, visited, -1)) return true;
        }
    }
    return false;
}




//2
//Detection of a Cycle in an DIRECTED Graph
//Note: undirected cycle detection will FAIL in this case
//eg:   1->2<-3 will return true if we use undirected graph approach
//there is cycle in directed graph if there is a back edge, so we use an array which is used to keep track of vertices in recursion stack
//Can be done using either bfs or dfs : O(V+E)

//2A) Below is dfs based solution: *** dfs + a recursion stack array ***
bool DFS(vector<int> adj[], int s, bool visited[], bool recursionStack[]){
    //cout<<s<<", ";
    visited[s] = true;
    recursionStack[s] = true;
    for(int i=0;i<adj[s].size();++i){
        if(visited[adj[s][i]]==false){
            if(DFS(adj, adj[s][i], visited, recursionStack)) return true;
        }else if(recursionStack[adj[s][i]]==true){
            return true;
        }
    }
    recursionStack[s] = false;
    
    return false;
}
bool DetectCycleDirectedGraph(vector<int> adj[], int v){
    bool visited[v];
    for(int i=0;i<v;++i) visited[i] = false;
    
    //there is cycle in directed graph if there is a back edge
    //below array is used to keep track of vertices in recursion stack
    bool recursionStack[v];
    for(int i=0;i<v;++i) recursionStack[i] = false;
    
    for(int i=0;i<v;++i){
        if(visited[i]==false){
            if(DFS(adj, i, visited, recursionStack)) return true;
        }
    }
    return false;
}

//2B) Below is bfs based solution :- ***Kahn's algorithm + countOfNodesProcessed variable ***
//Kahn's Algorithm : https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/17)Graph/5)Topological%20Sorting
//Approach: As we know we can use Kahn's algorithm (i.e topological sorting) only for DAG, so if a directed graph in fact has cycles,
//then we will not be able to process every vertex. So using kahn's algo if we are not able to process every vertex than graph has a cycle.

bool BFS_CycleDetectionDirectedGraph(vector<int> adj[], int v){     //O(V+E)     //v: number of vertices named 0 to v-1
    
    
    int indegree[v] = {0};
    for(int i=0;i<v;++i){       //O(E)
        for(int j=0;j<adj[i].size();++j){
            ++indegree[adj[i][j]];
        }
    }
    
    queue<int> q;
    //pushing all vertex with indegree 0 initially
    for(int i=0;i<v;++i){
        if(indegree[i]==0) {
            q.push(i);
        }
    }
    int nodesProcessed = 0;
    while(!q.empty()){          //O(V+E)
        int t = q.front();
        q.pop();
        //cout<<t<<", ";
        ++nodesProcessed;
        //pushing all unvisited neighbours of current node
        for(int i=0;i<adj[t].size();++i){
            --indegree[adj[t][i]];
            if(indegree[adj[t][i]]==0){
                q.push(adj[t][i]);
            }
        }
    }
    
    return nodesProcessed==v?false:true;
}


