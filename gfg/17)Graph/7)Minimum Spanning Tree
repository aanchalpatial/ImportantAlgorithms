/*
Given a WEIGHTED CONNECTED and UNDIRECTED graph, a spanning tree of that graph is a subgraph that is a tree(connected, acyclic graph) and connects all the vertices
together. A single graph can have many different spanning trees.

A minimum spanning tree (MST) or minimum weight spanning tree for a weighted, connected and undirected graph is a spanning tree 
with weight less than or equal to the weight of every other spanning tree
A minimum spanning tree has (V – 1) edges where V is the number of vertices in the given graph.
There are 2 algorithm to find Minimum Spanning Tree: Prims's & Kruskal's Algorithm

Applications: Network design., CLuster Ananlysis & Approximation algorithms for NP-hard problems.

*/

//1)
//Prim's Algorithm : Greedy Algorithm
/*Approach: 
A group of edges that connects two set of vertices in a graph is called cut in graph theory. So, at every step of Prim’s algorithm,
we find a cut (of two sets, one contains the vertices already included in MST and other contains rest of the verices), pick the
minimum weight edge from the cut and include this vertex to MST Set (the set that contains already included vertices).
*/
/*VERY SIMILAR TO DJIKSTRA's
There are many different approaches to implement Prim's (which are same as Djisktra):

1) O(V^2) with adjacency matrix or list
*/
int prims1(int V, vector<vector<int>> adj[]) {
    // METHOD 1:
    // Time: O(V^2), but can optimise if we use min heap for finding minimum
    vector<int> key(V, INT_MAX);
    key[0] = 0;
    vector<int> inMst(V, false);
    int weight = 0;
    for(int i=0;i<V;++i) {
        int minKey = INT_MAX;
        int minKeyVertex = -1;
        // step 1: finding min weighted vertex which has not been included in inMst yet
        for(int j=0;j<V;++j) {
            if(inMst[j]==false&&key[j]<minKey) {
                minKey = key[j];
                minKeyVertex = j;
            }
        }
        // add to inMst & total weight so far
        inMst[minKeyVertex] = true;
        weight += minKey;
        // step 2: update adjacents, decrease key if required
        for(int j=0;j<adj[minKeyVertex].size();++j) {
            int adjV = adj[minKeyVertex][j][0];
            int adjVWeight = adj[minKeyVertex][j][1];
            if(inMst[adjV]==false&&key[adjV]>adjVWeight) {          // Relax function
                key[adjV] = adjVWeight;
            }
        }
    }
    return weight;
}
// Time: O(V^2), but can optimise if we use min heap for finding minimum
/*
2) O(ElogV) with adjacency list + CUSTOM binary heap

3) O(ElogV) with C++ STL priority_queue i.e APPROACH IMPLEMENTED BELOW
https://www.geeksforgeeks.org/prims-algorithm-using-priority_queue-stl/
However, the problem is, priority_queue doesn’t support decrease key. To resolve this problem, The prim's algorithm can be
modified so that decrease key is never required. The idea is, not to insert all vertices in priority queue, but only those which
are not MST and have been visited through a vertex that has included in MST. We keep track of vertices included in MST in a separate
boolean array inMST[].
*/
//Prims using C++ STL priority_queue : (Carefully read commments to understabd difference from DJIKSTRA's code)
//Djikstra's code is available at: https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/17)Graph/3)Shortest%20Path
#include <bits/stdc++.h>
using namespace std;

void addEdge(vector<pair<int, int>> adj[], int u, int v, int weight){
    adj[u].push_back(make_pair(v, weight));
    //since graph is undirected
    adj[v].push_back(make_pair(u, weight)); 
}

struct myComp{
    bool operator()(pair<int, int> p1, pair<int, int> p2){
        return p1.first>p2.first;
    }
};

int prims2(int V, vector<vector<int>> adj[]) {
    /* METHOD 2: min heap approach, we can either use custom min heap or the one provided in c++ stl
    but the min heap provided in c++ still doesn't have decrease key operation required in step 2 of previous approach
    To resolve this problem, The prim's algorithm can be modified so that decrease key is never required. 
    The idea is, not to insert all vertices in priority queue, but only those which are not in MST and have been visited through a vertex that has included in MST. 
    We keep track of vertices included in MST in a separate boolean array inMST[].
    */
    // Time: O(V+E)logV
    priority_queue<pair<int, int>, vector<pair<int, int>>, myComp> minH;        // <weight, vertex>
    minH.push({0, 0});
    vector<bool> inMst(V, false);
    int weight = 0;
    while(!minH.empty()) {                  
        // step 1: find min weighted vertex
        pair<int, int> v = minH.top();
        minH.pop();
        /* step 2(due to the modification discussed above): different key values for same vertex may exist in the priority queue. 
        The one with the least key value is always processed first. 
        Therefore, ignore the rest.*/
        if(inMst[v.second]==true) { continue; } // *** RRR ***
        inMst[v.second] = true;
        weight += v.first;
        // step 3: push adjacents
        for(int j=0;j<adj[v.second].size();++j) {
            int adjV = adj[v.second][j][0];
            int adjVWeight = adj[v.second][j][1];
            if(inMst[adjV]==false) {                    // Relax function
                minH.push({adjVWeight,  adjV});
            }
        }
    }
    return weight;
}


int main() {
    
    int v = 9;
    vector<pair<int, int>> adj[v];      //pair of (vertex, weight)
    addEdge(adj, 0, 1, 4); 
    addEdge(adj, 0, 7, 8); 
    addEdge(adj, 1, 2, 8); 
    addEdge(adj, 1, 7, 11); 
    addEdge(adj, 2, 3, 7); 
    addEdge(adj, 2, 8, 2); 
    addEdge(adj, 2, 5, 4); 
    addEdge(adj, 3, 4, 9); 
    addEdge(adj, 3, 5, 14); 
    addEdge(adj, 4, 5, 10); 
    addEdge(adj, 5, 6, 2); 
    addEdge(adj, 6, 7, 1); 
    addEdge(adj, 6, 8, 6); 
    addEdge(adj, 7, 8, 7); 
    
    int mstWeight = prims(adj, 0, v);
    cout<<mstWeight;
    
	return 0;
}


// *** IMPORTANT ***
/* Prims algorith for MST is very similar to djiktra's algorith for shortest path in +ve weighted edges graph 
Prim and Dijkstra algorithms are almost the same, except for the "relax function".

The only difference I see is that Prim's algorithm stores a minimum cost edge whereas Dijkstra's algorithm 
stores the total cost from a source vertex to the current vertex.

This is where Prim's implementation DIFFERS FROM DJIKSTRA's. In Dijkstr's algorithm, we didn't need inMST[] array as distances
 always increase. We require this array here because key value of a processed vertex may decrease if not checked.
In other words, Unlike Dijkstra’s implementation, a boolean array inMST[] is mandatory in prims because the key values 
of newly inserted items can be less than the key values of extracted items. So we must not consider extracted items.

prims vs dj 1: https://www.diffchecker.com/OYmwegCu/

prims vs dj 2: https://www.diffchecker.com/tzAhTYuj/
*/


//2)  
//Kruskal's Algorithm
/*Algorithm:
1. Sort all the edges in increasing order of their weight.
2. Pick the smallest edge. Check if it forms a cycle with the spanning tree formed so far. If cycle is not formed, 
   include this edge. Else, discard it.
3. Repeat step#2 until there are (V-1) edges in the spanning tree.
*/
//Studied in Disjoint Set Data Structure Section : https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/24)Disjoint%20Set/3)Kruskal%20MST



