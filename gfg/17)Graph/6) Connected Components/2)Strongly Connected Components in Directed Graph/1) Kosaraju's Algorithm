//2)
//Finding Strongly connected components of an DIRECTED graph
//There are 2 different algorithms available: 
//2A) Kosaraju's algorithm O(V+E) , 2 dfs traversals	: dfs(topological sort) then reverse then dfs 
//https://www.geeksforgeeks.org/strongly-connected-components/
/*Algorithm:-
1) Create an empty stack ‘S’ and do DFS traversal of a graph. In DFS traversal, after calling recursive DFS for adjacent vertices
   of a vertex, push the vertex to stack. In the above graph, if we start DFS from vertex 0, we get vertices in stack as 1, 2, 4, 3, 0.
   (this idea is similar to the idea of using stack in dfs based topological sort solution, i.e add vertex in stack only when all its dependents
   are in stack)
2) Reverse directions of all arcs to obtain the transpose graph.
   Note: If you reverse the edges of a strongly connected component, they remain strongly connected
3) One by one pop a vertex from S while S is not empty. Let the popped vertex be ‘v’. Take v as source and do DFS (call DFSUtil(v)). 
   The DFS starting from v prints strongly connected component of v. In the above example, we process vertices in 
   order 0, 3, 4, 2, 1 (One by one popped from stack).
*/
/*Why Kosaraju's Algo works?
DFS of a graph produces a single tree if all vertices are reachable from the DFS starting point. Otherwise DFS produces a forest. 
So DFS of a graph with only one SCC always produces a tree. The important point to note is DFS may produce a tree or a forest when 
there are more than one SCCs depending upon the chosen starting point.
To find and print all SCCs, we would want to start DFS from vertex 4 (which is a sink vertex), then move to 3 which is sink in
the remaining set (set excluding 4) and finally any of the remaining vertices (0, 1, 2).
So how do we find this sequence of picking vertices as starting points of DFS?
Solution: So if we do a DFS of the reversed graph using sequence of vertices in stack, we process vertices from sink to
source (in reversed graph). That is what we wanted to achieve and that is all needed to print SCCs one by one.
*/
#include <bits/stdc++.h>
using namespace std;

void addEdge(vector<int> adj[], int u, int v){
    adj[u].push_back(v);
}

void dfsPush(vector<int> adj[], bool visited[], int s, stack<int> &st){
    visited[s] = true;
    for(auto v:adj[s]){
        if(visited[v]==false){
            dfsPush(adj, visited, v, st);
        }
    }
    st.push(s);
}
void dfsPrint(vector<int> adj[], bool visited[], int s){
    cout<<s<<" ";
    visited[s] = true;
    for(auto v:adj[s]){
        if(visited[v]==false){
            dfsPrint(adj, visited, v);
        }
    }
}

void stronglyConnectedComponentsDirectedGraph(vector<int> adj[], int v){
    stack<int> st;
    
    //Step 1: dfs
    bool visited[v] = {false};
    for(int i=0;i<v;++i){
        if(visited[i]==false){
            dfsPush(adj, visited, i, st);
        }
    }
    
    //Step 2: Reverse directed graph
    vector<int> adjr[v];
    for(int i=0;i<v;++i){
        for(int j=0;j<adj[i].size();++j){
            adjr[adj[i][j]].push_back(i);
        }
    }
    
    //Step 3: dfs while popping
    bool visited2[v] = {false};
    while(!st.empty()){
        int u = st.top();
        st.pop();
        if(visited2[u]==false){
            dfsPrint(adjr, visited2, u);
            cout<<endl;
        }
    }
}

int main() {
    
    int v = 5;
    vector<int> adj[v];
    addEdge(adj, 0, 2);
    addEdge(adj, 0, 3);
    addEdge(adj, 1, 0);
    addEdge(adj, 2, 1);
    addEdge(adj, 3, 4);
    
    stronglyConnectedComponentsDirectedGraph(adj, v);
    
    
	return 0;
}


// APPLICATIONs of Step 1 of Kosaraju's algorithm

//Problem : Find the *smallest* Mother vertex in a directed graph. A mother vertex in a graph G = (V,E) is a vertex v such
//that all other vertices in G can be reached by a path from v.

/*Different Cases :
Undirected Connected Graph - Every Node is Mother Vertex
Undirected/Directed Disconnected Graph - No Mother Vertex
Directed Connected Graph - Solved below
*/


/*
A Naive approach : O(V(E+V)) time
A trivial approach will be to perform a DFS/BFS on all the vertices and find whether we can reach all the vertices 
from that vertex. This approach takes O(V(E+V)) time, which is very inefficient for large graphs.
*/
/*
Efficient Approach : O(V+E) time
https://www.geeksforgeeks.org/find-a-mother-vertex-in-a-graph/
If there exist mother vertex (or vertices), then one of the mother vertices is the last finished vertex in DFS.
(Or a mother vertex has the maximum finish time in DFS traversal).
A vertex is said to be finished in DFS if a recursive call for its DFS is over, i.e., all descendants of 
the vertex have been visited.
Note: - same as step 1 of kosaraju's algorith for strongly connected components in directed graph
Algorithm :-
1) Do DFS traversal of the given graph. While doing traversal keep track of last finished vertex ‘v’. This step takes O(V+E) time.
2) If there exist mother vertex (or vetices), then v must be one (or one of them). Check if v is a mother vertex
by doing DFS/BFS from v. This step also takes O(V+E) time.

Note : Let the last finished vertex be v. Basically, we need to prove that there cannot be an edge from another
vertex u to v if u is not another mother vertex
*/

void bfs(vector<int> adj[], bool vis[], int s, int V){
    queue<int> q;
    q.push(s);
    vis[s] = true;
    while(!q.empty()){
        int size = q.size();
        for(int i=0;i<size;++i){
            int v = q.front();
            q.pop();
            
            for(int j=0;j<adj[v].size();++i){
                if(vis[adj[v][j]]==false) {
                    vis[adj[v][j]] = true;
                    q.push(vis[adj[v][j]]);
                }
            }
        }
    }
}


void dfs(vector<int> adj[], bool vis[], int s, int V){
    
    vis[s] = true;
    for(int i=0;i<adj[s].size();++i){
        if(vis[adj[s][i]]==false) dfs(adj, vis, adj[s][i], V);
    }
}



int findMother(int V, vector<int> adj[]) 
{ 
    //method 1 bfs on all vertices to check whether 
    //it is mother vertex
    //O(V*(V+E)) time
    // for(int i=0;i<V;++i){
    //     bool vis[V] = {false};   //keep track of visited nodes
    //     bfs(adj, vis, i, V);
    //     bool allFlag = true;
    //     for(int j=0;j<V;++j) {
    //         if(vis[j]!=true){
    //             allFlag=false;
    //             break;
    //         }
    //     }
    //     if(allFlag) return i;
    // }
    // return -1;
    
    
    //method 2 :
    //O(V+E) time
    //hint : if there exists a mother vertex (or vertices), then
    //one of the mother vertex is the last 
    //finished vertex in dfs
    //https://github.com/ap0996/ImportantAlgorithms/edit/master/gfg/17)Graph/9)%20Mother%20Vertex
    
    //Step 1 : look for last finished vertex i.e a candidate of mother vertex
    // Note: - same as step 1 of kosaraju's algorith for strongly connected components in directed graph
    // you can also use the stack approach to find last finished vertex as done in kosaraju's
    //O(V+E) time 
    bool vis[V] = {false};
    int m;  //used to keep track of last finished node
    for(int i=0;i<V;++i){
        if(vis[i]==false) {
            dfs(adj, vis, i, V);
            m = i;
        }
    }
    //Step 2 : verify that last finished vertex is
    //         infact a mother vertex
    //O(V+E) time 
    fill(vis, vis+V, false);
    dfs(adj, vis, m, V);
    for(int i=0;i<V;++i){
        if(vis[i]==false) return -1;
    }
    return m;
    
}


