
//3)
//TARJAN'S ALGORITHM : disc[] + low[] + stack
//Kosaraju's algorithm takes 2 traversal of graph, to find SCC, whereas tarjan's algorithm find SCC in 1 traversal of graph only
//https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/
/*Approach :
arjan Algorithm is based on following facts:
1. DFS search produces a DFS tree/forest
2. Strongly Connected Components form subtrees of the DFS tree.
3. If we can find the head of such subtrees, we can print/store all the nodes in that subtree (including head) and that will be one SCC.
4. There is no back edge from one SCC to another (There can be cross edges, but cross edges will not be used while processing the graph).

To find head of a SCC, we calculate disc and low array (as done for articulation point, bridge, biconnected component).

We do dfs & maintain disc[] and low[] as well. We keep pushing vertices in stack as we are traversing them. Whenever we find a vertex(say k) whose all children
have been processed and whose disc[k] = low[k] , this found vertex is beginning of some strongly connected component. We keep pushing vertices from stack until the 
popped vertex is same as considered vertex(i.e k).

Since the graph is directed, there can be cross edges in dfs tree as well, but note that these cross edges are to be avoided and not used in calculation of
disc[] & low[] values. Only tree edges and back edges dictates disc[] & low[] values.
*/

using namespace std;

void dfs(vector<int> adj[], bool visited[], int disc[], int low[], bool recursionStack[], stack<int> &st, int u){
    
    static int time = 0;
    
    visited[u] = true;
    recursionStack[u] = true;
    st.push(u);
    disc[u] = low[u] = ++time;
    
    
    for(int v: adj[u]){
        if(visited[v]==false){
           
            dfs(adj, visited, disc, low, recursionStack, st, v);
            
            // Check if the subtree rooted with v has a connection to 
			// one of the ancestors of u
            low[u] = min(low[u], low[v]);
            
            
        }else if(recursionStack[v]==true){     
            // Update low value of 'u' only of 'v' is still in stack 
            // (i.e. it's a back edge, not cross edge). 
            low[u] = min(low[u], disc[v]);
        }
    }
    
    //rule : if all it's adjacents are processed and disc[u] == low[u]
    
    if(disc[u]==low[u]){
        
        while(!st.empty()){
            int node = st.top();
            cout<<node<<", ";
            recursionStack[node] = false;
            st.pop();
            if(node==u) break;
        }
        cout<<"\n";
        
    }
    
    
}

void findSCC(vector<int> adj[], int v){
    
    bool visited[v];
    int disc[v];    //discovery time of vertices
    int low[v];     //lowest reachable discovery time of vertices
    bool recursionStack[v];     // to differentiate between back edge & cross edge
    stack<int> st;
    
    memset(recursionStack, false, v);
    memset(visited, false, v);
    //memset(disc, -1, v);
    
    for(int i=0;i<v;++i){
        if(visited[i]==false){
            dfs(adj, visited, disc, low, recursionStack, st, i);
        }
    }
    
}

int main() {
    
    //bridges
    int v, e;
    cin>>v>>e;
    
    vector<int> adj[v];
    
    for(int i=0;i<e;++i){
        int u, v;
        cin>>u>>v;
        adj[u].push_back(v);
       // adj[v].push_back(u);      //because graph is directed
    }
    
    // for(int i=0;i<v;++i){
    //     cout<<i<<" : ";
    //     for(int x: adj[i]) cout<<x<<", ";
    //     cout<<"\n";
    // }
    
    cout<<"Strongly Connected Components in Graph are : \n";
    findSCC(adj, v);
    
    return 0;
}



