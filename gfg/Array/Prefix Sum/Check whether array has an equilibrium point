//Equilibrium point in an array is an index where sum of all elements before it is equal to the sum of all elements after it.
//Do it in time complexity 0(n) & space complexity 0(1).

#include <bits/stdc++.h>
using namespace std;

int findEquilibrium(int A[], int n)
{
    //naive method : O(n^2) time & O(1) space
    // for(int i=0;i<n;++i){
    //     int lsum = 0;
    //     for(int j=0;j<i;++j) lsum += A[j];
    //     int rsum = 0;
    //     for(int j=i+1;j<n;++j) rsum += A[j];
    //     if(lsum==rsum) return i;
    // }
    // return -1;
    
    //method 2 : 
    //O(n) time & O(1) space
    // int l=0,r=n-1;
    // int lsum = A[l], rsum = A[r];
    // while(l<=r){
    //     //cout<<lsum<<", "<<rsum<<"\n";
    //     if(lsum<rsum){
    //         ++l;
    //         lsum += A[l];
    //     }else if(rsum<lsum){
    //         --r;
    //         rsum += A[r];
    //     }else{
    //         ++l;
    //         --r;
    //         lsum += A[l];
    //         rsum += A[r];
    //     }
    // }
    // //cout<<l<<","<<r<<"\n";
    // if(l-1==r+1) return l-1;
    // else return -1;
    
    //method 3 : prefix sum + suffix sum
    //O(n) time & O(n) space
    // int prefix[n];
    // prefix[0] = A[0];
    // for(int i=1;i<n;++i) prefix[i] = prefix[i-1]+A[i];
    // int suffix[n];
    // suffix[n-1] = A[n-1];
    // for(int i=n-2;i>=0;--i) suffix[i] = suffix[i+1]+A[i];
    
    // for(int i=0;i<n;++i){
    //     if(prefix[i]==suffix[i]) return i;
    // }
    // return -1;
    
    //method 4 : prefix sum
    //O(n) time & O(1) space
    int sum = 0;
    for(int i=0;i<n;++i) sum += A[i];
    
    int leftSum = 0;
    for(int i=0;i<n;++i){
        if(leftSum==(sum-A[i])) return i;
        leftSum += A[i];
        sum -= A[i];
    }
    return -1;
}

int main()
{
    int arr[] = {2, -2, 4};
    int n = sizeof(arr)/sizeof(arr[0]);
    
    bool equi = findEquilibrium(arr, n);
    
    if(equi) cout<<"Yes"<<endl;
    else cout<<"No"<<endl;
    
    
    
    return 0;
}
