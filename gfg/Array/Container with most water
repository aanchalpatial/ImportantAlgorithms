/*
Given N non-negative integers a_1, a_2, ..., a_n  where each represents a point at coordinate  (i, a_i) .
N vertical lines are drawn such that the two endpoints of line i is at  (i, a_i)  and (i, 0). Find two lines,
which together with x-axis forms a container, such that it contains the most water.
*/
/*
Example:
Input:
2
4
1 5 4 3 
5
3 1 2 4 5
Output
6
12

Explanation:
Testcase 1: 5 and 3 are distance 2 apart. So the size of the base = 2. Height of container = min(5, 3) = 3. So total area = 3 * 2 = 6.
Testcase 2: 5 and 3 are distance 4 apart. So the size of the base = 4. Height of container = min(5, 3) = 3. So total area = 4 * 3 = 12.
*/

long long maxArea(long long A[], int len)
{
    // naive is O(n^2) time & O(1) space
    // long long water = 0;
    // for(int i=0;i<len-1;++i){
    //     for(int j=i+1;j<len;++j){
    //         water = max(water, min(A[i], A[j])*(j-i));
    //     }
    // }
    // return water;

    //method 2 :
    //O(n) time & O(1) space
    /*
    The maximum width of container are the outermost lines. 
    So in order to find out the maximum area we need to find
    out the maximum possible height. 
    */
    int i=0,j=len-1;
    long long water = 0;
    while(i<j){
        water = max(water, (j-i)*min(A[i], A[j]));
        if(A[i]<=A[j]) ++i;
        else --j;
    }
    return water;
}
