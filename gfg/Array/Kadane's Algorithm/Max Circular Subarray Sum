/*Given an array arr[] of N integers arranged in a circular fashion. 
Your task is to find the maximum contigious subarray sum.*/

//NAIVE method is O(n^2) time & O(1) space


//method 2 : Using kadane's algorithm
/*
Return maximum of :
->sum of normal subarray &
->sum of circular subarray
*/
//O(n) time & O(1) space
int kadane(int arr[], int n){
    
    //kadane Algorithm : Largest Sum Contigous Subarray
    int max_so_far = arr[0];
    int max_ending_here = arr[0];
    
    for(int i=1;i<n;++i){
        max_ending_here = max(arr[i], max_ending_here+arr[i]);
        max_so_far = max( max_ending_here, max_so_far);
    }
    return max_so_far;
}
int circularSubarraySum(int arr[], int num){                      //****************RRRRRRRR**************
    
    // your code here
    int sum = 0;
    for(int i=0;i<num;++i) sum += arr[i];
    int max_kadane = kadane(arr, num);
    
    
    //to find maximum sum in circular subarray , find minimum sum subarray and SUBSTRACT it from the overall sum
    //but INSTEAD of modifying kadnae's to find minimum sum subarray, we invert all elements and then ADD it's maximum sum
    //with overall sum which gives us the intended result
    
    //all elements are inverted
    for(int i=0;i<num;++i) arr[i] *= -1;
    int max_wrap = sum + kadane(arr, num);
    
    //cout<<max_kadane<<" "<<max_wrap<<endl;
    return ( abs(max_wrap) > abs(max_kadane) ) ? max_wrap: max_kadane;
    
}

int main()
{
  int a[] = {8, -8, 9, -9, 10, -11, 12};
  int n = 7;
  cout << maxSubarraySum(a, n) << endl;
  return 0;
    }
