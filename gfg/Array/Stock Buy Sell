/*The cost of a stock on each day is given in an array, find the max profit that you can make by
buying and selling in those days
Following is algorithm for this problem : =
1)Find the local minima and store it as starting index. If not exists, return.
2)Find the local maxima. and store it as ending index. If we reach the end, set the end as ending index.
3)Update the solution (Increment count of buy sell pairs)
4)Repeat the above steps if end is not reached.

Time Complexity: The outer loop runs till i becomes n-1. The inner two loops increment value of i in every iteration.
So overall time complexity is O(n)*/

#include<bits/stdc++.h>
using namespace std;


int maximum_profit(int arr[], int n){
    
    if (n==1) return 0;
    if ( is_sorted(arr, arr+n) ) return (arr[n-1] - arr[0]); 
    if ( is_sorted(arr, arr+n, greater<int>()) ) return 0;
    
    int result = 0;
    int minima = 0, maxima = 0;
    
    for(int i=0;i<n;++i){
        while( (arr[i] >= arr[i+1]) && (i<n-1) ) ++i;
        if (i == n - 1) break;
        minima = arr[i];
        while( (arr[i] <= arr[i+1]) && (i<n-1) ) ++i;
        maxima = arr[i];
        result += maxima-minima;
        //cout<<"minima: "<<minima<<", "<<"maxima: "<<maxima<<endl;
    }
    
    return result;
    
}

int main(){

  int arr[] = {4 ,1, 5, 3, 8, 12, 10, 20};
  //int arr[] = {1,2,3,4,5};
  //int arr[] = {5,4,3,2,1};
  int n = sizeof(arr)/sizeof(arr[0]);
  
  int maxProfit = maximum_profit(arr, n);
  cout<<maxProfit;
  
  
return 0;}
