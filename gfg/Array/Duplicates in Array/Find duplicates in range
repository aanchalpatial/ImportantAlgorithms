//FINDING DUPLICATES IN ARRAY WHICH CONTAINS ELEMENTS IN *** RANGE 0 TO N-1 *** IN O(N) TIME & O(1) SPACE
/*

Traverse the array. Do following for every index i of A[].
{
check for sign of A[abs(A[i])] ;
if positive then
   make it negative by   A[abs(A[i])]=-A[abs(A[i])];
else  // i.e., A[abs(A[i])] is negative
   this   element (ith element of list) is a repetition
}

*/
//Above approach can't work for negative & 0 numbers.

/*LEETCODE 442
Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements that appear twice in this array.
Could you do it without extra space and in O(n) runtime?
*/

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        
        vector<int> result;
        
        //method : using index to store value
        //if nums[i] is negative means i+1 exits in array
        //O(n) time & O(1) space
        for(int i=0;i<nums.size();++i){
            int index = abs(nums[i])-1;
            
            if(nums[index]<0) result.push_back(index+1);
            else nums[index] *= -1;
        }
        return result;
        
        
        //COMPARE WITH :- LEETCODE 287
        
    }
};


//*** APPLICATIONS ***

#include <iostream>
using namespace std;

int main() {
    
    //APPLICATION 1 : UNIQUE 4 of :- https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/Bit%20Magic/XOR%20in%20array
    //UNIQUE 4 :
    //You are given an array of n+2 elements. All elements of the array
    //are in range 1 to n. And all elements occur once except 
    //two numbers which occur twice. Find the two repeating numbers.
    
    int arr[] = {4, 2, 4, 5, 2, 3, 1};
    int n = 5;
    
    //method 1 :  using xor
    
    //method 2 : index based approach
    for(int i=0;i<n+2;++i){
        int index = abs(arr[i])-1;
        arr[index] *= -1;
    }
    for(int i=0;i<n;++i){
        if(arr[i]>0) cout<<i+1<<", ";
    }
    cout<<"\n";
    
    
    //APPLICATION 2 : Find Duplicates in array where elements are in range 0 to n-1

    //Given an array of n elements which contains elements from 0 to n-1, with any of 
    //these numbers appearing any number of times. Find these repeating numbers in O(n) and 
    //using only constant memory space.
    int arr2[] = {1, 2, 3, 1, 3, 6, 6};
    int n2 = 7;
    for(int i=0;i<n2;++i){
        int index = abs(arr2[i]);
        if(arr2[index]>0) arr2[index] *= -1;
        else{
            //given number is repeating
            cout<<index<<", ";
        }
    }
    cout<<"\n";
    
    
    //APPLICATION 3 : Find smallest missing positive number missing from an unsorted array of integers
   /*https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/
   
   1) Segregate positive numbers from others i.e., move all non-positive numbers to left side. In the following code, segregate() function does this part.
   2) Now we can IGNORE non-positive elements, say before index k lies nom-positive elements then 
   if we want to flag presence of 1 then we will do at index k i.e k corresponds to our new 0 index .i.e consider only the part of array which contains all positive elements 
   
   We traverse the array containing all positive numbers and to mark presence of an element x, we change the sign of value at index x to negative. 
   We traverse the array again and print the first index which has positive value. In the following code, findMissingPositive() function does this part.
   Note that in findMissingPositive, we have subtracted 1 from the values as indexes start from 0 in C.
   */
   /* C++ program to find the smallest positive missing number */
#include <bits/stdc++.h> 
using namespace std; 

/* Utility to swap to integers */
void swap(int* a, int* b) 
{ 
	int temp; 
	temp = *a; 
	*a = *b; 
	*b = temp; 
} 

/* Utility function that puts all 
non-positive (0 and negative) numbers on left 
side of arr[] and return count of such numbers */
int segregate(int arr[], int size) 
{ 
	int j = 0, i; 
	for (i = 0; i < size; i++) { 
		if (arr[i] <= 0) { 
			swap(&arr[i], &arr[j]); 
			j++; // increment count of non-positive integers 
		} 
	} 

	return j; 
} 

/* Find the smallest positive missing number 
in an array that contains all positive integers */
int findMissingPositive(int arr[], int size) 
{ 
	int i; 

	// Mark arr[i] as visited by making arr[arr[i] - 1] negative. 
	// Note that 1 is subtracted because index start 
	// from 0 and positive numbers start from 1 
	for (i = 0; i < size; i++) { 
		if (abs(arr[i]) - 1 < size && arr[abs(arr[i]) - 1] > 0) 
			arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1]; 
	} 

	// Return the first index value at which is positive 
	for (i = 0; i < size; i++) 
		if (arr[i] > 0) 
			// 1 is added because indexes start from 0 
			return i + 1; 

	return size + 1; 
} 

/* Find the smallest positive missing 
number in an array that contains 
both positive and negative integers */
int findMissing(int arr[], int size) 
{ 
	// First separate positive and negative numbers 
	int shift = segregate(arr, size); 

	// Shift the array and call findMissingPositive for 
	// positive part 
	return findMissingPositive(arr + shift, size - shift); 
} 

// Driver code 
int main() 
{ 
	int arr[] = { 0, 10, 2, -10, -20 }; 
	int arr_size = sizeof(arr) / sizeof(arr[0]); 
	int missing = findMissing(arr, arr_size); 
	cout << "The smallest positive missing number is " << missing; 
	return 0; 
}


}



