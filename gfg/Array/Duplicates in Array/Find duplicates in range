//FINDING DUPLICATES IN ARRAY WHICH CONTAINS ELEMENTS IN *** RANGE 0 TO N-1 *** IN O(N) TIME & O(1) SPACE
/*

Traverse the array. Do following for every index i of A[].
{
check for sign of A[abs(A[i])] ;
if positive then
   make it negative by   A[abs(A[i])]=-A[abs(A[i])];
else  // i.e., A[abs(A[i])] is negative
   this   element (ith element of list) is a repetition
}

*/
//Above approach can't work for negative & 0 numbers.

/*LEETCODE 442
Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements that appear twice in this array.
Could you do it without extra space and in O(n) runtime?
*/

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        
        vector<int> result;
        
        //method : using index to store value
        //if nums[i] is negative means i+1 exits in array
        //O(n) time & O(1) space
        for(int i=0;i<nums.size();++i){
            int index = abs(nums[i])-1;
            
            if(nums[index]<0) result.push_back(index+1);
            else nums[index] *= -1;
        }
        return result;
        
        
        //COMPARE WITH :- LEETCODE 287
        
    }
};


//*** APPLICATIONS ***

#include <iostream>
using namespace std;

int main() {
    
    //APPLICATION 1 : UNIQUE 4 of :- https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/Bit%20Magic/XOR%20in%20array
    //UNIQUE 4 :
    //You are given an array of n+2 elements. All elements of the array
    //are in range 1 to n. And all elements occur once except 
    //two numbers which occur twice. Find the two repeating numbers.
    
    int arr[] = {4, 2, 4, 5, 2, 3, 1};
    int n = 5;
    
    //method 1 :  using xor
    
    //method 2 : index based approach
    for(int i=0;i<n+2;++i){
        int index = abs(arr[i])-1;
        arr[index] *= -1;
    }
    for(int i=0;i<n;++i){
        if(arr[i]>0) cout<<i+1<<", ";
    }
    cout<<"\n";
    
    
    //APPLICATION 2 : Find Duplicates in array where elements are in range 0 to n-1

    //Given an array of n elements which contains elements from 0 to n-1, with any of 
    //these numbers appearing any number of times. Find these repeating numbers in O(n) and 
    //using only constant memory space.
    int arr2[] = {1, 2, 3, 1, 3, 6, 6};
    int n2 = 7;
    for(int i=0;i<n2;++i){
        int index = abs(arr2[i]);
        if(arr2[index]>0) arr2[index] *= -1;
        else{
            //given number is repeating
            cout<<index<<", ";
        }
    }
    cout<<"\n";
    
    
    //APPLICATION 3 : Find smallest missing positive number missing from an unsorted array of integers
   /*
   1. Segregrate Positve and Negative Numbers in the array.

   2. Traverse all the Positive Numbers, 
        i) if, the number is larger then the input array size, do nothing
        ii) else, the number is within input array size limit, consider number as array index, and mark the element at that index Negative.

   3. After doing the above operation, Traverse the array with initial Positve values again, and store the first occurunce of index,
     whose value is Non-Negative. (Because this means that index value was not present in the array)

   4. This stored element is the Result 
   */
   //step 1 : segregate negative & positive elements
    int k=0;
    for(int i=0;i<n;++i){
        if(arr[i]<=0) {
            swap(arr[i], arr[k++]);
        }
    }
    //making all negative & 0 values to a positive so that 
    //they can be used for index based approach
    for(int i=0;i<k;++i) arr[i] = 1;
    //step 2 :
    for(int i=k;i<n;++i) {  //considering only positive numbers
        int index = abs(arr[i])-1;
        if(index<n&&arr[index]>0){
            arr[index] *=-1;
        }
    }
    //step 3 :
    for(int i=0;i<n;++i){
        if(arr[i]>0) return i+1;
    }
    return n+1;
    
    
    
	return 0;
}



