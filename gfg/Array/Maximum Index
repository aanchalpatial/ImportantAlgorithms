//Given an array A[] of N positive integers. The task is to find the maximum of j - i subjected to the constraint of A[i] <= A[j].

int maxIndexDiff(int arr[], int n) 
{ 
    int result = 0;
    
    //naive method : O(n^2) time & O(1) space
    // for(int i=0;i<=n;++i){
    //     int t = 0;
    //     for(int j=i+1;j<n;++j){
    //         if(arr[j]>=arr[i]) t = j-i; 
    //     }
    //     result = max(result, t);
    // }
    // return result;
    
    //method 2 : sorting + hashing
    //O(nlogn) time & O(n) space
    /*Approach :
    -> Traverse the array and store the index of each element 
    in a list (to handle duplicates).
    -> Sort the array.
    -> Now traverse the array and keep track of the maximum
    difference of i and j.
    -> For j consider the last index from the list of possible
    index of the element and for i consider the first index from 
    the list. (As the index were appended in ascending order).
    -> Keep updating the max difference till the end of array.
    */
    // unordered_map<int, vector<int>> mp; //stores element and its index
    // for(int i=0;i<n;++i){
    //     if(mp.find(arr[i])==mp.end()){
    //         vector<int> v;
    //         v.push_back(i);
    //         mp.insert(make_pair(arr[i], v));
    //     }else {
    //         mp[arr[i]].push_back(i);
    //     }
    // }
    // sort(arr, arr+n);
    // int p = INT_MAX;
    // for(int i=0;i<n;++i){
    //     if(mp[arr[i]][0]<p) p = mp[arr[i]][0];
    //     int size = mp[arr[i]].size();
    //     result = max(result, mp[arr[i]][size-1]-p);
    // }
    // return result;
    
    //method 3 : 
    //O(n) time & O(n) space
    
    /*
    To solve this problem, we need to get two optimum indexes of arr[]: left index i and right index j.
    For an element arr[i], we do not need to consider arr[i] for left index if there is an element smaller than arr[i] 
    on left side of arr[i]. Similarly, if there is a greater element on right side of arr[j] then we do not need to consider
    this j for right index. So we construct two auxiliary arrays LMin[] and RMax[] such that LMin[i] holds the smallest 
    element on left side of arr[i] including arr[i], and RMax[j] holds the greatest element on right side
    of arr[j] including arr[j]. After constructing these two auxiliary arrays, we traverse both of these arrays 
    from left to right. While traversing LMin[] and RMa[] if we see that LMin[i] is greater than RMax[j], then we 
    must move ahead in LMin[] (or do i++) because all elements on left of LMin[i] are greater than or equal to LMin[i]. 
    Otherwise we must move ahead in RMax[j] to look for a greater j â€“ i value.
    */
    
    
    int lmin[n];//lamx[i] stores smallest element in range 0 to i
    int rmax[n];//rmax[i] stores largest element in range i to n-1
    lmin[0] = arr[0];
    for(int i=1;i<n;++i) lmin[i] = min(lmin[i-1], arr[i]);
    rmax[n-1] = arr[n-1];
    for(int i=n-2;i>=0;--i) rmax[i] = max(rmax[i+1], arr[i]);
    
    // for(int i=0;i<n;++i) cout<<lmax[i]<<", ";
    // cout<<"\n";
    // for(int i=n-1;i>=0;--i) cout<<rmax[i]<<", ";
    // cout<<"\n";
    
    //if(lmin[i]>lmax[j]) do ++i;
    //else try to increase j as much as you can
    int i=0,j=0;
    while(i<n&&j<n){
        if(lmin[i]>rmax[j]){
            ++i;
        }else {
            result = max(result, j-i);
            ++j;
        }
    }
    return result;
    
}
