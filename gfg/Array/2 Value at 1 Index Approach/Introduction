STORING 2 VALUES AT 1 INDEX 
This approach is used in questions where we have rearrange elements of an array in O(1) space

Whenever a question states that values in array are in range 0 to n-1 , it gives us some kind of hint to use above approach
to solve given question in O(1)

/*APPROACH :
We would be discussing a more generalised approach here, which can be used for other type of Rearranging problems.

For Rearranging array, we need to store a new value at the position of old value, but do not want to lose the old value too.
Also, we cannot use extra space for this operation (else it would not be Rearrangement and is very easy to execute).

Here, We will store both new value and old value at same position. But how is that possible..?? (No, I am not using pair)

Here, We will use the formula Dividend = Divisor * Quotient + Remainder
where      

           Divisor = a value greater than any element in array
Note : when in question it is stated that every element in array is in range either 0 to n-1 or 1 to n then we can
consider above divisor to size of array or size of array + 1 respectively, since it will be greater than any element in array
           
           Quotient = New number at index i after rearrangement
           Remainder = Old Number at index i before rearrangement
           Dividend = Number stored at index i

While Traversing the array, we will Look for the value at arr[arr[i]] (which is to be stored at index i),
multiply it with Divisor (size of array), and add the old value present at arr[i] to it.
Divisor is a value which is higher then values in array (in this case n - size of array, as array elements are between 0 to n-1)

New Value =  Number stored at i / Divisor
Old Value = Number stored at i % Divisor
*/

/*IN SIMPLE WORDS : 

     we will use a mathematics trick to store 2 values at one index
     say we have to store x & y at index i of arr
     then first we have to find an element (Which is greater than every element of array) x & y say z
     then arr[i] = x + y*z, then arr[i]%z will give x &
     arr[i]/z will give y
     
*/



//APPLICATION 1 :  Above approach is used to make mergesort in place :
//Check here : Line 50 of :- https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/7)%20Sorting/Merge%20Sort%20and%20its%20Merge%20Function


