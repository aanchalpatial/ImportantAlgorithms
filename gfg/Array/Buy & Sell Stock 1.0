/*Say you have an array prices for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as
you like (i.e., buy one and sell one share of the stock multiple times).
Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).
*/
/*Minima - Maxima Approach :
Following is algorithm for this problem : =
1)Find the local minima and store it as starting index. If not exists, return.
2)Find the local maxima. and store it as ending index. If we reach the end, set the end as ending index.
3)Update the solution (Increment count of buy sell pairs)
4)Repeat the above steps if end is not reached.

Time Complexity: The outer loop runs till i becomes n-1. The inner two loops increment value of i in every iteration.
So overall time complexity is O(n)
*/

/*IMPORTANT NOTE : 
There are 2 versions of BUY & SELL STOCK problem.
Version 1.0 : find maximum profit when you may complete as many transactions as you like.
This version can be solved with peak valley approach i.e minima maxima approach
Problem Link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
Solution Link : current page

Version 2.0 : find maximum profit If you were only permitted to complete at most one transaction.
This version requires DP to be solved
Problem Link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
Solution Link : https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/20)Dynamic%20Programming/19)Buy%20%26%20Sell%20Stock%202.0

Version 3.0 : find maximum profit If you were only permitted to complete at most 2 transaction.
This version requires DP to be solved
Problem Link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/

Note :- You may not engage in multiple transactions at the same time (i.e., you must sell the stock 
before you buy again) in any of the 3 versions.
*/

#include<bits/stdc++.h>
using namespace std;


int maximum_profit(int arr[], int n){
    
    if (n==1) return 0;
    if ( is_sorted(arr, arr+n) ) return (arr[n-1] - arr[0]); 
    if ( is_sorted(arr, arr+n, greater<int>()) ) return 0;
    
    int result = 0;
    int minima = 0, maxima = 0;
    
    for(int i=0;i<n;++i){
        while( (arr[i] >= arr[i+1]) && (i<n-1) ) ++i;
        if (i == n - 1) break;
        minima = arr[i];
        while( (arr[i] <= arr[i+1]) && (i<n-1) ) ++i;
        maxima = arr[i];
        result += maxima-minima;
        //cout<<"minima: "<<minima<<", "<<"maxima: "<<maxima<<endl;
    }
    
    return result;
    
}

int main(){

  int arr[] = {4 ,1, 5, 3, 8, 12, 10, 20};
  //int arr[] = {1,2,3,4,5};
  //int arr[] = {5,4,3,2,1};
  int n = sizeof(arr)/sizeof(arr[0]);
  
  int maxProfit = maximum_profit(arr, n);
  cout<<maxProfit;
  
  
return 0;}
