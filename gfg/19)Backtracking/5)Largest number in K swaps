/*
Given a number K and string S of digits denoting a positive integer, build the largest number possible by performing swap
operations on the digits of S atmost K times.
*/
//https://www.geeksforgeeks.org/find-maximum-number-possible-by-doing-at-most-k-swaps/
/*Approach:
dea is to consider every digit and swap it with digits following it one at a time and see if it leads to the maximum number.
We repeat the process K times. The code can be further optimized if we swap only if current digit is less than the following digit.
*/

void helper(string str, int k, string& max, int index){
    //base case :
    if(k==0) return;
    
    int n = str.size();
    //find maximum element in range index+1 to n-1
    int max_ele = str[index];
    for(int i=index+1;i<n;++i){
        if(max_ele<str[i]) max_ele = str[i];
    }
    //if maximum element found is not equal to str[index] then 
    //current index has to be swapped and count of 
    //swaps will decrement
    if(max_ele!=str[index]) --k;
    
    for(int j=index;j<n;++j){
        if(str[j]==max_ele){
            swap(str[j], str[index]);
            if(str.compare(max)>0) max = str;
            helper(str, k, max, index+1);
            swap(str[j], str[index]);
        }
    }
}



void findMaximumNum(string str, int k, string& max) {
    //note :- only positive numbers are there
  
    //method : back tracking 
    //O((n^2)^k) time & O(n) space
    // if(k==0) return;
    // for(int i=0;i<str.size()-1;++i){
    //     for(int j=i+1;j<str.size();++j){
    //         if(str[i]<str[j]){
    //             swap(str[i], str[j]);
    //             if(str.compare(max)>0) max = str;
    //             findMaximumNum(str, k-1, max);
    //             swap(str[i], str[j]);   //backtrack
    //         }
    //     }
    // }
    
    //method 2 :  backtracking + optimisation
    //pre compute the greatest value after current index
    //O(n^k) time & O(n) space
    helper(str, k , max, 0);

}
