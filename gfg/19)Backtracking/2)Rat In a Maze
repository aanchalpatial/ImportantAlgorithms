/*
There is a given maze of size N x N. The source and the destination location is top-left cell and bottom right cell respectively.
Some cells are valid to move and some cells are blocked. If one rat starts moving from start vertex to destination vertex, 
we have to find that is there any way to complete the path, if it is possible then mark the correct path for the rat.

The maze is given using a binary matrix, where it is marked with 1, it is a valid path, otherwise 0 for a blocked cell.
NOTE: The rat can only move in two directions, either to the right or to the down.
*/

//Naive solution is to generate all possible paths and choose if any of them lead to bottom most right cell

//Efficient Approach:  Backtracking
#include <bits/stdc++.h>
using namespace std;

bool isSafe(vector<int> maze[], int i, int j, int n){
    return i<n&&j<n&&maze[i][j]==1;
}

bool solveMaze(vector<int> maze[], vector<int> sol[], int i, int j, int n){
    if(i==n-1&&j==n-1){
        sol[i][j] = 1;
        return true;
    }
    
    if(isSafe(maze, i, j, n)){
        sol[i][j] = 1;
        if(solveMaze(maze, sol, i+1,j,n)) return true;
        if(solveMaze(maze, sol, i,j+1,n)) return true;
        //if control reaches here neither of right or bottom moves returned true
        sol[i][j] = 0;				// *** BACKTRACKING ***
    }
    return false;
}

void findPath(vector<int> maze[], int n){
    vector<int> sol[n]; // this matrxi will trace path of solution
    for(int i=0;i<n;++i){
        for(int j=0;j<n;++j){
            sol[i].push_back(0);
        }
    }
    if(solveMaze(maze, sol, 0, 0, n)){
        cout<<"Yes"<<endl;
        for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
                cout<<sol[i][j]<<" ";
            }
            cout<<endl;
        }
        
    }else {
        cout<<"No Path Possible !!"<<endl;
    }
}

int main() {
    int n = 3;
    int arr[] = {1,0,1,1,1,0,0,1,1};
    int index = 0;
    
    vector<int> maze[n];
    for(int i =0;i<n;++i){
        for(int j=0;j<n;++j){
            maze[i].push_back(arr[index++]);
        }
    }

    findPath(maze, n);
    
	return 0;
}
