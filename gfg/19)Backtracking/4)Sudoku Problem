/*
Given a partially filled 9×9 2D array ‘grid[9][9]’, the goal is to assign digits (from 1 to 9) to the empty cells so that 
every ROW, COLUMN, and SUBGRID of size 3×3 contains exactly one instance of the digits from 1 to 9.
Solution may not be unique.
*/
/*
Naive Algorithm
The Naive Algorithm is to generate all possible configurations of numbers from 1 to 9 to fill the empty cells. 
Try every configuration one by one until the correct configuration is found.
Time : x^N, where x is the number of free cells
*/

/*
Backtracking Algorithm
Like all other Backtracking problems, we can solve Sudoku by one by one assigning numbers to empty cells. 
Before assigning a number, we check whether it is safe to assign. We basically check that the same number is not present in 
the current row, current column and current 3X3 subgrid. After checking for safety, we assign the number, and recursively check 
whether this assignment leads to a solution or not. If the assignment doesn’t lead to a solution, then we try the next number
for the current empty cell. And if none of the number (1 to 9) leads to a solution, we return false.
i.e
Find row, col of an unassigned cell
  If there is none, return true
  For digits from 1 to 9
    a) If there is no conflict for digit at row, col
        assign digit to row, col and recursively try fill in rest of grid
    b) If recursion successful, return true
    c) Else, remove digit and try another
  If all digits have been tried and nothing worked, return false
*/

#include <bits/stdc++.h>
using namespace std;

pair<int, int> findNextZero(vector<int> grid[], int n){
    pair<int, int> result = make_pair(-1, -1);
    for(int i=0;i<n;++i){
        for(int j=0;j<n;++j){
            if(grid[i][j]==0){
                result.first = i;
                result.second = j;
                return result;
            }
        }
    }
    //no zero's in grid
    return result;
}

bool isSafe(vector<int> grid[], int p, int q, int x, int n){
    //1) checking current row 
    for(int i=0;i<n;++i){
        if(grid[p][i]==x) return false;
    }
    
    //2) checking current column 
    for(int i=0;i<n;++i){
        if(grid[i][q]==x) return false;
    }
    
    //3) checking sub grid
    //find start index of current sub grid
    int s = sqrt(n);
    int rs = p-p%s;
    int cs = q-q%s;
    for(int i=0;i<s;++i){
        for(int j=0;j<s;++j){
            if(grid[rs+i][cs+j]==x) return false;
        }
    }
    
    
    return true;
    
}

bool SolveSudoku(vector<int> grid[], int n){
    pair<int, int> nextZero = findNextZero(grid, n);
    int p = nextZero.first;
    int q = nextZero.second;
    if(p==-1&&q==-1) return true;
    
    //trying all possible numbers from 1 to n
    for(int i=1;i<=n;++i){
        if(isSafe(grid, p, q, i, n)){
            grid[p][q] = i;
            if(SolveSudoku(grid, n)) return true;
            grid[p][q] = 0;
        }
    }
    return false;
}

void SolveSudokuWrapper(vector<int> grid[], int n){
    
    if ( SolveSudoku(grid, n)== true) {
        cout<<"Yes"<<endl;
        for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
                cout<<grid[i][j]<< " ";
            }
            cout<<endl;
        }
    }  
    else cout << "No solution exists"<<endl;  
  
}

int main()  
{  
    int N = 9;
    // 0 means unassigned cells  
    int matrix[N][N]={
                      {3, 0, 6, 5, 0, 8, 4, 0, 0},  
                      {5, 2, 0, 0, 0, 0, 0, 0, 0},  
                      {0, 8, 7, 0, 0, 0, 0, 3, 1},  
                      {0, 0, 3, 0, 1, 0, 0, 8, 0},  
                      {9, 0, 0, 8, 6, 3, 0, 0, 5},  
                      {0, 5, 0, 0, 9, 0, 6, 0, 0},  
                      {1, 3, 0, 0, 0, 0, 2, 5, 0},  
                      {0, 0, 0, 0, 0, 0, 0, 7, 4},  
                      {0, 0, 5, 2, 0, 6, 3, 0, 0}
                     };
                      
    //we save matrix in grid a 2D matrix is not easy to pass as an argument
    vector<int> grid[9];
    for(int i=0;i<9;++i){
        for(int j=0;j<9;++j){
            grid[i].push_back(matrix[i][j]);
        }
    }
                      
    SolveSudokuWrapper(grid, N);
    
    return 0;  
} 

