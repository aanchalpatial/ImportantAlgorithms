/*
Given a binary tree, Your task is to complete the function largestBst that returns the size of the largest subtree
which is also a Binary Search Tree (BST). If the whole Binary Tree is BST, then return the size of the whole tree.
*/

//method 1 : naive method 
//O(n^2) time & O(1) space
//traverse binary tree and for every node check whether tree rooted with current node is BST or not.
int getSize(Node *root){
    if(root==NULL) return 0;
    return 1+getSize(root->left)+getSize(root->right);
}
bool checkBst(Node *root, int l, int r){
    if(root==NULL) return true;
    bool m = checkBst(root->left, l, root->data);
    bool n = checkBst(root->right, root->data, r);
    if(m&&n&&root->data>l&&root->data<r) return true;
    else return false;
}
int result;
void inorder(Node *root){
    if(root==NULL) return;
    inorder(root->left);
    if(checkBst(root, INT_MIN, INT_MAX)){
        result = max(result, getSize(root));
    }
    inorder(root->right);
}
int largestBst(Node *root)
{
	//naive approach
	//O(n^2) time & O(1) space
 	result = -1;
 	inorder(root);
 	return result;
}


//method 2 : 
//O(n) time & O(1) space
/*
A Binary tree is BST if following is true for every node x.

The largest value in left subtree (of x) is smaller than value of x.
The smallest value in right subtree (of x) is greater than value of x.
We traverse tree in bottom up manner. For every traversed node, we return maximum and minimum values in subtree rooted with it.
 A subtree need to tell the parent whether it is BST or not and also need to pass minimum & maximum value in it.
*/
struct Info {
    int max;
    int min;
    bool isBst;
    int size;
};
Info *helper(TreeNode *root, int &result) {
    if(root==NULL) {
        Info *info = new Info();
        info->isBst = true;
        info->max = INT_MIN;
        info->min = INT_MAX;
        info->size = 0;
        return info;
    }
    Info *lInfo = helper(root->left, result);
    Info *rInfo = helper(root->right, result);

    Info *info = new Info();
    info->max = max(root->data, rInfo->max);
    info->min = min(root->data, lInfo->min);
    info->size = 1 + lInfo->size + rInfo->size;
    if(lInfo->isBst&&rInfo->isBst&&root->data>lInfo->max&&root->data<rInfo->min) {
        info->isBst = true;
        result = max(result, info->size);
    } else {
        info->isBst = false;
    }
    return info;
    
}
int largestBST(TreeNode * root){
    // Write your code here.

    // naive approach: traverse every node, and the check if bst using current node as root
    // time: O(n^2) & space: O(h)

    // a node in bst follows this rule:
    // node value > the largest value in left subtree
    // node value < the smallest value in right subtree

    // hence we will traverse in bottom up manner
    // and a node has to communicate following to parent
    // the maximum & minimum value and also that if the subtree is bst or not
    // size of subtree
    int result = 0;
    helper(root, result);
    return result;
}