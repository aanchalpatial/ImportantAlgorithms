//Given two Binary Search Trees(without duplicates), you need to print the common nodes in them. 
//In other words, find intersection of two BSTs.


void printCommon(Node *root1, Node *root2)
{
     //method 1 : O(nlogm) time & O(n+m) space
     //do inorder traversal of both bst
     //then use binary search to find common
     //elements
    //  vector<int> v1;
    //  vector<int> v2;
    //  inorder(root1, v1);
    //  inorder(root2, v2);
    //  for(int i=0;i<v1.size();++i){
    //      while(v1[i]==v1[i+1]){
    //          ++i;
    //      }
    //      int index = upper_bound(v2.begin(), v2.end(), v1[i])-v2.begin();
    //      if(index>0&&v2[index-1]==v1[i]) cout<<v1[i]<<" ";
    //  }
     
     
     //method 2 : O(m+n) time & O(m+n) space
     //in method 1 instead of using binary search to find intersection of
     //2 sorted arrays use this approach : 
     //maintain 2 pointers i=0 & j=0 if(arr[i]<arr[j]) increment i
     //if(arr[j]<arr[i]) increment j and if arr[i]==arr[j] print it.
     vector<int> v1;
     vector<int> v2;
     inorder(root1, v1);
     inorder(root2, v2);
     int i=0,j=0;
     while(i<v1.size()&&j<v2.size()){
         if(v1[i]==v2[j]) {cout<<v1[i]<<" ";++i;++j;}
         else if(v1[i]<v2[j]) ++i;
         else ++j;
     }
     
     
     //method 3 : O(m+n) time & O(h1+h2) space
     //hint : iterative inorder traversal
     //https://www.geeksforgeeks.org/print-common-nodes-in-two-binary-search-trees/
      stack<Node *> s1, s2;
     while(1){
         //push as left as you can in bst 1 starting from root2
         while(root1!=NULL){
             s1.push(root1);
             root1 = root1->left;
         }
         //push as left as you can in bst 2 starting from root2
         while(root2!=NULL){
             s2.push(root2);
             root2 = root2->left;
         }
         //compare top 2 elements of stacks
         if(!s1.empty()&&!s2.empty()){
             root1 = s1.top();
             root2 = s2.top();
             if(root1->data==root2->data){
                 cout<<root1->data<<" ";
                 s1.pop();
                 s2.pop();
                 root1 = root1->right;
                 root2 = root2->right;
             }else if(root1->data<root2->data){
                 s1.pop();
                 root1 = root1->right;
                 root2 = NULL;
             }else {
                 s2.pop();
                 root2 = root2->right;
                 root1 = NULL;
             }
         }else break;
     }
     
     
}
