//Method 1 & Method 2 are same as of LCA of Binary Tree
//https://github.com/ap0996/ImportantAlgorithms/blob/956a68d644c31c46f00f239af984690a89983a00/gfg/14)Tree/14)Lowest%20Common%20Ancestor%20(LCA)


/*
Since Binary Search Tree is also a Binary Tree, we can apply the same process of finding LCA of two nodes in BST as that of binary trees.
But finding LCA in a Binary Tree takes O(N) time complexity.
We can do it in O(h) time which will be in case of balanced BST equal to O(logn)
*/


//Method 3 :
/*Approach:
 We can recursively traverse the BST from root. The main idea of the solution is, while traversing from top to bottom, 
 the first node n we encounter with value between n1 and n2, i.e., n1 <= n <= n2, is LCA of n1 and n2 (assuming that n1 < n2). 
 So just recursively traverse the BST, if node's value is greater than both n1 and n2 then our LCA lies in the left subtree of the node,
 if it's is smaller than both n1 and n2, then LCA lies on the right subtree. 
 Otherwise root is LCA (assuming that both n1 and n2 are present in BST).
*/

class Solution {
public:
    TreeNode *LCA;
    void helper(TreeNode* root, TreeNode* p, TreeNode* q){
        if(root==NULL) return;
        if(p->val<root->val&&q->val<root->val){
            helper(root->left, p, q);
        }else if(p->val>root->val&&q->val>root->val){
            helper(root->right, p, q);
        }else {
            LCA = root;
            return;
        }
        
    }
    
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        
        //method 1 : trace paths for both nodes & then compare paths
        //takes 3 traversals
        //O(n) time & O(n) space
        
        //method 2 : apply LCA of Binary Tree approach for BST
        //O(n) time & O(1) space
        
        //method 3 : 
        //O(h) time & O(1) space
        //takes 1 traversl
        LCA = root;
        helper(root, p, q);
        return LCA;
    }
};
//application : find distance between 2 nodes = (distance between first node & LCA) + (distance between second node & LCA) 
