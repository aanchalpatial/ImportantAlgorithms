//1) O(square_root(n)) time 
//We can check till √n because a larger factor of n must be a multiple of smaller factor that has been already checked.
bool isPrime(int N)
{
    //Your code here
    if(N<2) return false;
    
    for(int i=2;i<sqrt(N);++i){
            if(N%i == 0) return false;
        }
    
    return true;
}


//2) O(square_root(n)) time 
//even though time is same as method 1 but this method is still more efficient.
//All integers can be expressed as (6k + i) for some integer k and for i = -1, 0, 1, 2, 3, or 4.
//i = 0, 2, 3, 4 are not primes. 2 divides (6k + 0), (6k + 2), (6k + 4); and 3 divides (6k + 3).
//i = -1 & 1 are primes. All primes are of the form 6k ± 1

//So a more efficient method is to TEST if n is divisible by 2 or 3, then to TEST if n is a multiple of 6k ± 1.
//Otherwise n is prime.
bool isPrime(int N)
{
    if (N<2) return false;
    
    if (N == 2 || N == 3) return true;
    
    if( N%2 == 0 || N%3 == 0 ) return false;
    
    for(int i=5;i<= sqrt(N);i+=6){
        if(N%i == 0 || N%(i+2) == 0) return false;
    }
    
    return true;
}


//Note :- There are another algorithms with better complexity than square root of n such as AKS Primality Test & many
          probablistic algorithms as well such as Miller–Rabin primality test.



