/*
Given two line segments (p1, q1) and (p2, q2), find if the given line segments intersect with each other.

https://www.geeksforgeeks.org/orientation-3-ordered-points/
https://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/
https://practice.geeksforgeeks.org/problems/check-if-two-line-segments-intersect/0

Two segments (p1,q1) and (p2,q2) intersect if and only if one of the following two conditions is verified

1. General Case:
– (p1, q1, p2) and (p1, q1, q2) have different orientations and
– (p2, q2, p1) and (p2, q2, q1) have different orientations.

2. Special Case
– (p1, q1, p2), (p1, q1, q2), (p2, q2, p1), and (p2, q2, q1) are all collinear and
– the x-projections of (p1, q1) and (p2, q2) intersect
– the y-projections of (p1, q1) and (p2, q2) intersect
*/

#include<bits/stdc++.h>
using namespace std;

struct Point{
    int x, y;
};

int findOrientation(Point p1, Point p2, Point p3){
    
    int diff = (p2.y-p1.y)*(p3.x-p2.x)-(p3.y-p2.y)*(p2.x-p1.x);
    
    if(diff==0) return 0;     //collinear
    else if(diff>0) return 1;   //clockwise
    else return 2;              //counter-clockwise
    
}

bool onSegment(Point p1, Point p2, Point p3){
    //Given 3 collinear points, find if point p3 lies in line segment (p1,p2)
    if(p3.x>=min(p1.x, p2.x)&&p3.x<=max(p1.x, p2.x)&&p3.y>=min(p1.y, p2.y)&&p3.y<=max(p1.y, p2.y)) return true;
    else return false;
}


int main()
 {  
    //fast I/O
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
	int T;
	cin>>T;
	while(T--){
	    
	    Point p1, p2, p3, p4;
	    cin>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y>>p4.x>>p4.y;
	    
	    /*
	    2 lines intersect in 2 possible cases :-
	    
	    CASE 1 : (p1, p2, p3) & (p1, p2, p4) have different orientations
	             (p3, p4, p1) & (p3, p4, p2) have different orientations
	    
	    CASE 2 : (p1, p2, p3), (p1, p2, p4), (p3, p4, p1) & (p3, p4, p2) all have same orientation AND
	             the x-projections of (p1, p2) and (p3, p4) intersect
                 the y-projections of (p1, p2) and (p3, p4) intersect
	    
	    */
	    
	    int o1 = findOrientation(p1, p2, p3);
	    int o2 = findOrientation(p1, p2, p4);
	    int o3 = findOrientation(p3, p4, p1);
	    int o4 = findOrientation(p3, p4, p2);
	    
	    if(o1!=o2&&o3!=o4) cout<<"1";
	    else if(o1==0&&onSegment(p1, p2, p3)) cout<<"1";
	    else if(o2==0&&onSegment(p1, p2, p4)) cout<<"1";
	    else if(o3==0&&onSegment(p3, p4, p1)) cout<<"1";
	    else if(o4==0&&onSegment(p3, p4, p2)) cout<<"1";
	    else cout<<"0";
	    
	    cout<<"\n";
	}
	return 0;
}
