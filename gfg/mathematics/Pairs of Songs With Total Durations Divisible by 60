/*LEETCODE : 1010
In a list of songs, the i-th song has a duration of time[i] seconds. 

Return the number of pairs of songs for which their total duration in seconds is divisible by 60.  
Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.
*/

class Solution {
public:
    int numPairsDivisibleBy60(vector<int>& time) {
        
        int n = time.size();
        int pairs = 0;
        
        //naive : O(n^2) time & O(1) space
        
        //method 2 : hash map
        //O(n) time & O(1) space
        int h[60] = {0};
        for(int i=0;i<n;++i){
            h[time[i]%60]++;
        }
        
        for(int i=0;i<60;++i) if(h[i]>0) cout<<i<<":"<<h[i]<<", ";
        
        pairs += (h[0]*(h[0]-1))/2;     //i.e (n*n-1)/2
        pairs += (h[30]*(h[30]-1))/2;
        
        for(int i=1;i<=29;++i){
            pairs += (h[i]*h[60-i]);
        }
        
        return pairs;
    }
};
