#include <bits/stdc++.h>
using namespace std;
int main()
{   
    
    /*Same Bits ->0
    Different Bits ->1
    */
    
    
    //APPLICATIONS OF BITWISE XOR OPERATOR
     
     //XOR array applications : https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/Bit%20Magic/XOR%20in%20array
     
     //2)swap two numbers without using a temporary variable
     //note:xor method fails when a==b,so we must watch for this situation
     int a=5,b=10;
     if(a!=b)
     {a=a^b;
     b=a^b;
     a=a^b;}
     cout<<"a="<<a<<" b="<<b<<endl<<endl;
     
     
     //3)Add two numbers without using arithmetic operators.....RRRRRR
     // https://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/
     // Iterate till there is no carry  
    int x=30,y=40;
    while (y != 0)
    {// carry now contains common 
        //set bits of x and y
        int carry = x & y;  
        // Sum of bits of x and y where at 
        //least one of the bits is not set
        x = x ^ y; 
        // Carry is shifted by one so that adding
        // it to x gives the required sum
        y = carry << 1;}
    cout<<x<<endl<<endl;
     
     
     //4)Count number of bits to be flipped to convert A to B
     int p=7,q=10;
     int r=p^q;
     //count set bits
     int cnt= __builtin_popcount(r);
     cout<<cnt<<endl;
     
     //5)Given a number N, the task is to find the XOR of all numbers from 1 to N.
     /* Find the remainder of N by moduling it with 4.
        If rem = 0, then xor will be same as N.
        If rem = 1, then xor will be 1.
        If rem = 2, then xor will be N+1.
        If rem = 3 ,then xor will be 0.*/
        
        
      //6)Find Complement of a given number 
      int num = 5;
      //method 2 : using mask + xor
        //corner case
        if(num==0) return 1;
        int number_of_bits = 32-__builtin_clz(num);
        //(1<<number_of_bits)-1 is giving overflow !!!
        int mask = pow(2, number_of_bits)-1;
        return mask^num;
      
     
    
    return 0;
}

