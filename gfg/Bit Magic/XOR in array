/*
All the below problems can be solved by sorting O(nlogn) time & O(1) space
And by hashing in O(n) time & O(n) space
We use bitwise manipulation to find solutions of O(n) time & O(1) space
*/


#include <bits/stdc++.h>
using namespace std;

int main() {
	
	//1) UNIQUE 1 : all elements occur even times except for one odd occuring elements
	//LEETCODE 136
	int arr[] = {1, 2, 3, 1, 3, 4, 4};
	int n = sizeof(arr)/sizeof(arr[0]);
	int result = arr[0];
	for(int i=1;i<n;++i) result ^= arr[i];
	cout<<result<<"\n";
	
	
	//2) UNIQUE 2 : all elements occur even times except for 2 odd occuring elements
	//LEETCODE 260
	/*
	The first step is to do XOR of all elements present in array. XOR of all elements gives us XOR of x and y.
	In the second step, we pick a set bit of xor2 and divide array elements in two groups. 
	Both x and y will go to different groups. Now apply UNIQUE 1 on both sets,
	*/
	int arr2[] = {1, 2, 3, 1, 3, 4};
	int n2 = sizeof(arr2)/sizeof(arr2[0]);
	//xor of all numbers
	int x = arr2[0];
	for(int i=1;i<n2;++i) x ^= arr2[i];
	//find first set bit
	int bit = -1;
	for(int i=0;i<32;++i){
	    if(x&(1<<i)) {
	        bit = i;
	        break;
	    }
	}
	vector<int> v1, v2;
	if(bit!=-1){
	    for(int i=0;i<n2;++i){
	        if(arr2[i]&(1<<bit)) v1.push_back(arr2[i]);
	        else v2.push_back(arr2[i]);
	    }
	}
	int result1 = v1[0];
	for(int i=1;i<v1.size();++i) result1 ^= v1[i];
	int result2 = v2[0];
	for(int i=1;i<v2.size();++i) result2 ^= v2[i];
	cout<<result1<<", "<<result2<<"\n";
	
	
	//3) UNIQUE 3 :  every element occurs three times, except one element which occurs only once
	//LEETCODE 137
	//https://www.geeksforgeeks.org/find-the-element-that-appears-once/
	
	
	//4) UNIQUE 4 : You are given an array of n+2 elements. All elements of the array are in range 1 to n.
	//And all elements occur once except two numbers which occur twice. Find the two repeating numbers.
	/*
	Let the repeating numbers be X and Y, if we xor all the elements in the array and 
	all integers from 1 to n, then the result is X xor Y. 
	now apply UNIQUE 2.
	*/
	//Another Index based method discussed here : https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/Array/Find%20duplicates%20in%20range
	
	//5) You are given a list of n-1 integers and these integers are in the range of 1 to n
    //Find the Missing Number
    /*Similar to UNIQUE 4
    1. XOR all the array elements, let the result of XOR be X1.
    2. XOR all numbers from 1 to n, let XOR be X2.
    3. XOR of X1 and X2 gives the missing number.
    */
    // int arrr[]={1,6,3,5,2};
    // int result1=1,result2=arrr[0];
    // for(int i=2;i<=6;++i){result1^=i;}
    // for(int i=1;i<5;++i){result2^=arrr[i];}
    // int result3=result1^result2;
    // cout<<result3<<endl<<endl;
	
	
	
	return 0;
}
