//Find element in increasingly sorted and then rotated array in O(log n) time 
//Can be done by brute force in O(n) time
//Expected time complexity : O(log n) time
//First find local maxima in array and then divide the array in 2 sub array from 0 to local_maxima & local_maxima+1 to n-1
//Then search for element in 2 sub arrays separately using binary search
//https://ide.geeksforgeeks.org/wKFOi0Vln4

#include <bits/stdc++.h>
using namespace std;

int binary_search(int arr[], int low, int high, int x){
  if(low>high) return -1;                 
  int mid = low + ((high-low)/2);
  if(arr[mid] == x) return mid;
  else if(x<arr[mid]) return binary_search(arr,low,mid-1,x);
  else if(x>arr[mid]) return binary_search(arr,mid+1,high,x);
}

int find_local_maxima(int arr[], int n, int low, int high){
    int left_corner = arr[0];
    int right_corner = arr[n-1];
    
    if(high < low) return -1;   // arr is sorted but there are 0 rotations
    if(high == low) return low;
    
    int mid = low + ((high-low)/2);
    if(mid < high && arr[mid] > arr[mid+1]) return mid;
    else if( arr[mid] < left_corner ) return find_local_maxima(arr,n,low,mid-1);
    else if( arr[mid] > right_corner) return find_local_maxima(arr,n,mid+1,high);
}

int find_element_sorted_rotated_array(int arr[], int n, int ele)
{
    // find local maxima/pivot
    int local_maxima = find_local_maxima(arr, n, 0, n-1);
    
    if( local_maxima == -1) return binary_search(arr, 0, n-1, ele);   
    if( arr[local_maxima] == ele ) return local_maxima;
    
    int index1 = binary_search(arr, 0, local_maxima, ele);
    int index2 = binary_search(arr, local_maxima+1, n-1, ele);
    
    if(index1 != -1) return index1;
    else if(index2 != -1) return index2;
    else return -1;
    
}

int main()
{
    //int arr[] = { 1,2,3,5,6,7,8,9,10};
    //after 3 counterclockwise rotations
    int arr[] = {5, 6, 7, 8, 9, 10, 1, 2, 3};
    int size = sizeof(arr)/sizeof(arr[0]);
    
    //VARIATION 1)
    int result = find_element_sorted_rotated_array(arr,size,5);
    if(result != -1) cout<<" found element in array at index : "<<result<<endl;
    else cout<<"Element not found.";
    
    //VARIATION 2) Find maximum element in sorted and then rotated array
    int max_index = find_local_maxima(arr, size, 0, size-1);
    cout<<"Maximum element : "<<arr[max_index]<<endl;
    
    //VARIATION 3) Find minimum element in sorted and then rotated array
    int min_index = max_index + 1;
    cout<<"Minimum element : "<<arr[min_index]<<endl;
    
    return 0;
}

