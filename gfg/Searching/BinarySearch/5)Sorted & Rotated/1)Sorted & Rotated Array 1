/*LEETCODE 33. Search in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).
*/

class Solution {
public:
    
    int findLocalMaxima(vector<int> nums, int l, int r){
        //base case
        if(l==r) return l;
        
        int mid = l+(r-l)/2;
        
        //handling corner cases
        if(mid==l&&nums[mid]>=nums[mid+1]) return mid;
        else if(mid==r&&nums[mid-1]<=nums[mid]) return mid;
        
        //using modified binary search to find local maxima
        if(mid-1>=0&&mid+1<nums.size()&&nums[mid-1]<=nums[mid]&&nums[mid]>=nums[mid+1]) return mid;
        else if(nums[0]>nums[mid]) return findLocalMaxima(nums, l, mid);
        else if(nums[mid]>nums[r]) return findLocalMaxima(nums, mid+1, r);
        
        //when array is sorted & 0 rotated
        return -1;
        
    }
    
    
    
    int search(vector<int>& nums, int target) {
        
        int n = nums.size();
        
        //method 1 : linear scane
        //O(n) time & O(1) space
        
        //method 2 : 2 pass of binary search
        //NOTE :- this method can't be extended for duplicates i.e Search in Rotated Sorted Array II
        //O(logn) time & O(1) space
        /*
        step 1 : find pivot element , 
        as element before pivot including itself & elements after pivot bot set of numbers will be guaranteed sorted
        step 2 : do 2 separate binary search one for nums[0...mid] & other for nums[mid+1....n-1] 
        */
        
        //step 1 : find local maxima using modified binary search
//         int m = findLocalMaxima(nums, 0 ,nums.size()-1);  //not linearly
//         cout<<"local maxima : "<<m<<", "<<nums.size()-1<<endl;
//         //if m == -1 or nums.size()-1, it implies the given vector is incresingly sorted
//         if(m==-1||m==(nums.size()-1)) {
//             int index = lower_bound(nums.begin(), nums.end(), target)-nums.begin();
//             return (index>=0&&index<nums.size()&&nums[index]==target)?index:-1;
//         }
        
        
//         //step 2 : apply binary search on 2 sorted subarrays
//         int index1 = lower_bound(nums.begin(), nums.begin()+m+1, target) - nums.begin();
//         int index2 = lower_bound(nums.begin()+m+1, nums.end(), target) - (nums.begin()+m+1);
        
//         if(index1>=0&&nums[index1]==target) return index1;
//         else if(m+1+index2<nums.size()&&nums[m+1+index2]==target) return m+1+index2;
//         else return -1;
        
        
        
        
        
        //method 3 : 1 pass of binary search
        //O(logn) time & O(1) space
        /*
        find middle element check it against target, if fount return middle index
        else 
            if nums[low...mid] is sorted : -
                    if target is in between range nums[low] to nums[mid], recurr for nums[low...mid]
                    else recurr for nums[mid+1 ... high]
            else            note :- (nums[mid+1 ... high] is guarnteed sorted)
                    if target is in between range nums[mid+1] to nums[high], recurr for nums[mid+1 ... high]
                    else recurr for nums[low ... mid]
        */
        int low = 0, high = n-1;
        while(low<=high){
            
            int mid = low + (high-low)/2;
            if(nums[mid]==target) return mid;
            
            if(nums[low]<=nums[mid]){
                if(target>=nums[low]&&target<=nums[mid]) high = mid-1;
                else low = mid+1;
            }else{
                if(target>=nums[mid+1]&&target<=nums[high]) low = mid+1;
                else high = mid-1;
            }
            
        }
        return -1;
        
    }
};
