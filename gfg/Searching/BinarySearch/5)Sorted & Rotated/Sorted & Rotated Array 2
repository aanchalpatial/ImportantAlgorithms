/*LEETCODE :- 81. Search in Rotated Sorted Array II
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.
*/

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        
        int n = nums.size();
        
        //method : 
        //O(logn) time & O(1) space
        /*
         The idea is the same method 3 of Search in Rotated Sorted Array I. The only difference is that
         due to the existence of duplicates, arr[low] == arr[mid] could be possible but still the first half
         could be out of order (i.e. not in the ascending order, e.g. {3, 1, 2, 3, 3, 3, 3}) and we have to
         deal this case separately.
         
         In that case, it is guaranteed that arr[high] also equal to arr[mid], 
         so the condition arr[mid] == arr[low] == arr[high] can be checked before the original logic,
         and if so then move left and right both towards the middle by 1 and repeat
        */
        int low = 0, high = n-1;
        
        while(low<=high){
            
            int mid = low + (high-low)/2;
            if(nums[mid]==target) return true;
            
            //separately handling condition arr[mid] == arr[low] == arr[high]
            while(low<=high&&nums[low]==nums[mid]&&nums[mid]==nums[high]){
                ++low;
                --high;
            }
            if(low>high) break;
            
            if(nums[low]<=nums[mid]){
                if(target>=nums[low]&&target<=nums[mid]) high = mid-1;
                else low = mid+1;
            }else {
                if(target>=nums[mid]&&target<=nums[high]) low = mid+1;
                else high = mid-1;
            }
            
        }
        return false;
        
    }
};
