/*LEETCODE 153. Find Minimum in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.
*/

//https://www.geeksforgeeks.org/find-minimum-element-in-a-sorted-and-rotated-array/

class Solution {
public:
    int findMin(vector<int>& nums) {
        
        int n = nums.size();
        
        //corner cases
        if(is_sorted(nums.begin(), nums.end())) return nums[0];
        else if(is_sorted(nums.begin(), nums.end(), greater<int>())) return nums[n-1];
        
        //method 1 : linear scan
        
        //method 2 : find pivot and it's next element is minimum element
        //NOTE :- can't be extended for duplicates i.e Find Minimum in Rotated Sorted Array II
//         int pivot = -1;
//         int l = 0, r = n-1;
//         while(l<=r){
//             int mid = l + (r-l)/2;
            
//             cout<<l<<", "<<mid<<", "<<r<<"\n";
            
//             if( (mid==0&&nums[mid]>nums[mid+1])||(mid==(n-1)&&nums[mid]>nums[mid-1])||(mid!=0&&mid!=(n-1)&&nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1]) ){
//                 pivot = mid;
//                 break;
//             }
            
//             if(nums[mid]>=nums[l]) l = mid+1;
//             else r = mid-1;
            
//         }
        
//         if(pivot!=-1) return nums[pivot+1];
//         else return -1;
        
        
        //method 3 : minimum element is the one whose previous element is greater than itself
        int l = 0, r = n-1;
        while(l<=r){
            
            int mid = l + (r-l)/2;
            cout<<l<<", "<<mid<<", "<<r<<"\n";
            
            if(nums[mid-1]>nums[mid]) return nums[mid];
            
            if(nums[mid]<nums[r]){
                // right part is sorted, min ele is in left part
                r = mid;
            }else l = mid+1;        // left part is sorted, min ele in in right part
            
        }
        return -1;
        
        
        
    }
};
