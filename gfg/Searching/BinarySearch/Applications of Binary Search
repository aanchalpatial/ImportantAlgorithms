//All the given below questions can be found by simple O(n) time in any array.
//But instead if we are given an sorted array we can improve the time complexity of all these function to O(log n)
//by using modified binary search

#include <bits/stdc++.h>
using namespace std;

//Simple Binary Search
int binary_search(int arr[], int low, int high, int x){
  if(low>high) return -1;                 
  int mid = low + ((high-low)/2);
  if(arr[mid] == x) return mid;
  else if(x<arr[mid]) return binary_search(arr,low,mid-1,x);
  else if(x>arr[mid]) return binary_search(arr,mid+1,high,x);
}

//Left most index of an element in an array
int binary_search_left(int arr[], int low, int high, int x){
    
    if(low>high) return -1;
    int mid = low + ((high-low)/2);
    if( (arr[mid] == x) && (mid == 0 || arr[mid-1] != arr[mid]) ) return mid;
    else if(x<=arr[mid]) return binary_search_left(arr, low, mid-1, x);
    else if(x>arr[mid]) return binary_search_left(arr, mid+1, high, x);
}

//Right most index of an element in an array
int binary_search_right(int arr[],int n, int low, int high, int x){
    
    if(low>high) return -1;
    int mid = low + ((high-low)/2);
    if( (arr[mid] == x) && (mid == (n-1) || arr[mid+1] != arr[mid]) ) return mid;
    else if(x<arr[mid]) return binary_search_right(arr, n, low, mid-1, x);
    else if(x>=arr[mid])return binary_search_right(arr, n, mid+1, high, x);
}

//Count of occurrences of x in sorted element
void count_occurences(int arr[], int low, int high, int x){
    
    int size = high+1;
    
    int leftMostIndex = binary_search_left(arr, low, high, x);
    int rightMostIndex = binary_search_right(arr, size, low, high, x);
    int cnt = rightMostIndex - leftMostIndex + 1;
    
    cout<<"Right Most Index : "<<rightMostIndex<<endl;
    cout<<"Left Most Index : "<<leftMostIndex<<endl;
    cout<<"Count of "<<x<<" is : "<<cnt<<endl;
}

//Count of 1s in binary sorted array
void count_one(int arr[],int low, int high){
    int size = high+1;
    int leftMostIndex = binary_search_left(arr, low, high, 1);
    int cnt = size-leftMostIndex;
    
    cout<<"Count of 1's : "<<cnt<<endl;
    
}

int main()
{
    int arr[] = {1, 5, 6, 7, 8, 8, 8, 15};
    int n = sizeof(arr)/sizeof(arr[0]);
    int bb[] = {0, 0, 1, 1, 1};
    count_one(bb,0,4);
    
    return 0;
}
