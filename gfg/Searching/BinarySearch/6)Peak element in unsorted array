//Find Peak element in an UNSORTED ARRAY
//Peak element : Aa element which is not smaller than its neighbours
// left_neighbour <= element >= right_element
//if arr[0]>arr[1], then also it a peak element beacuse it is greater than all of its adjacent neighbours
//Similary if arr[n]>arr[n-1[ then alsi it is a peak element (0th & n-1 th index elements have only 1 neighbour)
//There can be more than one peak elements in array
//Expected time complexity : O(log n) , Need to use binary search
//This is the first question in which array is unsorted and we are using binary search

//APPROACH:
/*
Find middle element, Check if it is peak, if so return it
If middle element is smaller than left neighbour => peak lies in left subarray
If middle element is smaller than right neighbour => peak lies in right subarray
If middle element is smaller than both neighbous , you can choose any subarray
*/

// A C++ program to find a peak element element using divide and conquer 
#include <stdio.h> 

// A binary search based function that returns index of a peak element 
int findPeakUtil(int arr[], int low, int high, int n) 
{ 
	// Find index of middle element 
	int mid = low + (high - low)/2; /* (low + high)/2 */

	// Compare middle element with its neighbours (if neighbours exist) 
	if ((mid == 0 || arr[mid-1] <= arr[mid]) && 
			(mid == n-1 || arr[mid+1] <= arr[mid])) 
		return mid; 

	// If middle element is not peak and its left neighbour is greater 
	// than it, then left half must have a peak element 
	else if (mid > 0 && arr[mid-1] > arr[mid]) 
		return findPeakUtil(arr, low, (mid -1), n); 

	// If middle element is not peak and its right neighbour is greater 
	// than it, then right half must have a peak element 
	else return findPeakUtil(arr, (mid + 1), high, n); 
} 

// A wrapper over recursive function findPeakUtil() 
int findPeak(int arr[], int n) 
{ 
	return findPeakUtil(arr, 0, n-1, n); 
} 

/* Driver program to check above functions */
int main() 
{ 
	int arr[] = {1, 3, 20, 4, 1, 0}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	printf("Index of a peak point is %d", findPeak(arr, n)); 
	return 0; 
} 
