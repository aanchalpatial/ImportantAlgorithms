/*Naive Method is to find all the n*(n-1)/2 possible absolute differences in O(n^2) and store them in an array.
Then sort this array and print the k-th minimum value from this array. This will 
take time O(n^2 + n^2 * log(n^2)) = O(n^2 + 2*n^2*log(n)).*/
//An Efficient Solution is based on Binary Search.
//https://www.geeksforgeeks.org/k-th-smallest-absolute-difference-two-elements-array/
//https://practice.geeksforgeeks.org/problems/smallest-absolute-difference/0

/*
1) Sort the given array a[].
2) We can easily find the least possible absolute
   difference in O(n) after sorting. The largest
   possible difference will be a[n-1] - a[0] after
   sorting the array. Let low = minimum_difference
   and high = maximum_difference.
3) while low < high:
4)     mid = (low + high)/2
5)     if ((number of pairs with absolute difference
                                <= mid) < k):
6)        low = mid + 1
7)     else:
8)        high = mid
9) return low
We need a function that will tell us number of pairs with difference <= mid efficiently.
Since our array is sorted, this part can be done like this:

1) result = 0
2) for i = 0 to n-1:
3)     result = result + (upper_bound(a+i, a+n, a[i] + mid) - (a+i+1))
4) return result
*/

int countPairs(int a[], int n, int mid) {       // O(nlogn)
    int count = 0;
    for(int i=0;i<n;++i) {
        int temp = upper_bound(a+i, a+n, a[i]+mid) - (a+i+1);
        count += temp;
    }
    return count;
}
int kthDiff(int a[], int n, int k) {
    
    // naive is O(n^2)
    // vector<int> absDiff;
    // for(int i=0;i<n;++i) {
    //     for(int j=i+1;j<n;++j) {
    //         absDiff.push_back(abs(a[i]-a[j]));
    //     }
    // }
    // sort(absDiff.begin(), absDiff.end());
    
    // return absDiff[k-1];
    
    
    // method 2: binary search on ranges
    // we can apply binary search on range [min absolute diff, max absolute diff]
    // for every mid we can check if the number of absolute differences smaller than or equal to mid
    // time: O(n*log(n)*log(maxAbsDiff-minAbsDiff))
    sort(a, a+n);
    int minAbsDiff, maxAbsDiff = a[n-1] - a[0];
    for(int i=0;i<n-1;++i) {
        minAbsDiff = min(minAbsDiff, a[i+1]-a[i]);
    }
    
    int l = minAbsDiff, h = maxAbsDiff;
    while(l<h) {
        int mid = l + (h - l)/2;
        // cout<<l<<", "<<mid<<", "<<h<<endl;
        int count = countPairs(a, n, mid);
        if(count<k) l=mid+1;
        else h = mid;
    }
    return l;
}