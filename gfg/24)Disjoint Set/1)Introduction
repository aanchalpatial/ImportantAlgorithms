A disjoint-set data structure (also called a union–find data structure or merge–find set) is a data structure that tracks
a set of elements partitioned into a number of DISJOINT (non-overlapping) subsets  and each set is represented by 
its representative which is one of its members.
It provides 3 operations :-
1) to add new sets, 
2) UNION - to merge existing sets, and 
3) FIND - to determine whether elements are in the same set i.e return the representative of subset

Assume that you have a set of N elements that are into further subsets and you have to track the connectivity of each element
in a specific subset or connectivity of subsets with each other. You can use the union-find algorithm (disjoint set union) to
achieve this.

PROBLEM :
Let’s consider the following problem: In a room are N persons, and we will define two persons are friends if they are 
directly or indirectly friends. If A is a friend with B, and B is a friend with C, then A is a friend of C too. A group of friends
is a group of persons where any two persons in the group are friends. Given the list of persons that are directly friends find 
the number of groups of friends and the number of persons in each group. 
For example N = 5 and the list of friends is: 1-2, 5-4, and 5-1. Here is the figure of the graph that represents the groups of friends.
1 and 2 are friends, then 5 and 4 are friends, and then 5 and 1 are friends, but 1 is friend with 2; therefore 5 and 2 are friends, etc.
SOLUTION : 
In the end there are 2 groups of friends: one group is {1, 2, 4, 5}, the other is {3}.
Above problem can be solved using BFS, but Disjoint Set Data Structure will be more efficient for these type of problem.
https://www.topcoder.com/community/competitive-programming/tutorials/disjoint-set-data-structures/

DATA STRUCTURES USED : 
1) Array : An array of integers, called parent[]. If we are dealing with n items, i’th element of the array represents the i’th item.
More precisely, the i’th element of the array is the parent of the i’th item. These relationships create one, or more, virtual trees.
2) Tree (only in representation) : It is a disjoint set. If two elements are in the same tree, then they are in the same disjoint set. 
The root node (or the topmost node) of each tree is called the representative of the set. There is always 
a single unique representative of each set. A simple rule to identify representative is, if i is the representative of a set,
then parent[i] = i. If i is not the representative of his set, then it can be found by traveling up the tree until we find 
the representative.

TIME COMPLEXITY :
Above problem can be solved using graphs( bfs to be more specific), find() & union() both are O(n)
In simple Union implementation, find() & union() both are O(n)
Union By Rank Implementation, find() & union() both are O(logn)
Union By Rank & Path Compression Implementation, find() & union() both are AMORTIZED O(1)

APPLICATIONS : 
1) Disjoint-sets play a key role in Kruskal's algorithm for finding the minimum spanning tree of a graph.
2) Cycle Detection
3) Job Sequencing Problem



