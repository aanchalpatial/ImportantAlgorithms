#include <bits/stdc++.h>
using namespace std;

class DisjointSet{
    int *arr, *parent;
    int n;
    public:
    DisjointSet(int size){
        n=size;
        arr = new int[n];
        parent = new int[n];
        
        for(int i=0;i<n;++i) {
            parent[i] = i;
        } 
    }
    
    int find(int x){    //returns representative of x
        if(parent[x]==x) return x;
        else return find(parent[x]);
    }
    void unionDS(int x, int y){ //merges to subsets
        int r_x = find(x);
        int r_y = find(y);
        //right now, left variable is chosen to be 
        //representative of right variable
        if(r_x!=r_y) parent[r_y] = r_x; 
    }
    
};


int main() {
    
    //Simple Disjoint Set Implementation
    DisjointSet ds = DisjointSet(5);
    //store data in ds.arr[] in any way you like
    
    ds.unionDS(2, 3);
    ds.unionDS(0, 2);
    ds.unionDS(0, 4);
    cout<<ds.find(0)<<", "<<ds.find(1)<<", "<<ds.find(2)<<", "<<ds.find(3)<<", "<<ds.find(4)<<endl;
    
    
	return 0;
}
