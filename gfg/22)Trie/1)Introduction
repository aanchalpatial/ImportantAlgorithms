TRIE Data Structure is best suited for following operations on WORDS IN A DICTIONARY :-
1) Search   : 0(word_length)
2) Insert   : 0(word_length)
3) Delete   : 0(word_length)
4) Prefix Search  :0(prefix_length+output_length)
5) Lexicographic ordering of words  :0(output_length)



#include <bits/stdc++.h>
using namespace std;

//Empty trie contains a TrieNode whose all children are NULL and isEnd = FALSE
//This is contrary to a tree which is empty if it is NULL i.e no node

struct TrieNode {
    TrieNode *child[26];    //this can be extended to store all 256 ascii characters
    bool isEnd;             //represents whether current character is last character of a valid word
    TrieNode(){
        isEnd = false;
        for(int i=0;i<26;++i){
            child[i] = NULL;
        }
    }
};

void insertTrie(TrieNode *root, string str){    //0(word_length)
    TrieNode *curr = root;
    for(int i=0;i<str.length();++i){
        int index = str[i]-'a';
        if(curr->child[index]==NULL){
            TrieNode *newNode = new TrieNode();
            curr->child[index] = newNode;
        }
        curr = curr->child[index];
    }
    curr->isEnd = true;
}


bool searchTrie(TrieNode *root, string str){    //0(word_length)
    TrieNode *curr = root;
    for(int i=0;i<str.size();++i){
        int index = str[i]-'a';
        if(curr->child[index]==NULL) return false;
        curr = curr->child[index];
    }
    if(curr->isEnd) return true;
    else return false;
}


//similar approach can be solved using recursion stack
void deleteTrie(TrieNode *root, string str){
    stack<TrieNode *> st;
    TrieNode *curr = root;
    for(int i=0;i<str.size();++i){
        st.push(curr);
        int index = str[i]-'a';
        curr = curr->child[index];
    }
    st.push(curr);
    if(curr->isEnd) curr->isEnd = false;
    else return;
    int j = str.size()-1;
    while(st.size()>1){
        TrieNode *nd = st.top();
        st.pop();
        for(int i=0;i<26;++i){
            if(nd->child[i]!=NULL) return;
        }
        if(nd->isEnd) return;
        delete(nd);
        st.top()->child[str[j]-'a'] = NULL;
        cout<<"deleted "<<str[j]<<" node"<<endl;
        --j;
    }
}


int main() {
    
    TrieNode *root = new TrieNode();
	insertTrie(root, "bad");
	insertTrie(root, "bat");
	insertTrie(root, "geek");
	insertTrie(root, "geeks");
	insertTrie(root, "cat");
	insertTrie(root, "cut");
	insertTrie(root, "zoo");
	
	deleteTrie(root, "geek");
	cout<<searchTrie(root, "geek");
	
	return 0;
	
}



