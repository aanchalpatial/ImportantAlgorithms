//Problem of calculating the K Largest Elements in an unsorted array

//Naive is increase Sort first and print last k elements: O(nlogn) time

/* 6 WAYS TO FIND Kth SMALLEST ELEMENT:-
1)Sorting                   : O(nlogn)
2)QuickSelect               : O(n^2) in worst case & O(n) in average case
3)Inorder traversal of BST  : O(logn+k) 
4)Augmented BST             : O(logn)
5)Heap Data Structure       : n+klogn(Min Heap) & k+nlogk(Max Heap)
6)Median Order Statistics   : O(n)
*IN A STREAM OF INPUT : https://www.geeksforgeeks.org/kth-largest-element-in-a-stream/
*/

//Better is Using Max Heap: O( n+klogn )
void kLargestElementsUsingMaxHeap(int arr[], int n, int k){     
    priority_queue<int> pq(arr, arr+n);     //O(n)
    cout<<"Largest K Elements:  ";
    while(k>0){                 //O(klogn)
        cout<<pq.top()<<", ";
        pq.pop();
        --k;
    }
    cout<<endl;
}

//Best Approach is to use Min Heap: O( k+(n-k)logk )
void kLargestElementsUsingMinHeap(int arr[], int n, int k){
    priority_queue<int, vector<int>, greater<int>> pq(arr, arr+k);    //O(k)
    for(int i=k;i<n;++i){         //(n-k)*logk
        if(arr[i]>pq.top()){
            pq.pop();
            pq.push(arr[i]);
        }
    }
    cout<<"Largest K Elements:  ";
    while(!pq.empty()){         //k*logk
        cout<<pq.top()<<", ";
        pq.pop();
    }
    cout<<endl;
    
}



#include <bits/stdc++.h>
using namespace std;

int main() {
    
    int arr[] = {1, 12, 111, 200, 5};
    int n = sizeof(arr)/sizeof(arr[0]);
    int k = 2;
    
    //kLargestElementsUsingMaxHeap(arr, n, k);
    kLargestElementsUsingMinHeap(arr, n, k);
    
    return 0;
}
