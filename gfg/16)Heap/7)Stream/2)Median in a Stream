//Calculation of a Median of a Stream.
//Note:- Any algorithm that can guarantee output of i-elements after processing i-th element, is said to be online algorithm
Median can be defined as the element in the data set which separates the higher half of the data sample from the lower half

//1) NAIVE approach is to use Insertion Sort & during each step of iteration calculate median: O(n^2)

//2) BETTER Approach: Use Augmented BST, O(nh)
//https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/15)%20Binary%20Search%20Tree/5)Kth%20Smallest%20Element
//If size is odd find (size/2)th smallest element & If size is even find average of (size/2)th & ((size/2)+1)th smallest elements

//3) BEST Approach: Use Max & Min Heap, O(nlogn)
/*Approach: 
We can use a max heap on left side to represent elements that are less than effective median, and a min heap on right side
to represent elements that are greater than effective median. After processing an incoming element, the number of elements in 
heaps differ utmost by 1 element. When both heaps contain same number of elements, we pick average of heaps root data as effective median.
When the heaps are not balanced, we select effective median from the root of heap containing more elements.
*/
//Assumption: If there are odd number of elements the extra element has to be in Max Heap( or left container)
#include <bits/stdc++.h>
using namespace std;

void medianOfStream(int arr[], int n){                          //O(nlogn)
    float result[n];            //stores median of elements from arr[0] to arr[i] at index i
    priority_queue<int> maxH;                                   //Max Heap
    priority_queue<int, vector<int>, greater<int>> minH;        //Min Heap
    
    maxH.push(arr[0]);
    result[0] = maxH.top();
    cout<<result[0]<<", ";
    
    for(int i=1;i<n;++i){                                           //O(n)    
        
        //Insert in correct heap
        if(arr[i]>maxH.top()) minH.push(arr[i]);                //O(logn)
        else maxH.push(arr[i]);
            
        //Rearrange heaps
        if(minH.size()>maxH.size()) {                           //O(logn)
            maxH.push(minH.top());
            minH.pop();
        }else if(maxH.size()-minH.size()>1) {
            minH.push(maxH.top());
            maxH.pop();
        }
        
        //Print median
        if((i+1)%2==1) {                    //if size is odd
            result[i] = (float)maxH.top();
        }else {                             //if size is even
            result[i] = ((float)maxH.top()+(float)minH.top())/2;
        }
        
      cout<<result[i]<<", ";
    }
    
    //for(int i=0;i<n;++i) cout<<result[i]<<", ";
    cout<<endl;
}

int main() {
    
    int arr[] = {25, 7, 10, 15, 20};
    int n = sizeof(arr)/sizeof(arr[0]);
    
    medianOfStream(arr, n);
    
	return 0;
}

