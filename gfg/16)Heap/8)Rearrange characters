/*Given a string S with repeated characters (only lowercase). The task is to rearrange characters in a string such that
no two adjacent characters are same.
Note : It may be assumed that the string has only lowercase English alphabets.
*/

/*Note: There are 2 questions being asked here: 
1) Is it possible to rearrange characters in a string such that no two adjacent characters are same?
2) And if it is infact possible, rearrange it.

Answering 1st question is simple: Find the character with maximum frequency & compare maximum frequency of character with the
difference of string length and maximum frequency number. If the maximum frequency is less than the difference then it can be
arranged otherwise not.
if (max_freq <= (str.length() - max_freq + 1)) return true; 
else return false; 

Now, to actually rearrange:
1)Naive Approach is to traverse string and look for same consecutive characters, say found at 'i' & 'i+1', now look for an index 'k'
in string such that neither of arr[k-1], arr[k] & arr[k+1] is not equal to arr[i].Swap arr[i+1] with arr[k]
Time complexity will O(n^2)

2)Efficient Approach:
The idea is to put the highest frequency character first (a greedy approach). We use a priority queue (Or Binary Max Heap) and
put all characters and ordered by their frequencies (highest frequency character at root). We one by one take the highest frequency
character from the heap and add it to result. After we add, we decrease the frequency of the character and we temporarily move
this character out of priority queue so that it is not picked next time.
We have to follow the step to solve this problem, they are:
1. Build a Priority_queue or max_heap, pq that stores characters and their frequencies.
…… Priority_queue or max_heap is built on the bases of the frequency of character.
2. Create a temporary Key that will be used as the previously visited element (the previous element in the resultant string. Initialize it { char = ‘#’ , freq = ‘-1’ }
3. While pq is not empty.
….. Pop an element and add it to the result.
….. Decrease frequency of the popped element by ‘1’
….. Push the previous element back into the priority_queue if it’s frequency > ‘0’
….. Make the current element as the previous element for the next iteration.
4. If the length of the resultant string and original string is not equal, print “not possible”. Else print result.
*/
void rearrangeString(string str){
	// Your code here
	unordered_map<char, int> m;
	for(int i=0;i<str.size();++i) m[str[i]]++;
	priority_queue<pair<int, char>> pq;
	for(auto i: m){
	    pq.push(make_pair(i.second, i.first));
	}
	string result = "";
	pair<int, char> prev = make_pair(-1,'$');
	while(!pq.empty()){
	    pair<int, char> t = pq.top();
	    pq.pop();
	    result += t.second;
	    --t.first;
	    if(prev.first>0) pq.push(prev);
	    prev = t;
	}
	if(result.size()==str.size()) cout<<result<<endl;
	else cout<<"Not Possible"<<endl;
}

// METHOD 2: Linear time approach
// Time complexity: O(N) & Auxiliary Space: O(N+26), as there are 26 lowercase english characters
/*
Rearrange characters in a String such that no two adjacent characters are same using Frequency:
To solve the problem using this approach follow the below idea:

Fill all the even positions of the result string first, with the highest frequency character. 
If there are still some even positions remaining, fill them first. Once even positions are done, then fill the odd positions. 
This way, it can be ensured that no two adjacent characters are the same. 
*/