//Priority Queue is always implemented using Heap Data Structure

//MAX Heap(**default**) in C++ STL 
priority_queue<int> pq;
//MIN Heap in C++ STL 
priority_queue<int, vector<int>, greater<int>> pq;  
//https://www.geeksforgeeks.org/implement-min-heap-using-stl/
//Functions push() for insert is O(logn), pop() for extract maximum/minimum is O(logn), top() for get maximum/minimum
//Note:- C++ priority queue doesn't support decrease key function

//Create a priority queue from an array DIRECTLY
int arr[] = {10, 5, 15};
int n = sizeof(arr)/sizeof(arr[0]);
priority_queue<int> pq(arr, arr+n);       // O(n) time operation, ****RR****
//Create a priority queue from an array DIRECTLY
vector<int> v = {10, 5, 15};
priority_queue<int> pq(v.begin(), v.end());       // O(n) time operation, ****RR****

/*APPLICATIONS:
1) Djikstra
2) Prims
3) Huffman 
4) Heap Sort
5) Any other place where heap is to be used
*/


//Custom Comparator for priority_queue is different from normal
//custom comparator "myComp" for sort() is like this:
bool myComp(data_type x, data_type y) {
  return x>y;
}
//Where as custom comparator for priority_queue is like this :
struct myComp{
  bool operator()(data_type x, data_type y){
    return x>y; //for min heap
  }
}
