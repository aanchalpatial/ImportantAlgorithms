
/*PROBLEM :- 
https://practice.geeksforgeeks.org/problems/special-keyboard/0
Imagine you have a special keyboard with the following keys: 
Key 1:  Prints 'A' on screen
Key 2: (Ctrl-A): Select screen
Key 3: (Ctrl-C): Copy selection to buffer
Key 4: (Ctrl-V): Print buffer on screen appending it
                 after what has already been printed. 

If you can only press the keyboard for N times (with the above four
keys), write a program to produce maximum numbers of A's. That is to
say, the input parameter is N (No. of keys that you can press), the 
output is M (No. of As that you can produce).
*/

/*APPROACH :-
https://www.geeksforgeeks.org/how-to-print-maximum-number-of-a-using-given-four-keys/
Below are few important points to note.

a) For N < 7, the output is N itself.

b) Ctrl V can be used multiple times to print current buffer (See last two examples above). The idea is to compute the optimal string length for N keystrokes
by using a simple insight. The sequence of N keystrokes which produces an optimal string length will end with a suffix of Ctrl-A, a Ctrl-C, followed by only Ctrl-V’s .
(For N > 6)

The task is to find out the break=point after which we get the above suffix of keystrokes. Definition of a breakpoint is that instance after which we need to only 
press Ctrl-A, Ctrl-C once and the only Ctrl-V’s afterwards to generate the optimal length. If we loop from N-3 to 1 and choose each of these values for the break-point,
and compute that optimal string they would produce. Once the loop ends, we will have the maximum of the optimal lengths for various breakpoints, 
thereby giving us the optimal length for N keystrokes.
*/

/* A Dynamic Programming based C program to find maximum number of A's 
that can be printed using four keys */
#include <iostream> 
using namespace std; 


// this function returns the optimal length string for N keystrokes 
int findoptimal(int N) 
{ 
	// The optimal string length is N when N is smaller than 7 
	if (N <= 6) 
		return N; 

	// An array to store result of subproblems 
	int screen[N]; 

	int b; // To pick a breakpoint 

	// Initializing the optimal lengths array for uptil 6 input 
	// strokes. 
	int n; 
	for (n = 1; n <= 6; n++) 
		screen[n - 1] = n; 

	// Solve all subproblems in bottom manner 
	for (n = 7; n <= N; n++) { 
		// Initialize length of optimal string for n keystrokes 
		screen[n - 1] = 0; 

		// For any keystroke n, we need to loop from n-3 keystrokes 
		// back to 1 keystroke to find a breakpoint 'b' after which we 
		// will have ctrl-a, ctrl-c and then only ctrl-v all the way. 
		for (b = n - 3; b >= 1; b--) { 
			// if the breakpoint is at b'th keystroke then 
			// the optimal string would have length 
			// (n-b-1)*screen[b-1]; 
			int curr = (n - b - 1) * screen[b - 1]; 
			if (curr > screen[n - 1]) 
				screen[n - 1] = curr; 
		} 
	} 

	return screen[N - 1]; 
} 

// Driver program 
int main() 
{ 
	int N; 

	// for the rest of the array we will rely on the previous 
	// entries to compute new ones 
	for (N = 1; N <= 20; N++) 
		cout << "Maximum Number of A's with "<<N<<" keystrokes is "
		<< findoptimal(N) << endl; 
} 

//This is contributed by shubhamsingh10 
