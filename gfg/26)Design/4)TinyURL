/*LEETCODE 535 : Encode and Decode TinyURL
TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and 
it returns a short URL such as http://tinyurl.com/4e9iAk.

Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work.
You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.
*/
//approach :- https://leetcode.com/problems/encode-and-decode-tinyurl/discuss/100268/Two-solutions-and-thoughts


class Solution {
public:
    
    string home = "www.aanchalpatial.com/";
    string charSet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";      //62 characters in total
    unordered_map<string, string> short_long, long_short;

    // Encodes a URL to a shortened URL.
    string encode(string longUrl) {  
        
        if(long_short.find(longUrl)!=long_short.end()) return long_short[longUrl];
        
        string shortUrl = home;
        for(int i=0;i<6;++i){               //62^6 is 3500 billion, which is more than enough for this question
            int index = rand()%charSet.size();
            shortUrl += charSet[index];
        }
        cout<<"encoded : "<<shortUrl;
        
        long_short.insert({longUrl, shortUrl});
        short_long.insert({shortUrl, longUrl});
        
        return shortUrl;
        
    }

    // Decodes a shortened URL to its original URL.
    string decode(string shortUrl) {
        if(short_long.find(shortUrl)==short_long.end()) return "";
        return short_long[shortUrl];
    }
};

// Your Solution object will be instantiated and called as such:
// Solution solution;
// solution.decode(solution.encode(url));
