//Given Problem is simple. But Follow up questions is very things gets interesting. This problem is in design section due to these follow up question

/*LEETCODE 609 Find Duplicate File in System
Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the
groups of duplicate files in the file system in terms of their paths.

A group of duplicate files consists of at least two files that have exactly the same content.

A single directory info string in the input list has the following format:

"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)"

It means there are n files (f1.txt, f2.txt ... fn.txt with content f1_content, f2_content ... fn_content, respectively) in directory root/d1/d2/.../dm. Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.

The output is a list of group of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:

"directory_path/file_name.txt"

Example 1:

Input:
["root/a 1.txt(abcd) 2.txt(efgh)", "root/c 3.txt(abcd)", "root/c/d 4.txt(efgh)", "root 4.txt(efgh)"]
Output:  
[["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]

*/

class Solution {
public:
    vector<vector<string>> findDuplicate(vector<string>& paths) {
        
        unordered_map<string, vector<string>> mp;
        
        for(string p: paths){
            
            stringstream ss(p);
            string word;
            
            string value = "";
            
            while(getline(ss, word, ' ')){
                
                if(value==""){
                    value = word;
                }else{
                    int index = word.size()-1;
                    string key = "";
                    while(word[index]!='('){
                        key += word[index];
                        --index;
                    }
                    key += '(';
                    reverse(key.begin(), key.end());


                    string finalValue = value + "/" + word.substr(0, index);
                    
                    //cout<<key<<", "<<finalValue<<"\n";
                    mp[key].push_back(finalValue);
                    
                }
                
            }
        
        }
        
        vector<vector<string>> result;
        
        for(auto p: mp){
            if(p.second.size()>1) result.push_back(p.second);
        }
        
        return result;
        
        //follow up : https://leetcode.com/problems/find-duplicate-file-in-system/discuss/104120/Follow-up-questions-discussion
        //we could use meta data instead of the entire file in hashing
        /*
        Question 2:
In real-world file system, we usually store large file in multiple "chunks" (in GFS, one chunk is 64 MB),so we have meta data recording the file size,file name and index of different chunks along with each chunk's checkSum (the xor for the content).
So when we upload a file, we record the meta data as mentioned above.
When we need to check for duplicates, we could simply check the meta data:
1.Check if files are of the same size;
2.if step 1 passes, compare the first chunk's checkSum
3.if step 2 passes, check the second checkSum
...
and so on.
There might be false positive duplicates, because two different files might share the same checkSum.

Question 3:
In the way mentioned above, we could read the meta data instead of the entire file, and compare the information KB by KB.

Question 5:
Using checkSum, we could quickly and accurately find out the non-duplicated files. But to totally avoid getting the false positive, we need to compare the content chunk by chunk when we find two "duplicates" using checkSum.
        */
        
        
    }
};


/*FOLLLOW UP QUESTIONS :
1) Imagine you are given a real file system, how will you search files? DFS or BFS?
2) If the file content is very large (GB level), how will you modify your solution?
3) If you can only read the file by 1kb each time, how will you modify your solution?
4) What is the time complexity of your modified solution? What is the most time-consuming part and memory consuming part of it? How to optimize?
5) How to make sure the duplicated files you find are not false positive?
*/
//https://leetcode.com/problems/find-duplicate-file-in-system/discuss/104120/Follow-up-questions-discussion
        //**** we could use meta data instead of the entire file in hashing **** , this idea is used in all 5 follow up answers
        /*
        Question 2:
In real-world file system, we usually store large file in multiple "chunks" (in GFS, one chunk is 64 MB),so we have
meta data recording the file size,file name and index of different chunks along with each chunk's checkSum (the xor for the content).
So when we upload a file, we record the meta data as mentioned above.
When we need to check for duplicates, we could simply check the meta data:
1.Check if files are of the same size;
2.if step 1 passes, compare the first chunk's checkSum
3.if step 2 passes, check the second checkSum
...
and so on.
There might be false positive duplicates, because two different files might share the same checkSum.

Question 3:
In the way mentioned above, we could read the meta data instead of the entire file, and compare the information KB by KB.

Question 5:
Using checkSum, we could quickly and accurately find out the non-duplicated files. But to totally avoid getting the false positive, 
we need to compare the content chunk by chunk when we find two "duplicates" using checkSum.
        */
