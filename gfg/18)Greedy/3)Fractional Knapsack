/*
Given weights and values of n items, we need to put these items in a knapsack of capacity W to get the maximum total
value in the knapsack.

We are allowed to break items. We can take fraction of a whole item.
In 0-1 Knapsack you cannot break item. 0-1 Knapsack is solved using DP
*/
/*
Approach:
The basic idea of the greedy approach is to calculate the ratio value/weight for each item and sort the item on basis 
of this ratio. Then take the item with the highest ratio and add them until we canâ€™t add the next item as a whole and 
at the end add the next item as much as we can.
*/

//Time : O(nlogn)
double fractionalKnapsack(int W, Item arr[], int n)
{
    // Your code here
    sort(arr, arr+n, myComp);
    
    double value = 0;
    
    int i;
    for(i=0;i<n;++i){
        if(W-arr[i].weight >= 0){
            W -= arr[i].weight;
            value += arr[i].value;
        }else break;
    }
    if(W>0&&i<n) value += ((double)W/(double)arr[i].weight)*arr[i].value;
    
    return value;
    
}
