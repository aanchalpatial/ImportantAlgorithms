/*
Given an array of jobs where every job has a deadline and associated profit if the job is finished before the deadline. 
It is also given that every job takes single unit of time, so the minimum possible deadline for any job is 1. How to maximize
total profit if only one job can be scheduled at a time.
*/

/*
Approach:
1) Sort all jobs in decreasing order of profit.
2) Initialize the result sequence as first job in sorted jobs.
3) Do following for remaining n-1 jobs
…….a) If the current job can fit in the current result sequence without missing the deadline, add current job to the result as last
      as possible(i.e as right as possible). Else ignore the current job.
*/
//https://www.geeksforgeeks.org/job-sequencing-problem/
//Time: O(n^2)

bool myComp(Job j1, Job j2){
    return j1.profit>j2.profit;
}

void printJobScheduling(Job arr[], int n) 
{ 
    // your code here
    /*
    we will sort the jobs in descending order of their profits. We will then iterate through the sorted jobs 
    and try to fit each job into the latest possible slot before its deadline.
    */
    int maxDeadline = arr[0].dead;
    for(int i=1;i<n;++i) maxDeadline = max(maxDeadline, arr[i].dead);
    vector<bool> sequence(maxDeadline, false);

    sort(arr, arr+n, myComp);
    
    int profit = 0;
    int cnt = 0;
    
    for(int i=0;i<n;++i){
        int d = arr[i].dead-1;
        int p = arr[i].profit;
        for(int j=d;j>=0;--j){                       // *** important ***
            if(sequence[j]==false){ //schedule job as last as possible i.e as right as possible
                sequence[j] = true;
                profit += p;
                ++cnt;
                break;
            }
        }
    }

    cout<<cnt<<" "<<profit<<endl;
    
} 

// O(nlogn) solution: https://www.geeksforgeeks.org/job-sequencing-problem/