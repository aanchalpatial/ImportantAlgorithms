/*
You are given n activities with their start and finish times. Select the maximum number of activities that can be performed
by a single person, assuming that a person can only work on a single activity at a time.
*/
/*
Approach:
1) Sort the activities according to their finishing time
2) Select the first activity from the sorted array and print it.
3) Do following for remaining activities in the sorted array.
…….a) If the start time of this activity is greater than or equal to the finish time of previously selected activity
      then select this activity and print it.
*/

//Time : O(nlogn)

bool myComp(pair<int, int> p1, pair<int, int> p2){
    return p1.second<p2.second;
}

int activitySelection(int start[], int end[], int n){
    // Your code here
    int result = 1;
    
    vector<pair<int, int>> activity;
    for(int i=0;i<n;++i){
        activity.push_back(make_pair(start[i], end[i]));
    }
    sort(activity.begin(), activity.end(), myComp);
    
    pair<int, int> prev = make_pair(activity[0].first, activity[0].second);
    
    
    for(int i=1;i<n;++i){
        if(prev.second<=activity[i].first){
            ++result;
            prev = make_pair(activity[i].first, activity[i].second);
        }
    }
    return result;
}



//Dynamic Programming Solution is given here : A variation of Longest Increasing Subsequence Problem
//https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/20)Dynamic%20Programming/5)LIS/3)Activity%20Selection%20Problem


// Variation of Activity Selection Problem:
// 1) https://leetcode.com/problems/meeting-rooms/description/
// 2) https://leetcode.com/problems/meeting-rooms-ii/
// 3) 


