//Similar to leetcode problem : 997, Find the town judge

/*You are in a party of N people, where only one person is known to everyone. Such a person may be present in the party,
if yes, (s)he doesn’t know anyone in the party. Your task is to find the stranger (celebrity) in party.
You will be given a square matrix M[][] where if an element of row i and column j  is set to 1 it means ith person knows jth person.
You need to complete the function getId() which finds the id of the celebrity if present else return -1.
*/

//https://www.geeksforgeeks.org/the-celebrity-problem/

//naive approach is : O(n^2) time 

//method 1 : O(N) time & O(N) space
//maintain 2 separate array, one of persons who know someone & other of persons who are known by someone
//and result is the index i where ( know[i]==0 && known[i] = N-1 )


//efficient method
//method 2 : O(N) time & O(N) space : using stacks
//even less number of operation

/*Hints:
Use the following observation based on elimination technique 

If A knows B, then A can’t be celebrity. Discard A, and B may be celebrity.
If A doesn’t know B, then B can’t be celebrity. Discard B, and A may be celebrity.
Repeat above two steps till we left with only one person.
Ensure the remained person is celebrity.
*/
/*
Use stack to verity celebrity.

Push all the persons into a stack.
Pop off top two persons from the stack, discard one person based on return status of Mat(A, B).
Push the remained person onto stack.
Repeat step 2 and 3 until only one person remains in the stack.
Check the remained person in stack doesn’t have acquaintance with anyone else or not.
*/

int getId(int M[MAX][MAX], int n)
{
    //Your code here
    //I have to find a row whose all values are 0 in O(n) time & O(1) space
    stack <int> st;
    for(int i=0;i<n;++i) st.push(i);
    
    while(st.size()!=1){
        int x = st.top();
        st.pop();
        int y = st.top();
        st.pop();
        
        if(M[x][y]==1) st.push(y);
        else if(M[x][y]==0) st.push(x);
    }
    
    //Now ensuring the only person left in stack is celebrity or not
    //person k is a celebrity if there are all 0's in k row & all 1's in 
    //k column(except when row & column meet)
    int k = st.top();
    bool flag = true;
    for(int j=0;j<n;++j){
        if(M[k][j]==1){
            flag = false;
            goto label;
        }
    }
    for(int i=0;i<n;++i){
        if(i==k) continue;
        else if(M[i][k]!=1){
            flag = false;
            break;
        }
    }
    label:
    if(flag) return k;
    else return -1;
}



//Method 3 : O(N) time & O(1) approach

/*
Method 4: This method uses Two Pointers technique to solve the above problem.

Approach: The idea is to use two pointers, one from start and one from the end. Assume the start person is A, 
and the end person is B. If A knows B, then A must not be the celebrity. Else, B must not be the celebrity.
At the end of the loop, only one index will be left as a celebrity. Go through each person again and check
whether this is the celebrity.
The Two Pointer approach can be used where two pointers can be assigned, one at the start and other at the end 
and the elements can be compared and the search space can be reduced.

Algorithm :
1) Create two indices a and b, where a = 0 and b = n-1
2) Run a loop until a is less than b.
3) Check if a knows b, then a can be celebrity. so incement a, i.e. a++
4) Else b cannot be celebrity, so decrement b, i.e. b–
5) Assign a as the celebrity
6) Run a loop from 0 to n-1 and find the count of persons who knows the celebrity and the number of people
whom the celebrity knows. if the count of persons who knows the celebrity is n-1 and the count of people whom the
celebrity knows is 0 then return the id of celebrity else return -1.
*/
int celebrity(vector<vector<int> >& M, int n) {
    // method 3: 2 pointer approach
    // Time: O(n) & Space: O(1)
    // we apply the same logic of elimination we applied in previous solution
    // but not with stack but with 2 pointers
    int i = 0, j = n-1;
    while(i<j) {
        if(M[i][j]==1) {
            ++i;
        } else {
            --j;
        }
    }
    // now let's verify
    int c = i;
    for(int i=0;i<n;++i) {
        if(M[c][i]==1) {
            return -1;
        }
    }
    for(int i=0;i<n;++i) {
        if(c!=i&&M[i][c]==0) {
            return -1;
        }
    }
    return c;
}
