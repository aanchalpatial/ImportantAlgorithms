/*
The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate
span of stock’s price for all n days. The span Si of the stock’s price on a given day i is defined as the maximum number of
consecutive days just before the given day(including the given day), for which the price of the stock on the current day is 
less than or equal to its price on the given day.
For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for 
corresponding 7 days are {1, 1, 1, 2, 1, 4, 6}
*/

//Naive is O(n^2), do it in O(n)time & O(n) space: 2n operation on stack
//Approach: we use a stack, When we go from day i-1 to i, we pop the days when the price of the stock was less than or equal to price[i] and
//update span of current element & then push the value of day i back into the stack.
#include <bits/stdc++.h>
using namespace std;

void stockSpan(int arr[], int n){
    stack <int> st;
    int span[n];
    
    st.push(0);
    span[0] = 1;
    
    for(int i=1;i<n;++i){
        //pop all smaller elements from stack
        while(!st.empty()&&arr[st.top()]<=arr[i]){
            st.pop();
        }
        
        if(st.empty()) span[i] = i+1;
        else span[i] = i-st.top();
        
        st.push(i);
    }
    cout<<"StockSpan: ";
    for(int i=0;i<n;++i) cout<<span[i]<<" ";
    cout<<endl;
}

//Application 1): Given an array of distinct integers, find the closest (position wise) greater on left of every element.
//If there is no greater element on l;eft, then print -1
//Note: In stock span problem we were storing index in stack, where as in this and next problem we will store the element itself.
int previousGreaterElement(int arr[], int n){
    stack <int> st;
    int result[n];
    
    for(int i=0;i<n;++i){
        while(!st.empty()&&st.top()<=arr[i]){
            st.pop();
        }
        if(st.empty()) result[i] = -1;
        else result[i] = st.top();
        st.push(arr[i]);
    }
    cout<<"Previous Greater Element: ";
    for(int i=0;i<n;++i) cout<<result[i]<<" ";
    cout<<endl;
}

//Application 2): print the Next Greater Element (NGE) for every element. The Next greater Element for an element x is the FIRST greater
//element on the right side of x in array. Elements for which no greater element exist, consider next greater element as -1.
//Naive is O(n^2), do it in O(n) time & O(n) space(stack in this case)
#include <bits/stdc++.h>
using namespace std;

void nextGreaterElement(int arr[], int size){		//Not Important, can be left
    stack <int> st;
    
    st.push(arr[size-1]);
    for(int i=size-2;i>=0;--i){
        while(!st.empty()&&st.top()<arr[i]){
            cout<<st.top()<<"->"<<arr[i]<<endl;
            st.pop();
        }
        st.push(arr[i]);
    }
    while(!st.empty()){
        cout<<st.top()<<"->"<<"-1"<<endl;
        st.pop();
    }
}

void nextGreaterElementInSameOrder(int arr[], int size){		
    //Note:- SAME as previous greater element with traversal of array from behind
    //** The next greater elements should be printed in same order as input array **
    stack <int> st;
    int result[size];
    
    for(int i=size-1;i>=0;--i){
        while(!st.empty()&&st.top()<=arr[i]){
            st.pop();
        }
        if(st.empty()) result[i] = -1;
        else result[i] = st.top();
        st.push(arr[i]);
    }
    for(int i=0;i<size;++i) cout<<arr[i]<<"-> "<<result[i]<<endl;
}

int main() {
	int arr[] = {15,13,12,14,16,8,6,4,10,30};
	int n = sizeof(arr)/sizeof(arr[0]);
	
	//stockSpan(arr, n);
	int arr2[] = {15, 10, 18, 12, 4, 6, 2, 8};
	int n2 = sizeof(arr2)/sizeof(arr2[0]);
	previousGreaterElement(arr2, n2);
	nextGreaterElementInSameOrder(arr, n);
	
	return 0;
}

//Application 3): As done in application 1 & 2, we can also use stockspan to find previous smaller & next smaller element for
//every element of array in O(n) time

//Application 4): Largest Rectangular Area in Histogram
//Studied separately:- https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/12)Stack/Largest%20Rectangular%20Area%20in%20Histogram

//Application 5): Find Maximum of Minimum of every window size in an array
//Studied separately:- https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/12)Stack/Maximum%20of%20Minimum%20for%20every%20window%20%20size
