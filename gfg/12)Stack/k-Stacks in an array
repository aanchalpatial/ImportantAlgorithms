//Application 1):
//The task is to create a data structure "twoStacks" that represents two stacks.Implementation of twoStacks should use only one array
//Method 1 (Divide the space in two halves)
//Method 2 (A space-efficient implementation): Both stacks grow (or shrink) in opposite
//direction. To check for overflow, all we need to check is for space between top elements of both stacks.

#include <bits/stdc++.h>
using namespace std;

class twoStacks {
    int *arr;
    int size;
    int top1, top2;
    
    public:
    twoStacks(int n){
        size = n;
        top1 = -1;
        top2 = n;
        arr = new int[size];
        for(int i=0;i<size;++i) arr[i] = -1;
    }
    
    void push1(int x){
        if(top2-top1>1){
            ++top1;
            arr[top1] = x;
        }else{
            cout<<"Stack 1 Overflow!!"<<endl;
        }
    }
    void push2(int x){
        if(top2-top1>1){
            --top2;
            arr[top2] = x;
        }else{
            cout<<"Stack 2 Overflow!!"<<endl;
        }
    }
    void pop1(){
        if(top1>-1){
            arr[top1] = -1;
            --top1;
        }else{
            cout<<"Stack 1 Underflow!!"<<endl;
        }
    }
    void pop2(){
        if(top2<size){
            arr[top2] = -1;
            ++top2;
        }else{
            cout<<"Stack 2 Underflow!!"<<endl;
        }
    }
    
    void displayArray(){
        for(int i=0;i<size;++i) cout<<arr[i]<<"|";
        cout<<endl;
    }  
};

int main() {
    //Implementing 2 stacks using 1 array
    twoStacks ts = twoStacks(5);
    ts.displayArray();
    ts.pop1();
    ts.pop2();
    ts.displayArray();
    ts.push1(12);
    ts.push2(5);
    ts.displayArray();
    ts.push1(4);
    ts.push1(3);
    ts.displayArray();
    ts.push1(99);
    ts.displayArray();  
	return 0;
}

//Application 2):
// https://takeuforward.org/data-structure/implement-k-stacks-in-a-single-array/#google_vignette
// https://www.youtube.com/watch?v=S5cYO9k1Ja8
// https://www.naukri.com/code360/problems/n-stacks-in-an-array_1164271?leftPanelTabValue=PROBLEM
//The task is to create a data structure "kStacks" that represents k stacks.
//Method 1 (Divide the array in k parts)
/*Method 2 (A space-efficient implementation):
Following are the two extra arrays being used:
1) top[]: This is of size k and stores indexes of top elements in all stacks.
2) next[]: This is of size n and stores indexes of next item for the items in array arr[]. Here arr[] is actual array that stores k stacks.
Together with k stacks, a stack of free slots in arr[] is also maintained. The top of this stack is stored in a variable ‘free’.
All entries in top[] are initialized as -1 to indicate that all stacks are empty. All entries next[i] are initialized as i+1 because 
all slots are free initially and pointing to next slot. Top of free stack, ‘free’ is initialized as 0.
IMPORTANT: - For index i in arr[] which have a valid data, corresponding next[i] stores previous index where previous value of stack is stored
// otherwise next[i] stores the next available index of arr[] where we can push new data*/
#include <bits/stdc++.h>
using namespace std;

class kStacks{
    int *arr;
    int *next;  //used to store next(below) current item in stack
    int *top;   //used to store top of k stacks
    int freeTop;
    int cap, k;     //k<=cap
    public:
    kStacks(int n, int numberOfStacks){
        arr = new int[n];
        next = new int[n];
        top = new int[numberOfStacks];
        cap = n;
        k = numberOfStacks;
        freeTop = 0;
        
        //next values must be initialised this way
        for(int i=0;i<n-1;++i) next[i] = i+1; 
        next[n-1] = -1;
        
        //all top values is initialised with -1
        for(int i=0;i<numberOfStacks;++i) top[i] = -1;
    }
    
    void push(int k, int x){    //push x in kth stack
        if(freeTop == -1){      //because last element in next aarray is -1
            cout<<"Overflow !!"<<endl;
            return;
        }
        int i = freeTop;
        arr[i] = x;
        
        freeTop = next[i];
        next[i] = top[k];
        top[k] = i;
    }
    void pop(int k){            //pop from kth stack
        int j = top[k];
        if(j==-1){
            cout<<"Underflow in Stack "<<k<<"!!"<<endl;
            return;
        }
        arr[j] = 0;         //0 indicated no element, this line is not necessary
        top[k] = next[j];
        next[j] = freeTop;  //RR
        freeTop = j;
    }
    
    void displayArray(){
        cout<<"arr: ";
        for(int i=0;i<cap;++i) cout<<arr[i]<<" ";
        cout<<endl<<"nxt: ";
        for(int i=0;i<cap;++i) cout<<next[i]<<" ";
        cout<<endl<<"top: ";
        for(int i=0;i<k;++i) cout<<top[i]<<" ";
        cout<<endl<<"freeTop: "<<freeTop<<endl;
    }
    
};

int main() {
	kStacks kst = kStacks(4,3);
	//kst.displayArray();
	kst.push(1, 5);
	//kst.displayArray();
	kst.push(1, 6);
	kst.push(0, 99);
	//kst.displayArray();
	kst.pop(1);
	//kst.displayArray();
 	kst.pop(1);
 	//kst.displayArray();
 	kst.push(2, 100);
 	kst.displayArray();
 	kst.push(2, 98);
 	kst.push(2, 97);
 	kst.displayArray();
 	kst.push(0, 55);
 	
	return 0;
}
