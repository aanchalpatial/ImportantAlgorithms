//Given a stack, the task is to sort it such that the top of the stack has the greatest element.
//CONDITION :- You can't use any loops, you can only use stack data structure operations.

/*The idea of the solution is to hold all values in Function Call Stack until the stack becomes empty. When the stack
becomes empty, insert all held items one by one in sorted order. Here sorted order is important.
*/
void insertSorted(stack<int> &s, int ele){
    if(s.empty()||s.top()<ele){
        s.push(ele);
    }else {
        int item = s.top();
        s.pop();
        insertSorted(s, ele);
        s.push(item);
    }
}

void sortStack(stack<int> &s){
    if(!s.empty()){
        int temp = s.top();
        s.pop();
        sortStack(s);
        
        insertSorted(s, temp);
    }
}









//VARIANT OF ABOVE PROBLEM :  Reverse a stack using recursion
/*
The idea of the solution is to hold all values in Function Call Stack until the stack becomes empty. When the stack 
becomes empty, insert all held items one by one at the bottom of the stack.
*/

#include <bits/stdc++.h>
using namespace std;

void insertAtBottom(stack<int> &s, int temp){
    if(s.empty()) s.push(temp);
    else {
        int item = s.top();
        s.pop();
        insertAtBottom(s, temp);
        s.push(item);
    }
}


void reverseStack(stack<int> &s){
    if(!s.empty()){
        int temp = s.top();
        s.pop();
        reverseStack(s);
        
        insertAtBottom(s, temp);
    }
}


int main() {
    
    stack <int> st;
    for(int i=1;i<=5;++i) st.push(i);
    
    reverseStack(st);
    
    while(!st.empty()){
        cout<<st.top()<<", ";
        st.pop();
    }
    
	return 0;
}
