//PROBLEM 1 :
/*LEETCODE 496 : Next Greater Element I
You are given two arrays (without duplicates) nums1 and nums2 where nums1â€™s elements are subset of nums2. 
Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. 
If it does not exist, output -1 for this number.
*/

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        
        int n = nums2.size();
        if(n==0) return {};
        
        //next greater element : application of stockspan
        //O(n+m) time & O(n) space  , where n is size of nums2[] & m is size of nums1[]
        stack<int> s;
        unordered_map<int, int> mp;         //stores element & it's next greater in nums2
        mp.insert(make_pair(nums2[n-1], -1));
        s.push(nums2[n-1]);
        
        for(int i=n-2;i>=0;--i){
            while(!s.empty()&&s.top()<=nums2[i]) s.pop();
            
            if(s.empty()) mp.insert(make_pair(nums2[i], -1));
            else mp.insert(make_pair(nums2[i], s.top()));
            
            s.push(nums2[i]);
        }
        
        
        vector<int> result;
        for(int i=0;i<nums1.size();++i) result.push_back(mp[nums1[i]]);
        return result;
        
        
    }
};
