//ANOTHER APPLICATION OF STOCKSPAN PROBLEM
/*Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a 
number of contiguous bars. For simplicity, assume that all bars have same width and the width is 1 unit.
*/
//https://media.geeksforgeeks.org/wp-content/cdn-uploads/histogram1.png
//https://www.geeksforgeeks.org/largest-rectangular-area-in-a-histogram-set-1/

//3 Solutions : Naive, Better & Best

//NAIVE solution is O(n^2) i.e A simple solution is to one by one consider all bars as starting point (i.e height of the rectangular 
//region) and calculate area of all rectangles starting with every bar. Finally return maximum of all possible areas.
int naiveMaxRectangularAreaOfHistogram(int arr[], int n){
    //O(n^2) time & O(1) space
    int maxArea = 0;
    for(int i=0;i<n;++i){
        int currArea = arr[i];
        for(int l=i-1;l>=0;--l){
            if(arr[l]>=arr[i]) currArea += arr[i];
            else break;
        }
        for(int r=i+1;r<n;++r){
            if(arr[r]>=arr[i]) currArea += arr[i];
            else break;
        }
        maxArea = max(maxArea, currArea);
    }
    return maxArea;
}

//BETTER Solution: : stockspan + naive - O(n) time, 3 traversal + 2 stack + 2 n sized arrays(next, prev)
int betterMaxRectangularAreaOfHistogram(int arr[], int n){
    //stockspan + naive = better solution
    
    //Step1: find index of previous smaller element for every index using stock span
    stack <int> st;
    int prev[n];
    for(int i=0;i<n;++i){
        while(!st.empty()&&arr[st.top()]>=arr[i]){
            st.pop();
        }
        if(st.empty()) prev[i]  = -1;             //RR: i.e all the elements to left of current element
        else prev[i] = st.top();
        st.push(i);
    }
    // cout<<"prev array: ";
    // for(int i=0;i<n;++i) cout<<prev[i]<<" ";
    // cout<<endl;
    
    //Step2: index of find next smaller element for every index using stock span
    stack <int> st2;
    int next[n];
    for(int i=n-1;i>=0;--i){
        while(!st2.empty()&&arr[st2.top()]>=arr[i]){
            st2.pop();
        }
        if(st2.empty()) next[i]  = n;           //RR: i.e all the elements to right of current element
        else next[i] = st2.top();
        st2.push(i);
    }
    // cout<<"next array: ";
    // for(int i=0;i<n;++i) cout<<next[i]<<" ";
    // cout<<endl;
    
    //Step3: use prev & next to find max area at every index and choose the maximum of all these
    int maxArea = 0;
    for(int i=0;i<n;++i){
        int currArea = arr[i];
        currArea += arr[i]*(i-prev[i]-1);
        currArea += arr[i]*(next[i]-i-1);
        maxArea = max(maxArea, currArea);
        //cout<<"curr area: "<<currArea<<endl;
    }
    return maxArea;
}

//BEST solution: O(n) time, 1 tarversal & 1 stack
/*
We traverse all bars from left to right, maintain a stack of bars. Every bar is pushed to stack once. A bar is popped from stack when 
a bar of smaller height is seen. When a bar is popped, we calculate the area with the popped bar as smallest bar. 
How do we get left and right indexes of the popped bar – the current index tells us the ‘right index’ and index of previous item in 
stack is the ‘left index’. Following is the complete algorithm.
1) Create an empty stack.
2) Start from first bar, and do following for every bar ‘hist[i]’ where ‘i’ varies from 0 to n-1.
……a) If stack is empty or hist[i] is higher than the bar at top of stack, then push ‘i’ to stack.
……b) If this bar is smaller than the top of stack, then keep removing the top of stack while top of the stack is greater. 
     Let the removed bar be hist[tp]. Calculate area of rectangle with hist[tp] as smallest bar. *** For hist[tp], 
     the ‘left index’ is previous (previous to tp) item in stack and ‘right index’ is ‘i’ (current index).***
3) If the stack is not empty, then one by one remove all bars from stack and do step 2.b for every removed bar.
*/
int bestMaxRectangularAreaOfHistogram(int arr[], int n){
    stack <int> st;
    int maxArea = 0;
    for(int i=0;i<n;++i){
        //we calculate area of every popped bar
        while(!st.empty()&&arr[st.top()]>=arr[i]){
            int currArea = 0;
            int tp = st.top();
            st.pop();
            currArea = arr[tp]*(st.empty()?i:(i-st.top()-1));
            maxArea = max(maxArea, currArea);
        }
        //a bar is pushed only if it is smaller than arr[stack top]
        st.push(i);
    }
    //all the bars left in stack after above loop are those which have no next smaller
    while(!st.empty()){
        int currArea = 0;
        int tp = st.top();
        st.pop();
        currArea = arr[tp]*(st.empty()?n:(n-st.top()-1));
        maxArea = max(maxArea, currArea);
    }
    return maxArea;
}



//APPLICATION OF LARGEST AREA UNDER HISTOGRAM
//Given a binary matrix, find the maximum size rectangle binary-sub-matrix with all 1’s
https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/12)Stack/11)%20Maximum%20Area%20Rectangle%20in%20Binary%20Matrix


