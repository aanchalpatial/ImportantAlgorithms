//Linear data structure
//Stack underflow & overflow

//Ways to implement a stack: Using array/vector, Using linked list(push & pop at head of linked list), Using deque(By default in c++)

//Note: While using stack, if we look for top() or try to pop() when stack is empty results in segmentation error. Use
// !stack.empty() for safe checking then using top() or pop()

//Stack stl :- satck <data_type> stack_name;
//functions :- empty(), size(), top(), push(g) & pop(). All these functins work in O(1) time.

//Problem 1): Design a stack that supports normal stack operatiosn in O(1) and also supprots getMin() in O(1)
#include <bits/stdc++.h>
using namespace std;

class myStack{
    stack <int> st;
    stack <int> aux;    //auxillary stack which will store min in main stack at any moment
    
    public:
    void pushInStack(int x){
        if(st.empty()){
            st.push(x);
            aux.push(x);
        }else {
            st.push(x);
            if(st.top()<=aux.top()) aux.push(x);            // <= because duplicate minimum are also to added in aux
        }
        
    }
    void popFromStack(){
        if(st.top()==aux.top()) aux.pop();
        st.pop();
    }
    
    void getMin(){
        cout<<"Minimum element in stack: "<<aux.top()<<endl;
    }
    
};

int main() {
	myStack s = myStack();
	s.pushInStack(99);
	s.pushInStack(3);
	s.pushInStack(5);
	s.pushInStack(1);
	s.popFromStack();
	s.getMin();
	return 0;
}

//APLLICATIONS: Function call stack, reverse, palindrome, balanced paranthesis, infix to pre/postfix, pref/postfix evaluation,
//undo/redo, forward/back, remove consecutive duplicates & STOCK SPAN PROBLEM and its variations

//Application 1): 
//Stacks can be used to remove duplicate characters from a string that are stacked next to each other. 
//For example, we take the string aabbccccc and convert it into abc. We can push the first character into a stack and skip if 
//the top of the stack is equal to current character.
string removeConsecutiveDuplicates(string s)
{
    // Your code here
    stack <char> st;
    for(int i=0;i<s.length();++i){
        if(!st.empty()&&st.top()==s[i]) continue;       //ignoring consecutive duplicates
        else {
            st.push(s[i]);
        }
    }
    stack <char> st2;
    while(!st.empty()){         //using another stack to reverse contents of first stack
        char x = st.top();
        st2.push(x);
        st.pop();
    }
    string result = "";
    while(!st2.empty()){
        result += st2.top();
        st2.pop();
    }
    return result;
}
