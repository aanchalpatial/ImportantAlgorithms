//Problem : Design a stack that supports normal stack operatiosn in O(1) and also supprots getMin() in O(1)

//method 1 : using auxillary stack data structure
//O(1) time & O(n) space
//https://www.geeksforgeeks.org/design-and-implement-special-stack-data-structure/

#include <bits/stdc++.h>
using namespace std;

class myStack{
    stack <int> st;
    stack <int> aux;    //auxillary stack which will store min in main stack at any moment
    
    public:
    void pushInStack(int x){
        if(st.empty()){
            st.push(x);
            aux.push(x);
        }else {
            st.push(x);
            if(st.top()<=aux.top()) aux.push(x);            // <= because duplicate minimum are also to added in aux
        }
        
    }
    void popFromStack(){
        if(st.top()==aux.top()) aux.pop();
        st.pop();
    }
    
    void getMin(){
        cout<<"Minimum element in stack: "<<aux.top()<<endl;
    }
    
};

int main() {
	myStack s = myStack();
	s.pushInStack(99);
	s.pushInStack(3);
	s.pushInStack(5);
	s.pushInStack(1);
	s.popFromStack();
	s.getMin();
	return 0;
}




//method 2 : using extra variable
//O(1) time & O(1) space
//https://www.geeksforgeeks.org/design-a-stack-that-supports-getmin-in-o1-time-and-o1-extra-space/
