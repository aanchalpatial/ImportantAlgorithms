//Convert Infix expression to Postfix expression and then evaluate Postfix.
/*
Algorithm to Convert an Infix expression to Postfix:
1)Scan the infix expression from left to right.
2)If the scanned character is an operand, output it.
3)Else,
  ->If the precedence of the scanned operator is greater than the precedence of the operator in the stack(or the stack is empty or the stack contains a '(' ), push it.
  ->Else, Pop all the operators from the stack which are greater than or equal to in precedence than that of the scanned operator. After doing that Push the scanned operator to the stack. (If you encounter parenthesis while popping then stop there and push the scanned operator in the stack.)
4)If the scanned character is an ‘(‘, push it to the stack.
5)If the scanned character is an ‘)’, pop the stack and and output it until a ‘(‘ is encountered, and discard both the parenthesis.
6)Repeat steps 2-6 until infix expression is scanned.
7)Print the output.
8)Pop and output from the stack until it is not empty.*/

#include <bits/stdc++.h>
using namespace std;

int precedanceOf(char c){
    if(c == '+'|| c == '-') return 1;
    else if(c=='*'||c=='/') return 2;
    else if(c=='^') return 3;
    else return -1;
}

bool isOperand(char ch){
    if((ch>='a'&&ch<='z')||(ch>='A'&&ch<='Z')||ch>='0'&&ch<='9') return true;
    else return false;
}

string infixToPostfix(string str){
    stack <char> st;
    string result = "";
    
    for(int i=0;i<str.size();++i){
        if(str[i]=='(') st.push(str[i]);
        else if(str[i]==')'){
            while(!st.empty()&&st.top()!='('){
                result += st.top();
                st.pop();
            }
            if(st.top()=='(') st.pop();   //to remove '('
        }else if(isOperand(str[i])){
            //cout<<"["<<str[i]<<"]";
            //handling operand 
            result += str[i];
        }else {
            //handling operators
            
            if(st.empty()||st.top()=='('||precedanceOf(str[i])>precedanceOf(st.top())){
                st.push(str[i]);
            }else {
                while(!st.empty() && precedanceOf(str[i])<= precedanceOf(st.top()))
                {
                    result += st.top();
                    st.pop();
                }
                st.push(str[i]);
            }
        }
    }
    while(!st.empty())
    {
        result += st.top();
        st.pop();
    }
    return result;
}

int evaluatePostfix(string exp){
    stack <int> stc;
    for(int i=0;i<exp.length();++i){
        if(isOperand(exp[i])){
            stc.push(exp[i]-'0');
        }else {
            int op1 = stc.top();
            stc.pop();
            int op2 = stc.top();
            stc.pop();
            int res;
            switch(exp[i]){
                case '+': res = op2 + op1;
                        break;
                case '-': res = op2 - op1;
                        break;
                case '*': res = op2 * op1;
                        break;
                case '/': res = op2 / op1;
                        break;
                case '^': res = pow(op2,op1);
                        break;
            }
            stc.push(res);
        }
    }
    return stc.top();
}

int main() {
    
    //string infix = "a+b*c-d";
    //string infix = "((a+b)*(c-d))";
    //string infix = "a+b*(c^d-e)^(f+g*h)-i";
    string infix = "(5+3)*2+4";
    string postfix = infixToPostfix(infix);
    int result = evaluatePostfix(postfix);
    cout<<postfix<<endl<<result<<endl;
    
	return 0;
}
