#include<bits/stdc++.h>
using namespace std;

string kth_permutation(int n, int k) {

	//Method 1 : Print all permutations of given string lexicographically & Return string at K-th Iteration
	//O(n!*n) time & O(1) space
	// string str = "";
	// for(int i=1;i<=n;++i) str += to_string(i);

	// do{
	//     --k;
	//     if(k==0) return str;
	// }while(next_permutation(str.begin(), str.end()));

	// return "invalid input";

	//Method 2 : Pattern Matching
	//https://leetcode.com/problems/permutation-sequence/discuss/22507/%22Explain-like-I'm-five%22-Java-Solution-in-O(n)
	//This method works *** ONLY *** if all characters in string are sorted & unique.
	
	/*approach :-
	I'm sure somewhere can be simplified so it'd be nice if anyone can let me know. The pattern was that:

	say n = 4, you have {1, 2, 3, 4}

	If you were to list out all the permutations you have

	1 + (permutations of 2, 3, 4)

	2 + (permutations of 1, 3, 4)

	3 + (permutations of 1, 2, 4)

	4 + (permutations of 1, 2, 3)


	We know how to calculate the number of permutations of n numbers... n! So each of those with
	permutations of 3 numbers means there are 6 possible permutations. Meaning there would be a
	total of 24 permutations in this particular one. So if you were to look for the (k = 14) 14th permutation,
	 it would be in the

	3 + (permutations of 1, 2, 4) subset.

	To programmatically get that, you take k = 13 (subtract 1 because of things always starting at 0) and
	 divide that by the 6 we got from the factorial, which would give you the index of the number you want.
	  In the array {1, 2, 3, 4}, k/(n-1)! = 13/(4-1)! = 13/3! = 13/6 = 2. The array {1, 2, 3, 4} has a value
	  of 3 at index 2. So the first number is a 3.

	Then the problem repeats with less numbers.

	The permutations of {1, 2, 4} would be:

	1 + (permutations of 2, 4)

	2 + (permutations of 1, 4)

	4 + (permutations of 1, 2)

	But our k is no longer the 14th, because in the previous step, we've already eliminated the
	 12 4-number permutations starting with 1 and 2. So you subtract 12 from k.. which gives you 1.
	 Programmatically that would be...

	k = k - (index from previous) * (n-1)! = k - 2*(n-1)! = 13 - 2*(3)! = 1

	In this second step, permutations of 2 numbers has only 2 possibilities, meaning each of the
	three permutations listed above a has two possibilities, giving a total of 6. We're looking for
	 the first one, so that would be in the 1 + (permutations of 2, 4) subset.

	Meaning: index to get number from is k / (n - 2)! = 1 / (4-2)! = 1 / 2! = 0.. from {1, 2, 4}, index 0 is 1


	so the numbers we have so far is 3, 1... and then repeating without explanations.


	{2, 4}

	k = k - (index from pervious) * (n-2)! = k - 0 * (n - 2)! = 1 - 0 = 1;

	third number's index = k / (n - 3)! = 1 / (4-3)! = 1/ 1! = 1... from {2, 4}, index 1 has 4

	Third number is 4


	{2}

	k = k - (index from pervious) * (n - 3)! = k - 1 * (4 - 3)! = 1 - 1 = 0;

	third number's index = k / (n - 4)! = 0 / (4-4)! = 0/ 1 = 0... from {2}, index 0 has 2

	Fourth number is 2
	*/
	//O(n) time & O(n) space
	string str = "";
	for (int i = 1; i <= n; ++i) str += to_string(i);

	//creating factorial for fast lookup
	int fact[n];
	fact[0] = 1;
	for (int i = 1; i < n; ++i) {
		fact[i] = (fact[i - 1] * i);
	}

	--k;
	string result = "";

	for (int i = 1; i <= n; ++i) {
		int index = k / fact[n - i];
		result += str[index];
		str = str.substr(0, index) + str.substr(index + 1, n - index - 1);
		k -= index * fact[n - i];
		// cout<<k<<", "<<index<<"\t";
		// cout<<str<<", "<<result<<"\n";
	}

	return result;

}


int main() {

	//PROBLEM 5 : Find k-th lexicographic permutation of string which has all unique characters
	//LeetCode Question 60 : https://leetcode.com/problems/permutation-sequence/
	/*
	The set [1,2,3,...,n] contains a total of n! unique permutations.

	By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

	"123"
	"132"
	"213"
	"231"
	"312"
	"321"
	Given n and k, return the kth permutation sequence.
	*/
	int n = 3, k = 5;
	cout << kth_permutation(n, k) << "\n";


	return 0;
}
