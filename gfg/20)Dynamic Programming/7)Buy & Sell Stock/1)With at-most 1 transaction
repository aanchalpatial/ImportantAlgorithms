/*LEETCODE 121 :
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), 
design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

OR *** in simple words ***

Find maximum difference between 2 elements in an array such that larger element appears after smaller element.


*/

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        if(prices.size()==0) return 0;
        
        //Naive approach
        //Method 1) : O(n^2) time & O(1) space
        // int result = 0;
        // for(int i=0;i<prices.size();++i){
        //     for(int j=i;j<prices.size();++j){
        //         result = max(result, prices[j]-prices[i]);
        //     }
        // }
        // return result;
        
        //Method 2) : O(n) time & O(1) space
        //https://www.geeksforgeeks.org/maximum-difference-between-two-elements/
        int min_so_far = prices[0];
        int max_diff = 0;
        for(int i=1;i<prices.size();++i){
            max_diff = max(max_diff, prices[i]-min_so_far);
            min_so_far = min(min_so_far, prices[i]);
        }
        return max_diff;
        
    }
};
