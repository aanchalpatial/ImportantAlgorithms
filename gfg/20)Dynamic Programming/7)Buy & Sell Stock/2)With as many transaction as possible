/*LEETCODE 122 :-
Say you have an array prices for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one
and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).


*/

/*Minima - Maxima Approach :
Following is algorithm for this problem : =
1)Find the local minima and store it as starting index. If not exists, return.
2)Find the local maxima. and store it as ending index. If we reach the end, set the end as ending index.
3)Update the solution (Increment count of buy sell pairs)
4)Repeat the above steps if end is not reached.

Time Complexity: The outer loop runs till i becomes n-1. The inner two loops increment value of i in every iteration.
So overall time complexity is O(n)
*/

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        
        //method : minima-maxima
        //https://www.geeksforgeeks.org/stock-buy-sell/
        
        int result = 0;
        for(int i=0;i<prices.size();++i){
            int num = prices[i];
            int j = i+1;
            while(j<prices.size()&&prices[j]>=num){
                num = prices[j];
                ++j;
            
            result += prices[j-1]-prices[i];
            i = j-1;
        }
        return result;

    }
};
