/*LEETCODE 122 :-
Say you have an array prices for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one
and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

*/

// Note: - This is not a dynamic programming solution, it is actually part of array tack of P100 course

/*Minima - Maxima Approach :
if you map stock prices on a map, you will see that you will book the max profit if you buy stock at 
starting of increasing slope and then sell it just before it about to go down i.e at it's peak
OR in other words,
We are using Local Maxima to find the days when we can sell and local minima to find the days when the prices of 
the stock is minimum so that we can buy on that day and gain the maximum profit.
// Time: O(n) & Space: O(1)

Time Complexity: The outer loop runs till i becomes n-1. The inner two loops increment value of i in every iteration.
So overall time complexity is O(n)
*/

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        
        //method : minima-maxima
        //https://www.geeksforgeeks.org/stock-buy-sell/
        
        int result = 0;
        for(int i=0;i<prices.size();++i){
            int num = prices[i];
            int j = i+1;
            while(j<prices.size()&&prices[j]>=num){
                num = prices[j];
                ++j;
            
            result += prices[j-1]-prices[i];
            i = j-1;
        }
        return result;

    }
};
