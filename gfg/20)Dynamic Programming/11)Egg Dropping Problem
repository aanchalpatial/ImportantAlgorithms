#include <bits/stdc++.h>
using namespace std;

//RR : https://www.geeksforgeeks.org/egg-dropping-puzzle-dp-11/

/*Problem Statement :
Find Minimum number of trials needed to find the critical floor in worst case when there are e eggs & f floors
Suppose that we wish to know which stories in a f-story building are safe to drop eggs from, 
and which will cause the eggs to break on landing.
The problem is not actually to find the critical floor, but merely to decide floors from which 
eggs should be dropped so that total number of trials are minimized.
*/

/*Approach :
When we drop an egg from a floor x, there can be two cases (1) The egg breaks (2) The egg doesn’t break.

1) If the egg breaks after dropping from xth floor, then we only need to check for floors
lower than x with remaining eggs; so the problem reduces to x-1 floors and n-1 eggs
2) If the egg doesn’t break after dropping from the xth floor, then we only need to check for floors
higher than x; so the problem reduces to k-x floors and n eggs.

Since we need to minimize the number of trials in worst case, we take the maximum of two cases.
We consider the max of above two cases for every floor and choose the floor which yields minimum number of trials.
*/

int eggDrop(int e, int f){  
    
    if(f==1||f==0) return f; 
    if(e==1) return f;
    
    int result = INT_MAX;
    for(int i=1;i<=f;++i){
        int curr = 1+max( eggDrop(e-1, i-1), eggDrop(e, f-i));
        result = min(result, curr);
    }
    return result;
    
}

int eggDrop_tabulation(int e, int f){
    //dp[i][j] represents the minimum number of trials in WORST CASE to find the
    //critical floor when there are i eggs & j floors
    int dp[e+1][f+1];
    
    //Base cases : 
    for(int i=1;i<=e;++i) {
        dp[i][1] = 1;
        dp[i][0] = 0;
    }
    for(int i=1;i<=f;++i) dp[1][i] = i;
    
    for(int i=2;i<=e;++i){
        for(int j=2;j<=f;++j){
            dp[i][j] = INT_MAX;
            for(int x=1;x<=j;++x){
                int curr = 1+max(dp[i-1][x-1], dp[i][j-x]);		//max() due to consideration of worst case
                dp[i][j] = min(dp[i][j], curr);
            }
        }
    }
    
    return dp[e][f];
    
}


int main() {
    
    int n = 2, k = 10; 
    cout << "Minimum number of trials in worst case with "
         << n << " eggs and " << k << " floors is " 
         << eggDrop_tabulation(n, k) << endl; 

	return 0;
}



