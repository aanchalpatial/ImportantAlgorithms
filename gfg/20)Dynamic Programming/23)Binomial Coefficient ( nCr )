
#include<bits/stdc++.h>
using namespace std;

#define M 1000000007				//for handling large numbers

/*

A binomial coefficient C(n, k) also gives the number of ways, disregarding order,
that k objects can be chosen from among n objects;

more formally, the number of k-element subsets (or k-combinations) of an n-element set.

nCk = n! / (k! * (n-k)!)

*/

long long factorial(int n) {
	long long result = 1;
	for (int i = 2; i <= n; ++i) result *= i;
	return result;
}

int main() {


	int n = 8, k = 4;


	//METHOD 1 : naive solution
	//O(n) time & O(1) space
	cout << (long long) factorial(n) / (long long)(factorial(k)*factorial(n - k)) << "\n";

	//METHOD 2 : iterative solution						*** BEST SOLUTION ***
	//O(k) time & O(1) space
	//Improvement 1 : C(n, k) = C(n, n-k) if k>(n-k)
	//Improvement 2 : After simplifying, we get
	//C(n, k) = [n * (n-1) * .... * (n-k+1)] / [k * (k-1) * .... * 1]
	if (n - k < k) k = n - k;
	long long result = 1;
	for (int i = 0; i < k; ++i) {
		result *= (n - i);
		result /= (i + 1);		//division should be done this way 1, 2, 3, ... k
		//*** above statement can't be done this ways : result /= (k-i) i.e k*k-1*k-2....1 ***
		//beacuse above statement results in perfect division with out any intermediate
		//floating point results
	}
	cout << result << "\n";


	//METHOD 3 : DP
	//O(nk) time & O(nk) space
	//recursive formula : C(n,k) = C(n-1, k-1) + C(n-1, k)
	//base case			: C(n,0) = C(n,n) = 1;
	int dp[n + 1][k + 1];
	memset(dp, 0, sizeof(dp[0][0]) * (n + 1) * (k + 1)); //*** imp ***

	for (int i = 0; i <= n; ++i) dp[i][0] = 1;
	//for(int i=0;i<=k;++i) dp[i][i] = 1;               //don't add this

	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= k; ++j) {
			dp[i][j] = ( dp[i - 1][j - 1] % M + dp[i - 1][j] % M ) % M;
		}
	}
	cout << dp[n][k] << "\n";


	return 0;
}




