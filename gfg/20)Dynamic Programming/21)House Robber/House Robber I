/*LEETCODE 198
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it
will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of 
money you can rob tonight without alerting the police.
*/

class Solution {
public:
    
    int maxSumNoConsecutive(vector<int> nums, int n){
        //naive recursion
        // if(n==1) return nums[0];
        // else if(n==2) return max(nums[0], nums[1]);
        // return max(nums[n-1]+maxSumNoConsecutive(nums, n-2), maxSumNoConsecutive(nums, n-1));
        
        //tabulation
        int dp[n];
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        for(int i=2;i<nums.size();++i){
            dp[i] = max(nums[i]+dp[i-2], dp[i-1]);
        }
        return dp[nums.size()-1];
    }
    
    
    int rob(vector<int>& nums) {
        
        if(nums.size()==0) return 0;
        if(nums.size()==1) return nums[0];
        
        //maximum sum such that no 2 elements are contigous
        return maxSumNoConsecutive(nums, nums.size());
        
    }
};
