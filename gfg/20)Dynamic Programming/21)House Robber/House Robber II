/*LEETCODE 213 :
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed.
All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. 
Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent
houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of
money you can rob tonight without alerting the police.
*/

class Solution {
public:
    
    int helper(vector<int> nums, int start, int end){
        int n = end-start+1;
        if(n==1) return nums[start];
        else if(n==2) return max(nums[start], nums[start+1]);
        return max(nums[end]+helper(nums, start, end-2), helper(nums, start, end-1));
    }
    
    int helper_tabulation(vector<int> nums, int start, int end){
        int n = end-start+1;
        
        if(n==1) return nums[start];
        
        
        int dp[n];
        dp[0] = nums[start];
        dp[1] = max(nums[start], nums[start+1]);
        
        for(int i=start+2;i<=end;++i){
            dp[i-start] = max(dp[i-start-1], nums[i] + dp[i-start-2]);
        }
        return dp[n-1];
    }
    
    int rob(vector<int>& nums) {
        
        int n = nums.size();
        if(n==0) return 0;
        if(n==1) return nums[0];
        
        //method 1 : naive recursion
        //case 1: if last element is not chosen, first element will be chosen
        //case 2 : if last element is chosen, first element will not be chosen
        //return max(helper(nums, 0, n-2), helper(nums, 1, n-1));
        
        //method 2 : dp tabulation using House Robber LEETCODE 198
        //O(n) time & O(n) space
        //*** INTERESTING ***
        return max(helper_tabulation(nums, 0, n-2), helper_tabulation(nums, 1, n-1));
        
    }
};
