/*
Given a string s, the task is to count the number of subsequences of the form aibjck, where i >= 1, j >=1 and k >= 1.

Note: Two subsequences are considered different if the set of array indexes picked for the 2 subsequences are different.

NOTE : For large test cases, output value will be too large, return the answer MODULO 10^9+7

Examples:

Input  : abbc
Output : 3
Subsequences are abc, abc and abbc

Input  : abcabc
Output : 7
Subsequences are abc, abc, abbc, aabc
abcc, abc and abc
*/

//Solution : https://www.geeksforgeeks.org/number-subsequences-form-ai-bj-ck/
/*Approach :
We traverse given string. For every character encounter, we do the following:

1) Initialize counts of different subsequences caused by different combination of ‘a’. Let this count be aCount.

2) Initialize counts of different subsequences caused by different combination of ‘b’. Let this count be bCount.

3) Initialize counts of different subsequences caused by different combination of ‘c’. Let this count be cCount.

4) Traverse all characters of given string. Do following for current character s[i]
    If current character is ‘a’, then there are following possibilities :
    a) Current character begins a new subsequence.
    b) Current character is part of aCount subsequences.
    c) Current character is not part of aCount subsequences.
    Therefore we do aCount = 1 + aCount + aCount = (1 + 2 * aCount);

    If current character is ‘b’, then there are following possibilities :
    a) Current character begins a new subsequence of b’s with aCount subsequences.
    b) Current character is part of bCount subsequences.
    c) Current character is not part of bCount subsequences.
    Therefore we do bCount = aCount + bCount + bCount = (aCount + 2 * bCount);

    If current character is ‘c’, then there are following possibilities :
    a) Current character begins a new subsequence of c’s with bCount subsequences.
    b) Current character is part of cCount subsequences.
    c) Current character is not part of cCount subsequences.
    Therefore we do cCount = bCount + cCount + cCount = (bCount + 2 * cCount);

5) Finally we return cCount;

*/

#define M 1000000007

// str : given string
// return the expected answer
int fun(string &str) {
    
    int n = str.size();
    
    int result = 0;
    int aCount = 0, bCount = 0, cCount = 0;
    
    for(int i=0;i<n;++i){
        if(str[i]=='a'){
            aCount = (1 + (2*aCount)%M)%M;
        }else if(str[i]=='b'){
            bCount = (aCount + (2*bCount)%M)%M;
        }else if(str[i]=='c'){
            cCount = (bCount + (2*cCount)%M)%M;
        }
        
    }
    return cCount;
}
