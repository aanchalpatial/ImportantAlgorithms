//find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.
//kadane Algorithm : 0(n)
//Simple idea of the Kadaneâ€™s algorithm is to look for all positive contiguous segments of the array

#include<bits/stdc++.h>
using namespace std;

int maxSubarraySum(int arr[], int n){   //** DP Solution : O(n) **
    
    //kadane Algorithm : Largest Sum Contigous Subarray
    int dp[n];
    int dp[0] = arr[0];
    
    for(int i=1;i<n;++i){
        dp[i] = max(arr[i], dp[i-1]+arr[i]);
    }
    //Largest sum contigous subarray is the maximum value in dp[] array
    int result = INT_MIN;
    for(int i=0;i<n;++i) result = max(result, dp[i]);
    return result;
}

int main()
{
 int a[] = {8, -8, 9, -9, 10, -11, 12};
  int n = 7;
  cout << maxSubarraySum(a, n) << endl;
  return 0;
    }
    
    
