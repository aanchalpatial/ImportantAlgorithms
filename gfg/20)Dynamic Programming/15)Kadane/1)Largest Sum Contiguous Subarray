//find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.
//kadane Algorithm : 0(n)

//note :- largest subarray with given sum is solved using prefix sum + hashing, BUT subarray with largest sum is solved using kadane

#include<bits/stdc++.h>
using namespace std;

int maxSubarraySum(int arr[], int n){   //** DP Solution : O(n) **
    
    //kadane Algorithm : Largest Sum Contigous Subarray
    int dp[n];
    int dp[0] = arr[0];
    
    for(int i=1;i<n;++i){
        dp[i] = max(arr[i], dp[i-1]+arr[i]);
    }
    //Largest sum contigous subarray is the maximum value in dp[] array
    int result = INT_MIN;
    for(int i=0;i<n;++i) result = max(result, dp[i]);
    return result;
}

int main()
{
 int a[] = {8, -8, 9, -9, 10, -11, 12};
  int n = 7;
  cout << maxSubarraySum(a, n) << endl;
  return 0;
    }

//KADANE 2.0 :  ***imp***
//Note : Not an application of kadane
///Given an array find the maximum sum that we can have by adding no 2 consecutive elements.
//https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/20)Dynamic%20Programming/13)Maximum%20sum%20with%20no%20consecutives

//APPLICATIONS OF KADANE :
//1) Find maximum sum subarray with the condition that you are allowed to skip at most one element.
//https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/20)Dynamic%20Programming/17)Max%20sum%20subarray%20by%20removing%20at%20most%20one%20element

