//optimisation over recursion

The 2 main properties of a problem that SUGGESTS that the given problem can be solved using Dynamic programming :-
//1) overlapping subproblems : In dynamic programming, computed solutions to subproblems are stored in a table so that these
donâ€™t have to be recomputed. So Dynamic Programming is not useful when there are no common (overlapping) subproblems because 
there is no point storing the solutions if they are not needed again
//2) optimal substructure property : A given problems has Optimal Substructure Property if optimal solution of the 
//given problem can be obtained by using optimal solutions of its subproblems.


//*** How to solve a Dynamic Programming Problem ? : https://www.geeksforgeeks.org/solve-dynamic-programming-problem/ ***

//*** Complete track of DP : https://www.geeksforgeeks.org/dynamic-programming/ ***


//1) memoization/Top Down : easy to implement, table entries are filled only on demand , faster than tabulation when state space is sparse
//2)tabulation/ Bottom Up : faster due to no recursive overheads, all table entries are filled one by one , faster than memoization when
    state space is dense 

/*How would you CHOOSE BETWEEN Memoization and Tabulation in Dynamic Programming?
Recursion with memoization is better whenever the state space is sparse -- in other words, if you don't actually need to 
solve all smaller subproblems but only some of them. In such cases the recursive implementation can be much faster. 
Recursion with memoization is also better whenever the state space is irregular, i.e., whenever it is 
hard to specify an order of evaluation iteratively.

Iterative solutions are better whenever the state space is dense and regular. If you need to compute the solutions
to all the subproblems anyway, you may as well do it without all the function calling overhead. An additional 
advantage of the iterative approach is that you are often able to save memory by forgetting the solutions to subproblems 
you won't need in the future. E.g., if you only need row k of the table to compute row k+1, 
there is no need to remember row k-1 anymore.
*/

//time of naive recursion solution of fibonacci : O(2^n)
//time of recursion+memoization : O(n)


//Note : There is an even better solution than DP for fibonacci, but we are using fibonacci only to show difference
//between memoization & tabulation : https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/

//1) fibonnaci with memoization
int mem[10001]; //used for memoization
int fib(int n){ 
    
    if(mem[n]==-1) mem[n] = (n==0||n==1)?n:fib(n-1)+fib(n-2);
    
    return mem[n];
    
}

//2) fibonnaci with tabulation
int fib_t(int n){
    int table[n+1]; //used for tabulation
    table[0] = 0, table[1] = 1;
    for(int i=2;i<=n;++i) table[i] = table[i-1]+table[i-2];
    return table[n];
}
