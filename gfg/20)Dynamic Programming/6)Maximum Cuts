//Given a positive integer N, find the maximum number of segments of lengths a, b and c that can be formed from N.

#include <bits/stdc++.h>
using namespace std;

//Naive recursion
int maximumCuts(int n, int a, int b, int c){    //O(3^n)
    
    if(n==0) return 0;
    else if(n<0) return -1;
    
    int result = max(maximumCuts(n-a, a, b, c), max(maximumCuts(n-b, a, b, c), maximumCuts(n-c, a, b, c)));
    
    //If result is -1 return it immediately, otherwise increment result and then return it
    return (result == -1)?result:1+result;
    
}

//DP solution
int maximumCuts_tabulation(int n, int a, int b, int c){     //O(n)
    int tab[n+1];
    tab[0] = 0;
    for(int i=1;i<=n;++i){
        tab[i] = -1;
        if(i-a>=0) tab[i] = max(tab[i], tab[i-a]);
        if(i-b>=0) tab[i] = max(tab[i], tab[i-b]);
        if(i-c>=0) tab[i] = max(tab[i], tab[i-c]);
        if(tab[i]!=-1) ++tab[i];
    }
    return tab[n];
    
}

int main() {
    
    int n = 5;
    int a = 1, b = 2, c = 3;
    cout<<maximumCuts(n, a, b, c)<<endl;
    cout<<maximumCuts_tabulation(n, a, b, c)<<endl;
	return 0;
}



