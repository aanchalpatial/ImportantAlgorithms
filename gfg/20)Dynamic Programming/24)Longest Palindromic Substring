//LEETCODE 5
//Given a string s, find the longest palindromic substring in s. 

//*** NOTE *** :- Longest Palindromic SUBSEQUENCE is an application of Longest Common Subsequence Problem.
//Here we have to find Longest Palindromic SUBSTRING.
//https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/20)Dynamic%20Programming/2)LCS/2)Variations


bool isPalindrome(string s, int i, int j){  //O(n) time & space
        stack<char> st;
        int size = j-i+1;
        
        for(int m=i;m<=j;++m) st.push(s[m]);
        
        while(!st.empty()){
            if(st.top()!=s[i]) return false;
            st.pop();
            ++i;
        }
        return true;
    }
    
    string buildString(string s, int i, int j){
        string str = "";
        for(int k=i;k<=j;++k) str += s[k];
        return str;
    }
    
    
    string longestPalindrome(string s) {   
        
    
        
        //note : longest palindrome subsequence is an application of LCS problem
        //here we instead have longest palindrome substring
        
        
        //naive method : O(n^3) time
        // int result = 0;
        // string str = "";
        // for(int i=0;i<s.size();++i){
        //     for(int j=i;j<s.size();++j){
        //         if(isPalindrome(s, i, j)&&j-i+1>str.size()){
        //             str = buildString(s, i, j);
        //         }
        //     }
        // }
        // return str;
        
        //method 2 : O(n^2) time & O(1) space -> 33 %
        //*** BEST SOLUTION ***
        //expand around centres
       //SOLUTION here : https://leetcode.com/problems/longest-palindromic-substring/solution/
//         int max_length = 0;
//         string result = "";
//         for(int i=0;i<s.size();++i){
            
//             //1)
//             int curr_length = 0;
//             if(i+1<s.size()&&s[i]==s[i+1]){
//                 int m = i, n = i+1;
//                 while(m>=0&&n<s.size()&&s[m]==s[n]){
//                     --m;
//                     ++n;
//                 }
//                 curr_length = (n-1)-(m+1)+1;
//                 if(curr_length>max_length){
//                 max_length = curr_length;
//                 result = buildString(s, m+1, n-1);
//                 }
//             }
            
            
//             //2)
//             int m = i-1, n = i+1;
//             while(m>=0&&n<s.size()&&s[m]==s[n]){
//                 --m;
//                 ++n;
//             }
//             curr_length = (n-1)-(m+1)+1;
            
//             if(curr_length>max_length){
//                 max_length = curr_length;
//                 result = buildString(s, m+1, n-1);
//             }
//         }
//         return result;
        
        
        //method 3 : dp solution
        //O(n^2) time & O(n^2) space
        //https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/
        
        int n = s.size();
        if(n<1) return s;
        
        int max_length = 1;
        string result = s.substr(0,1);
        
        bool dp[n][n];
        //dp[i][j] represents whether substring from i & j is palindrome or not
        //we will fill only the upper triangle part of 2d matrix

        memset(dp, false, sizeof(dp[0][0])*n*n);
        
        //length 1 palindromes
        for(int i=0;i<n;++i) dp[i][i] = true;
        
        //length 2 palindromes
        for(int i=0;i<n-1;++i) {
            if(s[i]==s[i+1]){
                dp[i][i+1] = true;
                if(max_length<2){
                    max_length = 2;
                    result = s.substr(i, 2);
                }
            }
            
        }
       
        //checking for larger length palindromes
        for(int window = 3;window<=n;++window){
            for(int k=0;k<=n-window;++k){

                if(dp[k+1][k+window-2]==true&&s[k]==s[k+window-1]) {
                    dp[k][k+window-1] = true;
                    if(max_length<window){
                        max_length = window;
                        result = s.substr(k, window);
                    }
                }
                else dp[k][k+window-1] = false;
            }
        }
        
        return result;
        
          
    }
};
