#include <bits/stdc++.h>
using namespace std;

//1)
//Given a set of non-negative integers as array, and a value sum, determine number of
//subsets (out of 2^n possible subsets) of the given set such that their sum equal to given sum.


//Naive recursion
int subsetSum(int arr[], int n, int sum){    //O(2^n)
    if(n==0) {
        if(sum==0) return 1;
        else return 0;
    }
    
    return subsetSum(arr, n-1, sum-arr[n-1]) + subsetSum(arr, n-1, sum);
}


//DP solution
int subsetSum_tabulation(int arr[], int n, int sum){   //O(n*sum) i.e pseudo polynomial time
    //dp[i][j] represents the count of subsets with sum j from set of elements from index 0 to i-1 .
    int dp[n+1][sum+1];
    
    //*** Base cases : ***
    for(int i=0;i<=n;++i) dp[i][0] = 1;
    for(int i=1;i<=sum;++i) dp[0][i] = 0;
    
    for(int i=1;i<=n;++i){
        for(int j=0;j<=sum;++j){
            dp[i][j] = dp[i-1][j];
            if(j>=arr[i-1]) dp[i][j] += dp[i-1][j-arr[i-1]];
        }
    }
    
    return dp[n][sum];
    
}

int main() {
    
    int arr[] = {10 ,5, 3, 2, 15};
    int n = sizeof(arr)/sizeof(arr[0]);
    int sum = 10;
    
    cout<<subsetSum_tabulation(arr, n, sum)<<endl;
    
	return 0;
}


//2)
//Given a set of numbers, check whether it can be partitioned into two subsets such that the sum of elements
//in both subsets is same or not.

/*Approach :
Say sum of all elements in array is x. Then if it is possible to partition set into 2 subsets with equal sums then the sum of 
each partition is definitely x/2 .
So problem reduces to find if it is possible for a subset of given array element to have sum = x/2 which is almost same as ABOVE problem.
*/

#include<bits/stdc++.h>
using namespace std;

bool partition(int arr[], int n, int sum){
    
    //Naive recursion
    // if(n==0) return (sum==0)?true:false;
    // return (partition(arr, n-1, sum-arr[n-1])|| partition(arr, n-1, sum));
    
    //DP solution
    bool dp[n+1][sum+1];
    dp[0][0] = true;
    dp[0][1] = false;
    
    for(int i=1;i<=n;++i){
        for(int j=1;j<=sum;++j){
            dp[i][j] = dp[i-1][j];
            if(j-arr[i-1]>=0) dp[i][j] = dp[i][j] || dp[i-1][j-arr[i-1]];
        }
    }
    return dp[n][sum];
    
}

int main()
 {  
    //fast I/O
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
	int T;
	cin>>T;
	while(T--){
	    int size;
	    cin>>size;
	    int arr[size];
	    int sum = 0;
	    for(int i=0;i<size;++i){
	        cin>>arr[i];
	        sum += arr[i];
	    }
	    if(sum%2==1) cout<<"NO";
	    else {
	        if(partition(arr, size, sum/2)) cout<<"YES";
	        else cout<<"NO";
	    }
	    
	    cout<<endl;
	}
	return 0;
}


//3)
/*LEETCODE : 1155
You have d dice, and each die has f faces numbered 1, 2, ..., f.

Return the number of possible ways (out of fd total ways) modulo 10^9 + 7 to roll the dice so the sum of the face up
numbers equals target.
*/

//SOLUTION LINK : https://www.geeksforgeeks.org/dice-throw-dp-30/
#define M 1000000007

class Solution {
public:
    
    int helper(int m, int n, int sum, vector<vector<int>> &mem){
        if(n==0){
            return (sum==0)?1:0;
        }

        if(mem[n][sum]!=-1) return mem[n][sum];
        int cnt = 0;
        for(int i=1;i<=m;++i){
            if (sum-i>=0) cnt = (cnt + (helper(m, n-1, sum-i, mem)%M)) %M;
        }
        mem[n][sum] = cnt;
        return cnt;
    }
    
    int helper_tabulation(int f, int d, int target){
        
        //dp[i][j] represents the ways to roll i dices to get j as sum
        int dp[d+1][target+1];
        memset(dp, 0, sizeof(dp[0][0])*(d+1)*(target+1));
        
        //table entries for only 1 dice
        for(int i=1;i<=target&&i<=f;++i) dp[1][i] = 1;
        
        for(int i=2;i<=d;++i){
            for(int j=1;j<=target;++j){
                dp[i][j] = 0;
                for(int k=1;k<=f;++k){
                    if(j-k>=0) dp[i][j] = (dp[i][j] + (dp[i-1][j-k]%M))%M;
                }
            }
        }
        
        return dp[d][target];
    }
    
    int numRollsToTarget(int d, int f, int target) {
        
        //method 1 : recursion + dp memoization
	    // vector<vector<int>> mem(d+1, vector<int> (target+1, -1));   //used for memoization
	    // return helper(f, d, target, mem);
        
        //method 2 : dp tabulation
        return helper_tabulation(f, d, target); 
    }
};




