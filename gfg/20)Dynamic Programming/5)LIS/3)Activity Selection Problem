/*Problem Statement :-
You are given n activities with their start and finish times. Select the maximum number of activities that can 
be performed by a single person, assuming that a person can only work on a single activity at a time.
*/


//As we know we have a greedy solution for activity selection problem, which is O(nlogn)
//https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/18)Greedy/2)Activity%20Selection%20Problem

//But we can also solve activity selection problem with dynamic programming, it is basically a variation of LIS




/* This is also Activity Selection Problem.
You are given n pairs of numbers. In every pair, the first number is always smaller than the second number. 
A pair (c, d) can follow another pair (a, b) if b < c. Chain of pairs can be formed in this fashion. 
Find the longest chain which can be formed from a given set of pairs.
*/

//method 2 : greedy approach
    //O(nlogn) time & O(n) space
    //same as activity selection problem
    //sort pairs in incresing order of their second elements
    sort(p, p+n, myComp2);
    int result = 0;
    int curr = INT_MIN;
    for(int i=0;i<n;++i){
        if(curr<p[i].first){
            ++result;
            curr = p[i].second;
        }
        
    }
    
//method 1 : dp solution
    //a variation of lis problem
    //O(n^2) time & O(n) space
    sort(p, p+n, myComp);   //sort acc to first element of pair
    int dp[n];  //dp[i] represents length of LIS for subsequences ending arr[i]
    dp[0] = 1;
    
    for(int i=1;i<n;++i){
        dp[i] = 1;
        for(int j=0;j<i;++j){
            if(p[j].second<p[i].first){
                dp[i] = max(dp[i], dp[j]+1);
            }
        }
    }
    return dp[n-1];
