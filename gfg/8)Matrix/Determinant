//RECURSION and MATRIX

void findCoFactor(int mat[N][N],int cofactor[N][N], int n, int i, int j){
    int r=0,s=0;
    for(int p=0;p<n;++p){
        for(int q=0;q<n;++q){
            if ((p!=i)&&(q!=j)) {
                cofactor[r][s++] = mat[p][q];
            }
             if (s == n - 1) 
                { 
                    s = 0; 
                    r++; 
                }
        }
    }
    
}


int determinantOfMatrix( int mat[N][N], int n)
{   
    
    if (n==1) {
        return mat[0][0];
    }else if (n==2) {
        return ((mat[0][0]*mat[1][1])-(mat[0][1]*mat[1][0])); 
    }else {
        int det = 0;
        //Considering first row to find determinant
        for(int j=0;j<n;++j) {
            int result;
            if (j%2 == 0) {
                result = 1;
            }else {
                result = -1;
            }
            int cofactor[N][N];
            findCoFactor(mat,cofactor,n,0,j);
            // cout<<"CO-FACTOR:-"<<endl;
            // for(int p=0;p<(n-1);++p){
            //     for(int q=0;q<(n-1);++q){
            //         cout<<cofactor[p][q]<<" ";
            //     }
            //     cout<<endl;
            // }
            det += ( result * mat[0][j] * determinantOfMatrix(cofactor, n-1) );
        }
        return det;
    }
}
