//NOTES: 
//-> Row Major order is prefered over column major order beacuse it is cache friendly.


//1): TRANSPOSE OF A MATRIX 
//do it without using auxillary space
for(int i=0;i<n;++i) {
	    for(int j=i+1;j<n;++j){           //***j=i+1****                
          //cout<<"("<<A[i][j]<<", "<<A[j][i]<<")"<<endl;
	        swap(A[i][j], A[j][i]);
	    }
	}
  
 //2): ROTATE MATRIX BY 90 DEGRESS COUNTER-CLOCKWISE
 //do it without using any auxillary sapce
 //transpose matrix and then reverse individual columns
 for(int i=0;i<n;++i){				//tanspose
        for(int j=i+1;j<n;++j){
            swap(a[i][j], a[j][i]);
        }
    }
    
 for(int j=0;j<n;++j){				//reverse columns
        for(int i=0;i<n/2;++i){
            swap(a[i][j], a[n-i-1][j]);
        }
    }

//3): SEARCH IN ROW & COLUMN SORTED MATRIX
//Naive Soluton 0(R*C), do it in 0(R+C) time
//You start from element A[0][C-1] i.e top right element. If the current element is greater than element to be searched, move to left. 
//If the current element is smaller, move down. If current element is equal return index(i,j). If you can't move any further return "not found".
int search( int n,int m, int x, int mat[SIZE][SIZE])
{
   // Your code here
   for(int i=0;i<n;){
       int lastElementOfRow = mat[i][m-1];
       if (x>lastElementOfRow) {
           ++i;
       }else if (x<lastElementOfRow) {
           //search in ith row
           for(int j=0;j<m-1;++j){
               if (mat[i][j]==x){
                   return 1;
               }
           }
           return 0;
       }else {
           return 1;
       }
   }
   return 0;
}

//4): BOUNDARY TRAVERSAL IN CLOCKWISE MANNER
