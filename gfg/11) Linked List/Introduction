//Linked List in STL:
->forward_list<data_type> name; implements singly linked list
->list<data_type> name: implements doubly linked list
We have functions like: front(), back(),push_front(value), pop_front(),push_bacl(value), pop_back(), reverse(), sort()

/*
Why linked list over arrays?
1)size has to be known in advance
2) If we use dynamically sized array(like vectors), then in that case insertion when array is full(worst case) takes O(n) time
3)Insertion & Deletion in middle is costly
4)Implementation data structures such as queue and deque is complex(not costly)
*/

//VARIATIONS:
//1)Singly Linked List
/*2)Doubly Linked List:
Advantages  ->traversal in both direction
            ->delete a given node in O(1) 
            (Trick Question :- Deletion singly linked list can be made O(1) by copying data and pointer of next node 
            and then deleting the next node but this trick fails if the last node is to be deleted)
            ->insert/delete a node BEFORE(AFTER is O(1) in both singly & doubly linked list) given node in O(1)
            ->You can't implement deque with singly linked list
Disadvantages->extra space for previous pointer, complex

3) A MEMORY EFFICIENT Doubly Linked List: XOR Linked List
https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/11)%20Linked%20List/XOR%20Doubly%20Linked%20List
*/


/*
3)Circular Linked List: (2 types-singly circular linked list and doubly circular linked list)
Advantages  ->can traverse the whole list from any node
            ->insert item at begin & end in O(1)
            ->useful in implementing queue & round robin
Disadvantages-> complex
*/

//APPLICATIONS
//1)Find middle of singly linked list (3 Approaches)
//Naive approach takes 2 TRAVERSAL of linked list: First find length of linked list and then its middle element
//Efficient Method: Do it in 1 TRAVERSAL(i.e without finding length of linked list)
//Approach: Start with 2 pointers one of which is incrementing one node at a time and other is incrementing 2 nodes at a time
//Similar kind of approach is used Floyd's Loop Detection also.
void searchMiddleElement(Node *head){
    Node *slow = head;
    Node *fast = head;
    while(fast!=NULL&&fast->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;
    }
    cout<<"middle node: "<<slow->key<<endl;
}
//Another Approach of 1 TRAVERSAL: we maintain a variables count & a pointer mid and we move mid pointer ahead only if count is odd.


//2) nth node from end of linked list
//Naive approach takes 2 TRAVERSALS: First find length of linked list & then (length-n+1)th element
//Efficient Method: Do it without finding length of linked list: Take 2 pointers, move one of them n nodes ahead.Then start travering them
//simultanously until the ahead pointer reaches end. At this moment behind pointer is at nth node from end.
void nodeFromEnd(Node *head, int n){
    Node *ahead = head;
    Node *behind = head;
    int i=0;
    while(i<n){
        if(ahead==NULL) {
        cout<<"Invalid value of n !!"<<endl;
        return;
    }
        ++i;
        ahead = ahead->next;
    }
    
    while(ahead!=NULL){
        ahead = ahead->next;
        behind = behind->next;
    }
    cout<<n<<"th node from end: "<<behind->key<<endl;
}


//3)Reverse a singly linked list
//A) Naive solution requires 2 traversal & O(n) space: We copy data from linked list into a dynamically sized array(i.e vectors) and then 
//copy it back into the linked list in reverse order

//B) Efficient solution: 1 traversal & O(1) space
//Approach: Reverse the links rather than reversing the data (we use 3 pointers PREVIOUS, CURRENT and NEXT).
Node *reverseSinglyLinkedList(Node *head){
    Node *prevNode = NULL;      //RR
        Node *currNode = head;      //RR
        
        while(currNode!=NULL){
            Node *nextNode = currNode->next;
            currNode->next = prevNode;
            
            
            prevNode = currNode;
            currNode = nextNode;
        }
    return prevNode;
}
//C) Recursive solution to reverse a linked list: 2 recursive solutions
//C1: Recursive version of iterative solution B
Node *recursiveReverseSinglyLinkedList(Node *prev, Node *curr){
    if(curr==NULL) return prev;
    Node *next = curr->next;
    curr->next = prev;
    return recursiveReverseSinglyLinkedList(curr, next);
}

//C2:
Node *recursive2ReverseSinglyLinkedList(Node *head){
    if(head == NULL||head->next==NULL) return head;
    Node *rest_head = recursive2ReverseSinglyLinkedList(head->next);
    Node *rest_tail = head->next;
    rest_tail->next = head;
    head->next = NULL;
    return rest_head;
}

//4) Remove duplicate elements from linked list
//4A) from SORTED linked list: O(n) time
Node *removeDuplicates(Node *root)
{
 // your code goes here
 Node *temp = root;
 while(temp!=NULL&&temp->next!=NULL){
     if(temp->data==temp->next->data){
         //duplicate node
         temp->next = temp->next->next;
     }
     if(temp->next!=NULL&&temp->data!=temp->next->data) temp = temp->next;
 }
 return root;
}
//4B) from UNSORTED linked list: Naive is O(n^2) time, do it in O(n): Appraoch - Use hashing
Node * removeDuplicates( Node *head) 
{
    //Naive: O(n^2)
    // Node *temp = head;
    // while(temp!=NULL){
    //     Node *prev = temp;
    //     Node *curr = temp->next;
    //     while(curr!=NULL){
    //         if(curr->data==temp->data){
    //             prev->next = curr->next;
    //             curr = curr->next;
    //         }else {
    //             prev = curr;
    //             curr = curr->next;
    //         }
    //     }
    //     temp = temp->next;
    // }
    // return head;
    
    
    //Efficient: O(n) using hashing
    unordered_set<int> s;
    Node *prev = NULL;
    Node *curr = head;
    while(curr!=NULL){
        if(s.find(curr->data)!=s.end()){
            //already existing element
            prev->next = curr->next;
            curr = curr->next;
            
        }else {
            s.insert(curr->data);
            prev = curr;
            curr = curr->next;
        }
    }
    
    return head;
}

//5) Swap kth node from beggining & end
//Use Approach used in 2nd application + consider special situations separately
/*Consider the following testcases:
Let X be the kth node from beginning and Y be the kth node from end. Following are the interesting cases that must be handled.
1) Y is next to X or vice versa
2) first & last node is to be swapped( k==1||k==numberOfNodeInLinkedList )
3) X and Y are same
4) X and Y donâ€™t exist (k is more than number of nodes in linked list)
*/

//6) Check if linked list is a palidrome
/*
Approach 1:-            O(n) time & O(n) space
1. To check if linked list is palindrome, you need the data of first n/2 nodes of the the linked list.
2. Just use a data structure called STACk to store data of the first n/2 nodes of the linked list.
3. Now, start traversing from mid of the linked list and compare data of the linked list with that on the top of the stack,
each time incrementing the middle and popping the top element from the stack.
Approach 2:-            O(n) time & O(n) space
Create a duplicate linked list and then REVERSE it. Then compare reversed and original linked list. 
*/
