//Linked List in STL:
->forward_list<data_type> name; implements singly linked list
->list<data_type> name: implements doubly linked list
We have functions like: front(), back(),push_front(value), pop_front(),push_bacl(value), pop_back(), reverse(), sort()

/*
Why linked list over arrays?
1)size has to be known in advance
2) If we use dynamically sized array(like vectors), then in that case insertion when array is full(worst case) takes O(n) time
3)Insertion & Deletion in middle is costly
4)Implementation data structures such as queue and deque is complex(not costly)
*/

//VARIATIONS:
//1)Singly Linked List
/*2)Doubly Linked List:
Advantages  ->traversal in both direction
            ->delete a given node in O(1) 
            (Trick Question :- Deletion singly linked list can be made O(1) by copying data and pointer of next node 
            and then deleting the next node but this trick fails if the last node is to be deleted)
            ->insert/delete a node BEFORE(AFTER is O(1) in both singly & doubly linked list) given node in O(1)
            ->You can't implement deque with singly linked list
Disadvantages->extra space for previous pointer, complex
*/
/*
3)Circular Linked List: (2 types-singly circular linked list and doubly circular linked list)
Advantages  ->can traverse the whole list from any node
            ->insert item at begin & end in O(1)
            ->useful in implementing queue & round robin
Disadvantages-> complex
*/

//APPLICATIONS
//1)Find middle of singly linked list (3 Approaches)
//Naive approach takes 2 TRAVERSAL of linked list: First find length of linked list and then its middle element
//Efficient Method: Do it in 1 TRAVERSAL(i.e without finding length of linked list)
//Approach: Start with 2 pointers one of which is incrementing one node at a time and other is incrementing 2 nodes at a time
void searchMiddleElement(Node *head){
    Node *slow = head;
    Node *fast = head;
    while(fast!=NULL&&fast->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;
    }
    cout<<"middle node: "<<slow->key<<endl;
}
//Another Approach of 1 TRAVERSAL: we maintain a variables count & a pointer mid and we move mid pointer ahead only if count is odd.


//2) nth node from end of linked list
//Naive approach takes 2 TRAVERSALS: First find length of linked list & then (length-n+1)th element
//Efficient Method: Do it without finding length of linked list: Take 2 pointers, move one of them n nodes ahead.Then start travering them
//simultanously until the ahead pointer reaches end. At this moment behind pointer is at nth node from end.
void nodeFromEnd(Node *head, int n){
    Node *ahead = head;
    Node *behind = head;
    int i=0;
    while(i<n){
        if(ahead==NULL) {
        cout<<"Invalid value of n !!"<<endl;
        return;
    }
        ++i;
        ahead = ahead->next;
    }
    
    while(ahead!=NULL){
        ahead = ahead->next;
        behind = behind->next;
    }
    cout<<n<<"th node from end: "<<behind->key<<endl;
}


//3)Reverse a singly linked list
//A) Naive solution requires 2 traversal & O(n) space: We copy data from linked list into a dynamically sized array(i.e vectors) and then 
//copy it back into the linked list in reverse order

//B) Efficient solution: 1 traversal & O(1) space
//Approach: Reverse the links rather than reversing the data (we use 3 pointers PREVIOUS, CURRENT and NEXT).
Node *reverseSinglyLinkedList(Node *head){
    Node *prevNode = NULL;      //RR
        Node *currNode = head;      //RR
        
        while(currNode!=NULL){
            Node *nextNode = currNode->next;
            currNode->next = prevNode;
            
            
            prevNode = currNode;
            currNode = nextNode;
        }
    return prevNode;
}
//C) Recursive solution to reverse a linked list: 2 recursive solutions
//C1: Recursive version of iterative solution B
Node *recursiveReverseSinglyLinkedList(Node *prev, Node *curr){
    if(curr==NULL) return prev;
    Node *next = curr->next;
    curr->next = prev;
    return recursiveReverseSinglyLinkedList(curr, next);
}

//C2:
Node *recursive2ReverseSinglyLinkedList(Node *head){
    if(head == NULL||head->next==NULL) return head;
    Node *rest_head = recursive2ReverseSinglyLinkedList(head->next);
    Node *rest_tail = head->next;
    rest_tail->next = head;
    head->next = NULL;
    return rest_head;
}
