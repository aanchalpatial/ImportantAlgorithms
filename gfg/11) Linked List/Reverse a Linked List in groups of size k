/*
Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list.
Expected Time Complexity : O(n)
Expected Auxilliary Space : O(1)
*/

/*Approach :
Reverse the first sub-list of size k. While reversing keep track of the next node and previous node.
Keep two pointers, pointer to the next node be next and pointer to the previous node be prev.
Recursively call for rest of the list and link the two sub-lists. /* (head->next=reverse(next, k)) */
prev becomes the new head of the list.
*/

node *reverseKGroups(node *head, int k){
    if(head==NULL||head->next==NULL) return head;
    
    node *prevNode = NULL, *curr = head;

    int cnt = k;
	while(cnt>0&&curr!=NULL){
	    --cnt;
		node *nextNode = curr->next;

		curr->next = prevNode;
		prevNode = curr;
		curr = nextNode;
	}
    
    head->next = reverseKGroups(curr, k);
    return prevNode;
}

struct node *reverse (struct node *head, int k)
{ 
    //method : manipulation of pointers
    //O(n) time & O(1) space
    return reverseKGroups(head, k);
}
