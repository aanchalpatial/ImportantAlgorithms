/*Why mergesort is preferred for linked list ??
->In Linked list, we can insert items in the middle in O(1) extra space and O(1) time. 
Therefore merge operation of merge sort can be implemented WITHOUT EXTRA SPACE for linked lists.
->Quick Sort requires a lot RANDOM ACCESS thus the overhead increases for quick sort.
Merge sort accesses data sequentially and the need of random access is low.
*/

//Merge Function for linked list: O(max(m,n)) time & O(m+n) space
//We maintain 2 pointers head & tail
Node *mergeSorted(Node *head1, Node *head2){
    if(head1==NULL) return head2;
    if(head2==NULL) return head1;
    
    Node *result;
    Node *tail;
    if(head1->key<=head2->key){
        result = head1;
        tail = result;
        head1 = head1->next;
    }else{
        result = head2;
        tail = result;
        head2 = head2->next;
    }
    
    while(head1!=NULL&&head2!=NULL){
        if(head1->key<=head2->key){
            tail->next = head1;
            head1 = head1->next;
        }else {
            tail->next = head2;
            head2 = head2->next;
        }
        tail = tail->next;
    }
    if(head1!=NULL){
        tail->next = head1;
    }else{
        tail->next = head2;
    }
    
    return result;
}

// O(max(m+n)) time & O(1) space    : *** IN-PLACE ***
ListNode* mergeSorted(ListNode* l1, ListNode* l2) {   
        
        if(l1==NULL) return l2;
        else if(l2==NULL) return l1;
        
        if(l1->val<=l2->val) {
            l1->next = mergeSorted(l1->next, l2);
            return l1;
        }else{
            l2->next = mergeSorted(l1, l2->next);
            return l2;
        }
        
    }


void mergeSortLinkedList(Node **headRef){
    Node* head = *headRef; 
    
    //Dividing the linked list in 2 halves
    Node *temp = head;
    if(temp==NULL||temp->next==NULL) return ;
    Node *slow = head;
    Node *fast = head->next;                                             // ?? & RR
    while(fast!=NULL&&fast->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;
    }           
    Node *midNext = slow->next;     //mid is included in first half of linked list
    slow->next = NULL;
    
    //Recursive calls
     mergeSortLinkedList(&head);
     mergeSortLinkedList(&midNext);
     
     //Merging 2 sorted linked lists
     *headRef = merge(head, midNext);
    
}
Node* mergeSort(Node* head) {
    // your code here
    mergeSortLinkedList(&head);
    return head;
}
