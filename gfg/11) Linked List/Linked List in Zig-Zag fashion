/*
Given a linked list, rearrange it such that converted list should be of the form a < b > c < d > e < f .. where a, b, c.. are 
consecutive data node of linked list. Note that it is not allowed to swap data.

Examples:

Input:  1->2->3->4
Output: 1->3->2->4 

Input:  11->15->20->5->10
Output: 11->20->5->15->10
*/

//https://www.geeksforgeeks.org/linked-list-in-zig-zag-fashion/
//https://www.geeksforgeeks.org/converting-an-array-of-integers-into-zig-zag-fashion/
//https://www.geeksforgeeks.org/rearrange-a-linked-list-in-zig-zag-fashion-set-2/?ref=rp

Node *zigZag(Node* head)
{
    
    
    //method 1 : sorting
    //O(nlogn) time & O(1) space
    /*
    first we can sort the array in increasing order and later we can start swapping 
    elements (excluding the very first element). Let us understand it with example. 
    Input array is [4, 3, 7, 8, 6, 2, 1]. Sorted array would be [1, 2, 3, 4, 6, 7, 8].
    And if swap 2nd & 3rd elements, swap 4th & 5th elements, swap 6th & 7th elements,
    the output zig-zag array would be [1, 3, 2, 6, 4, 8, 7]. 
    Here we can see {1 < 3 > 2 < 6 > 4 < 8 > 7}.
    */
    
    
    //method 2 : pairwise swapping of data if current pair doesn't follow required property
    //O(n) time & O(1) space
    bool flag = false;          //false represents < & true represents >
    Node *curr = head;
    while(curr!=NULL&&curr->next!=NULL){
        if(flag){       //required condition is >
            if(curr->data<curr->next->data){
                int temp = curr->data;
                curr->data = curr->next->data;
                curr->next->data = temp;
            }
        }else {         //required condition is <
            if(curr->data>curr->next->data){
                int temp = curr->data;
                curr->data = curr->next->data;
                curr->next->data = temp;
            }
        }
        curr = curr->next;
        flag = !flag;
    }
    return head;
    
    //WHAT IF SWAPPING OPERATION IS COSTLY ????
    //method 3 : same as method 2 but instead of swapping modify pointers to rearrange nodes
    //O(n) time & O(1) space
    
}
