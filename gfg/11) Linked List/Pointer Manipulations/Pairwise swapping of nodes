





// METHOD 2B) The main idea is that if there are 2 or more than 2 nodes in Linked List 
// then swap the first two nodes and recursively call for the rest of the list.
struct Node* pairwise_swap(struct Node* head)
{
    // your code here
    //Method 1)Naive Soulution is O(n) time & O(1) space BUT requires swapping of data
    //Approach: Save current->next->next and then swap(current->data, current->next->data)
    // if(head==NULL) return NULL;
    // Node *curr = head;
    // Node *nextNode = head->next;
    // while(nextNode!=NULL) {
    //     int temp = nextNode->data;
    //     nextNode->data = curr->data;
    //     curr->data = temp;
    //     curr = nextNode->next;
    //     if(curr!=NULL) { 
    //         nextNode = curr->next;
    //     } else {
    //         break;
    //     }
    // }
    // return head;

    //METHOD 2A) manipulate pointers iteratively
    // This in cases where swapping of data is inefficient or not allowed, method 2 will be used.
    //Approach: Instead of swapping data we will modify pointers
    //We maintain 2 pointers: first we separately swap head & head-> next. then we maintain prev & curr pointers
    // if(head==NULL||head->next==NULL) return head;
    
    // //Separately modify heah & head->next
    // Node *temp = head->next;
    // head->next = temp->next;
    // temp->next = head;
    // head = temp;
    
    // //then modify links of prev, curr & curr->next
    // Node *prev = head->next;
    // Node *curr = head->next->next;
    // while(curr!=NULL&&curr->next!=NULL){                        //RR
    //     prev->next = curr->next;
    //     Node *temp = curr->next->next;
    //     curr->next->next = curr;
    //     prev = curr;
    //     curr = temp;   
    // }
    
    // //Link last node 
    // prev->next = curr;
    // return head;
    
    // Method 2B: manipulate pointers recursiverly
    // The main idea is that if there are 2 or more than 2 nodes in Linked List 
    // then swap the first two nodes and recursively call for the rest of the list.
    if(head==NULL||head->next==NULL) {
        return head;
    }
    Node *curr = head;
    Node *nextNode = head->next;
    Node *nextNextNode = nextNode->next;
    nextNode->next = curr;
    curr->next = pairwise_swap(nextNextNode);
    return nextNode;
}