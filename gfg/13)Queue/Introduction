//Queue is a container adaptor
// stl: queue <int> g; functions: push(), pop(), size(), front(), back(), empty() all are O(1) 

//Applications: 
//->Synchronization between slow & fast devices ( queue is used as buffer)
//->In OS: Semaphores, FCFS scheduling, spooling in keyboard
//-> In routers to manage slow and fast networks together

//Variations: 
//1) Dequeue - Implemented using linked list: Insertion & Deletion at both ends
//stl: deque <int> dq; functions: push_back(x),push_front(x), pop_back(), pop_front(), size(), max_size(), front(), back() all are O(1)
//Note:- We have Dequeue Operation & Dequeue Data Structure

//2) Priority Queue - Implemented using heap: Priority queues are a type of container adapters, specifically designed such that the
//first element of the queue is the greatest of all elements in the queue and elements are 
//in non increasing order(hence we can see that each element of the queue has a priority{fixed order}).
//stl: priority_queue <int> pq; functions: push(), pop(), size() all are O(1)

//3) Double ended priority queue - Implemented using self balancing BST

//Queue Implementations: 
//1) Using array : In naive implementation, enqueue is O(n) & dequeue is O(1). To achieve O(1) in all operations of queue we 
// use CIRCULAR array.
#include <bits/stdc++.h>
using namespace std;

//Design circular queue implementation using array
//LEETCODE 622. Design Circular Queue
struct myQueue {
    int *arr;
    int size;   //** number of elements in queue
    int cap;    //capacity of queue
    int front;
    myQueue(int n){
        cap = n;
        size = 0;       //there are 0 elements in queue in the start
        front = 0;
        arr = new int[n];
        for(int i=0;i<n;++i) arr[i] = 0;
    }
    
    void push(int x){
        if(size==cap) {
            cout<<"Overflow !!"<<endl;
            return;
        }
        int rear = (front + size - 1)% cap; //**imp**
        rear = (rear+1)%cap;
        arr[rear] = x;
        ++size;
    }
    void pop(){
        if(size==0) {
            cout<<"Underflow !!";
            return;
        }
        arr[front] = 0; //optional
        front = (front+1)%cap;
        --size;
    }
    
    bool isFull(){
        if(cap==size) return true;
        else return false;
    }
    
    boll isEmpty(){
        if(size==0) return true;
        else return false;
    }
    
    
    void displayArray(){
        for(int i=0;i<cap;++i) cout<<arr[i]<<" ";
        cout<<endl;
    }
};

//2) Using linked list: we maintain head & rear pointers


//Problem 1) Reverse a queue
//2 versions: Iterative & Recursive
#include <bits/stdc++.h>
using namespace std;

void recursiveReverse(queue<int> &q){
    if(q.empty()) return;
    
    int x = q.front();
    q.pop();
    recursiveReverse(q);
    q.push(x);
}

void iterativeReverse(queue<int> &q){
    stack<int> s;
    while(!q.empty()){
        s.push(q.front());
        q.pop();
    }
    while(!s.empty()){
        q.push(s.top());
        s.pop();
    }
}

int main() {
    queue <int> q;
    q.push(2);
    q.push(4);
    q.push(6);
    q.push(8);
    q.push(10);
    //iterativeReverse(q);
    recursiveReverse(q);
    while(!q.empty()){
        cout<<q.front()<<", ";
        q.pop();
    }
    cout<<endl;
    
    
	return 0;
}
