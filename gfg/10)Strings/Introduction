//Strings is a special data structure because its charActers are bound to be one of the 256(i.e ascii) values possible.
//Most efficient way to sort a string is to use count sort beacuse strings has limited range. Thus the fastest we can sort a string is 0(n).
//**str.find(pattern) returns the first index of pattern if it exists in string, otherwise returns string::npos.
//str.substr(index, length);
//tokenizing string : https://www.geeksforgeeks.org/tokenizing-a-string-cpp/


//6 APPLICATIONs:
//1) Given 2 string, check if they are an anagram(permutation) of each other in LINEAR time.
//Solution : Use hashmap



//3) Given a string, find the leftmost character that repeats (*4* different approaches)
//->Naive approach is 0(n^2)
//->Another Approach is create a hashmap of character and their frequency during first traversal and then in the second traversal look for
//the first element with frequrncy more than 1. This approach is 0(n) but still need 2 TRAVERSALS.
//->0(n) & 1 traversal
void leftmostCharacterThatRepeats(string s){
    //0(n) & 1 traversal
    int hash[256] = {-1};  
    int leftMostRepeatingIndex = INT_MAX;
    for(int i=0;i<s.size();++i) {
        char ch = s[i];
        if(hash[ch]==-1) {
            hash[ch] = i;    // stores the index of first occurence
        } else {
            // we found a repeating char
            leftMostRepeatingIndex = min(leftMostRepeatingIndex, hash[ch]);
        }
    }
    return leftMostRepeatingIndex==INT_MAX?-1:leftMostRepeatingIndex;
    
}
//->Even Better Approach: 0(n) & 1 Traversal & even less comparisons that the above approach
// traverse from right to left
void leftmostCharacterThatRepeats(string str){
    //0(n) & 1 traversal
    int result = str.size();
    map<char, int> m;
    for(int i=str.size()-1;i>=0;--i){
        if(m.find(str[i]) == m.end() ) {    //** when we traverse from right we needn't min(,) comparisons **
            m.insert(make_pair(str[i], i));
        }else {
            result = m[str[i]];             //** when we traverse from right we needn't min(,) comparisons **
        }
        
    }
    if(result != str.size()) { cout<<"left most character that repeats: "<<str[result]; }
    else cout<<"No repeating character";


//4) Given a string, find the leftmost character that does not repeats
//1st & 2nd approaches are same as above question
//->0(n) time & 1 traversal
void leftmostCharacterThatDoesNotRepeats(string str){
    //0(n) & 1 traversal
    
    map<char, int> m;
    for(int i=0;i<str.size();++i){
        if(m.find(str[i]) == m.end()){
            m.insert(make_pair(str[i], i));
        }else {
            m[str[i]] = str.size();
        }
    }
    int result = str.size();
    for(auto i: m){     //constant time i.e 0(256)
        if(i.second < result) result = i.second;
    }
    if(result != str.size()) { cout<<"left most character that does not repeats: "<<str[result]; }
    else cout<<"No non-repeating character";
    
}


//6) Given 2 strings, check if they are rotation of each other.
//When there are multiple occurences of character, then naive solution becomes quadratic
//Do it in linear time.
//Approach: //concatenate first string with itself & then search for string 2 in the new concatenated string 1.
//Note:- str.find(pattern) returns string::npos if pattern is not found, else returns the starting index.

bool isRotation(string str1, string str2){
    str1 += str1;       //RR
    if(str1.find(str2) != string::npos) return true;
    else return false;
}




