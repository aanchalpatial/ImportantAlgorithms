/*
Given a string containing only digits, restore it by returning all possible valid IP address combinations.

A valid IP address must be in the form of A.B.C.D, where A, B, C, and D are numbers from 0-255. 
The numbers cannot be 0 prefixed unless they are 0
*/

bool isValidIp(string ip){
    
    int i=0,n=ip.size();
    int num[4];
    
    
    for(int j=0;j<4;++j){
        string s1 = "";
        while(i<n&&ip[i]!='.'){
            s1 += ip[i++];
        }
        ++i;
        
        //check 2 : number is not 0 prefixed unless they are 0
        if(s1[0]=='0'&&s1.size()>1) return false;
        
        num[j] = stoi(s1);
        
        //check 1 : all numbers are in [0, 255]
        if(num[j]<0||num[j]>255) return false;
    }
    
    // for(int i=0;i<4;++i) cout<<num[i]<<", ";
    // cout<<"\n";
    
    return true;
}


/*You are required to complete this method*/

vector<string> genIp(string &s) {
    
    //numbers are from 0-255
    //numbers cannot be 0 prefixed unless they are 0
    
    vector<string> result;
    
    int n = s.size();
    if(n<4||n>12) return {};
    
    //METHOD 1 : naive
    //split string with 3 dots for all possible combinations &
    //then check if current combination is valid or not
    
    for(int i=0;i<n-3;++i){
        for(int j=i+1;j<n-2;++j){
            for(int k=j+1;k<n-1;++k){
                string ip = "";
                ip += s.substr(0,i+1) + ".";
                ip += s.substr(i+1,j-i) + ".";
                ip += s.substr(j+1,k-j) + ".";
                ip += s.substr(k+1,n-k);
                
                if(isValidIp(ip)) result.push_back(ip);
            }
        }
    }
    
    return result;
    
    //METHOD 2 : backtracking
    //https://www.geeksforgeeks.org/program-to-generate-all-possible-valid-ip-addresses-from-given-string-set-2/?ref=rp
    
}
