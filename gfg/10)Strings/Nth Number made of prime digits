/*Given a number 'N'. The task is to find the Nth number whose each digit is a prime number i.e 2, 3, 5, 7. 
In other words you have to find nth number of this sequence : 2, 3, 5, 7, 22, 23 ,.. and so on.
*/

//1):Naive
//O(n) solution is to precompute all values upto the maximum limit of n
 {
	int T;
	cin>>T;
	for(int j=0;j<T;++j){
	    int n;
	    cin>>n;
	    int pr[4] = {2,3,5,7};
	    vector<int> v;
	    for(int i=0;i<4;++i) v.push_back(pr[i]);
	    for(int i=0;i<4;++i){
	        for(int j=0;j<4;++j){
	            v.push_back((pr[i]*10)+pr[j]);
	        }
	    }
	    for(int i=0;i<4;++i){
	        for(int j=0;j<4;++j){
	            for(int k=0;k<4;++k){
	                v.push_back((pr[i]*100)+(pr[j]*10)+(pr[k]));
	            }
	        }
	    }
	    for(int i=0;i<4;++i){
	        for(int j=0;j<4;++j){
	            for(int k=0;k<4;++k){
	                for(int l=0;l<4;++l){
	                    if(v.size()>100){
	                        goto comeOutOfNestedLoops;
	                    }
	                    v.push_back((pr[i]*1000)+(pr[j]*100)+(pr[k]*10)+(pr[l]));
	                }
	            }
	        }
	    }
	    comeOutOfNestedLoops:
	    cout<<v[n-1]<<endl;
	}
	return 0;
}

//2): Efficient
/*O(log n) solution is based on the fact that :
1st. 5th, 9th. 13th, ..... numbers have 2 as last digit.
2nd. 6th, 10th. 14th, ..... numbers have 3 as last digit.
3nd. 7th, 11th. 15th, ..... numbers have 5 as last digit.
4th. 8th, 12th. 16th, ..... numbers have 7 as last digit.
*/
#include<bits/stdc++.h>
using namespace std;
int main()
 {
	int T;
	cin>>T;
	for(int j=0;j<T;++j){
	    int n;
	    cin>>n;
	    string result = "";
	    while(n>0){
	        int c = n%4;
	        switch(c){
	            case 1: result += "2";
	                    break;
	            case 2: result += "3";
	                    break;
	            case 3: result += "5";
	                    break;
	            case 0: result += "7";
	                    break;
	        }
	        --n;
	        n/=4;
	        
	    }
	    reverse(result.begin(), result.end());
	    cout<<result<<endl;
	    
	}
	return 0;
}
