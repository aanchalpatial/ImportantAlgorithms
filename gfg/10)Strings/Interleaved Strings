/*
Given three strings A, B and C. 
Returns true if C is an interleaving of A and B else returns false. 
C is said to be interleaving A and B, if it contains all characters of A and B and order of all characters in 
individual strings is preserved.
*/

bool relativeOrdering(string A, string B, string C, int i, int j, int k){
    //checking relative ordering
    // note: you can see overlapping subproblems here, hence you can using wither memoization or tabulation to reduce time
    if(k==C.size()){
        if(i==A.size()&&j==B.size()) return true;
        else return false;
    }
    
    if(A[i]==C[k]&&B[j]==C[k]){
        return (relativeOrdering(A, B, C, i+1, j, k+1)||relativeOrdering(A, B, C, i, j+1, k+1));
    }else if(B[j]==C[k]){
        return relativeOrdering(A, B, C, i, j+1, k+1);
    }else if(A[i]==C[k]){
        return relativeOrdering(A, B, C, i+1, j, k+1);
    }
    return false;
}


/*You are required to complete this method */
bool isInterleave(string A, string B, string C) 
{
    int a=A.size(), b=B.size(), c=C.size();
    if(c!=a+b) return false;
    
    unordered_map<char, int> mp, mp2;
    for(int i=0;i<a;++i) mp[A[i]]++;
    for(int i=0;i<b;++i) mp[B[i]]++;
    
    for(int i=0;i<c;++i) mp2[C[i]]++;
    
    //check same frequency of elements in A+B & C
    if(mp.size()!=mp2.size()) return false;
    for(auto p:mp){
        if(mp[p.first]!=mp2[p.first]) return false;
    }
    
    //cheking whether relative ordering of 
    //elements in A & B are same in C
    return relativeOrdering(A, B, C, 0, 0, 0);
    
}

