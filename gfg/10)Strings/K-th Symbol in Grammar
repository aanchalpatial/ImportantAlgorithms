/*LEETCODE 779
On the first row, we write a 0. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01,
and each occurrence of 1 with 10.

Given row N and index K, return the K-th indexed symbol in row N. (The values of K are 1-indexed.) (1 indexed).
*/

class Solution {
public:
    int kthGrammar(int N, int K) {
        
        //naive method
        //TLE !!!
//         string row = "0";
        
//         while(N>1){
//             int index = 0;
//             string nextRow = "";
//             for(int i=0;i<row.size();++i){
//                 //nextRow += to_string(index) + ": ";
//                 //++index;
//                 if(row[i]=='0') nextRow += "01";
//                 else nextRow += "10";
//                 //nextRow += ", ";
//             }
//             row = nextRow;
//             cout<<row<<"\t"<<row.size()<<"\n";
//             --N;
//         }
//         return row[K-1]-'0';
        
        
        //method 2 :
        //pattern found is as follows : to find next row from current row, invert all 0's & 1's and 
        //append to current row
        
        
        //method 3 :
        /*given problem forms a perfect binary tree
        The whole structure can be viewed a binary tree, when a node is 0, their two children nodes are 0 and 1,
        similarly, when a node is 1, two children nodes are 1 and 0. We can know whether the position of K
        is a left node or a right node by dividing 2. If K is even, current node is right child, and its parent is
        the (K/2)th node in previous row; else if K is odd, current node is left child and its parent is 
        the ((K+1)/2)th node in previous row.
        The value of current node depends on its parent node, without knowing its parent node value,
        we still cannot determine current node value. That's why we need recursion, we keep going 
        previous row to find the parent node until reach the first row. Then all the parent node 
        value will be determined after the recursion function returns.
        */
        if(N==1||K==1) return 0;
        
        if(K%2==0) {        //right child
            return (kthGrammar(N-1, K/2)==0)?1:0;       
        }else {             //left child
            return (kthGrammar(N-1, (K+1)/2)==0)?0:1;   
        }
        
    }
};
