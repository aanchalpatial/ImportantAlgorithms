//PROBLEM 1 
/*LEETCODE 56 : MERGE INTERVALS
Given a collection of intervals, merge all overlapping intervals.
Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
*/

class Solution {
public:
    
    
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
        
        //method 1 : sorting : O(nlogn) time & O(1) space
        int n = intervals.size();
        if(n==0) return intervals;
        vector<vector<int>> result;
        
        sort(intervals.begin(), intervals.end());
        
        for(int i=0;i<n-1;++i){
            if(intervals[i+1][0]>=intervals[i][0]&&intervals[i+1][0]<=intervals[i][1]){
                //we need to merge i & i+1 intervals
                intervals[i+1][0] = intervals[i][0];
                intervals[i+1][1] = max(intervals[i][1], intervals[i+1][1]);
            }else{
                result.push_back(intervals[i]);
            }
        }
        result.push_back(intervals[n-1]);
        
        return result;
        
        //method 2 : connected components : O(n^2)
        //see in given leetcode solution
       
    }
};


//PROBLEM 2 : 
/*LEETCODE 435 : NON OVERLAPPING INTERVALS
Given a collection of intervals, find the minimum number of intervals you need to remove to make the 
rest of the intervals non-overlapping.
Example 1:

Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
*/
class Solution {
public:
    static bool myComp(vector<int> v1, vector<int> v2){
        return (v1[0]<v2[0]);
    }
    
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        
        
        //method : sorting
        //O(nlogn) time & O(1) space
        //APPROACH : if intervals overlap, remove the interval with largest end time so as to have little 
        //impact on subsequent intervals as possible.
        int n = intervals.size();
        sort(intervals.begin(), intervals.end(), myComp);       //sort according to start time
        for(auto v: intervals) cout<<v[0]<<","<<v[1]<<" | ";
        cout<<"\n";
        
        int pre = 0;
        int removeCount = 0;
        for(int i=1;i<n;++i){
            if(intervals[pre][1]>intervals[i][0]){
                ++removeCount;
                if(intervals[i][1]<intervals[pre][1]){
                    pre = i;
                }
            }else{
                pre = i;
            }
        }
        return removeCount;
    }
};



//PROBLEM 3 :
/*LEETCODE 452 : Minimum Number of Arrows to Burst Balloons
There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start 
and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter and hence the
x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 10^4 balloons.

An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend 
bursts by an arrow shot at x if xstart ≤ x ≤ xend. There is no limit to the number of arrows that can be shot. 
An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must
be shot to burst all balloons.
Example:

Input:
[[10,16], [2,8], [1,6], [7,12]]
Output:
2
Explanation:
One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 
*/

class Solution {
public:
    static bool myComp(vector<int> v1, vector<int> v2){
        return v1[0]<v2[0];
    }
    
    int findMinArrowShots(vector<vector<int>>& points) {
        
        int n = points.size();
        if(n==0) return 0;
        
        //METHOD : sorting
	//O(nlogn) time & O(1) space
	//is to find the minimum number of arrows that must be shot to burst all balloons, we have to find
        //the number of non-overlapping intervals
        sort(points.begin(), points.end(), myComp);     //sort according to start time
        for(auto x: points) cout<<"("<<x[0]<<", "<<x[1]<<") ";
        cout<<"\n";
        
        int count = 0;      //keeps track of number of non-overlapping intervals
        for(int i=0;i<n-1;++i){
            if(points[i+1][0]<=points[i][1]){
                //if i & i+1 intervals overlap, store their intersection in i+1
                points[i+1][0] = points[i+1][0];
                points[i+1][1] = min(points[i][1], points[i+1][1]);
            }else{
                ++count;
            }
        }
        ++count;
        for(auto x: points) cout<<"("<<x[0]<<", "<<x[1]<<") ";
        cout<<"\n";
        return count;
    }
};
