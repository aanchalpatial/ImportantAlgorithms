//1) naive approach
//Merge function used in merge sort
//O(m+n) time & O(m+n) space
void merge(int arr[], int l, int h, int m){
    int size1 = m-l+1;
    int size2 = h-m;
    int arr1[size1];
    int arr2[size2];
    for(int i=0;i<size1;++i){
        arr1[i] = arr[l+i];
    }
    for(int i=0;i<size2;++i){
        arr2[i] = arr[i+m+1];
    }
    int i=0,j=0,k=l;
    while(i<size1&&j<size2){
        if(arr1[i]<=arr2[j]){
            arr[k] = arr1[i];
            ++i;
        }else{
            arr[k] = arr2[j];
            ++j;
        }
        ++k;
    }
    while(i<size1){
        arr[k] = arr1[i];
        ++i;
        ++k;
    }
    while(j<size2){
        arr[k] = arr2[j];
        ++j;
        ++k;
    }
    
}


//2) space efficient approach
//O(m+n) time & O(1) space
//https://www.geeksforgeeks.org/merge-sort-with-o1-extra-space-merge-and-on-lg-n-time/?ref=rp
void merge(int arr[], int l, int m, int r)
{
//naive : O(m+n) time & O(m+n) space
     
     //method 2 : merge 2 sorted arrays in constant space
     //O(m+n) time & O(1) space
     /*
     we will use a mathematics trick to store 2 values at one index
     say we have to store x & y at index i of arr
     then first we have to find an element greater than x & y say z
     then arr[i] = x + y*z, then arr[i]%z will give x &
     arr[i]/z will give y
     */
     //first we have to find an element which is greter than any array element
     int max_num = arr[l];
     for(int i=l;i<=r;++i){
         max_num = max(max_num, arr[i]);
     }
     ++max_num;
     
     int i = l, j = m+1;
     int k = l;     //sorted element index
     while(i<=m&&j<=r){
         //say in our mathematics trick x be original element
         // & y be sorted element & z will be max_num
         int left_original_ele = arr[i]%max_num;
         int right_original_ele = arr[j]%max_num;
         if(left_original_ele<=right_original_ele){
             arr[k] = arr[k] + left_original_ele*max_num;
             ++i;
         }else {
             arr[k] = arr[k] + right_original_ele*max_num;
             ++j;
         }
         ++k;
     }
     
     while(i<=m){
         int original_ele = arr[i]%max_num;
         arr[k] = arr[k] + original_ele*max_num;
         ++i;
         ++k;
     }
     
     
     while(j<=r){
         int original_ele = arr[j]%max_num;
         arr[k] = arr[k] + original_ele*max_num;
         ++j;
         ++k;
     }
     
     for(int i=l;i<=r;++i){
         arr[i] = arr[i]/max_num;
     }
     
}


//*** Interesting fact *** : we have a heap based solution for merge k different sorted array which works better than 
//both of the above solution. : https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/16)Heap/7)Merge%20K%20Sorted%20Arrays



//**** 2 APPLICATIONS of merge function of mergesort *****
//1) INTERSECTION & UNION OF 2 SORTED ARRAY 
//Naive solution is 0(m*n), aux space 0(1), do it in 0(m+n) time and 0(1) space
//Note:- Hashing Version is used to find intersection & union of 2 arrays( not necessarily sorted) in 0(m+n) time BUT in 0(m) space.
#include <bits/stdc++.h>
using namespace std;

void intersectionOfSortedArrays(int arr1[], int arr2[], int m, int n){
    int i=0,j=0;
    while(i<m&&j<n){
        //skipping duplicates in array 1
        if(i>0&&arr1[i-1]==arr1[i]){
            ++i;
            continue;
        }
        
        if(arr1[i]==arr2[j]){
            cout<<arr1[i]<<" ";
            ++i,++j;
        }else if(arr1[i]<arr2[j]){
            ++i;
        }else if(arr1[i]>arr2[j]){
            ++j;
        } 
    }
    cout<<endl;
}

void unionOfSortedArrays(int arr1[], int arr2[], int m, int n){
    int i=0,j=0;
    while(i<m&&j<n){
        //skipping duplicates in array 1 and array 2
        if(i>0&&arr1[i-1]==arr1[i]){
            ++i;
            continue;
        }
        if(j>0&&arr2[j-1]==arr2[j]){
            ++j;
            continue;
        }
        
        
        if(arr1[i]==arr2[j]){
            cout<<arr1[i]<<" ";
            ++i,++j;
        }else if(arr1[i]<arr2[j]){
            cout<<arr1[i]<<" ";
            ++i;
        }else if(arr1[i]>arr2[j]){
            cout<<arr2[j]<<" ";
            ++j;
        } 
    }
    
    while(i<m){
        if(i>0&&arr1[i-1]==arr1[i]){
            ++i;
            continue;
        }
        cout<<arr1[i]<<" ";
        ++i;
        }
    while(j<n){
        if(j>0&&arr2[j-1]==arr2[j]){
            ++j;
            continue;
        }
        cout<<arr2[j]<<" ";
        ++j;
    }
}

int main()
{
    int arr1[] = {3, 5, 10, 10, 10, 15, 15, 20, 100};
    int arr2[] = {5, 10, 10, 15, 30};

    int m = sizeof(arr1)/sizeof(arr1[0]);
    int n = sizeof(arr2)/sizeof(arr2[0]);
    
    cout<<"intersection: ";
    intersectionOfSortedArrays(arr1, arr2, m, n);
    cout<<"union: ";
    unionOfSortedArrays(arr1, arr2, m, n);
    return 0;
}

//2) COUNT INVERSIONS IN ARRAY
int merge(int arr[], int l, int mid, int r) {
    int temp[r - l + 1];
    int i = l, j = mid + 1, k = 0;

    int mergeInversions = 0;

    while (i <= mid && j <= r) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            mergeInversions += (mid - i + 1);
            temp[k++] = arr[j++];
        }
    }
    while (i <= mid) {
        temp[k++] = arr[i++];
    }
    while (j <= r) {
        temp[k++] = arr[j++];
    }

    for (int m = l; m <= r; ++m) arr[m] = temp[m - l];

    return mergeInversions;
}

int mergeSort(int arr[], int l, int r) {

    int inversions = 0;

    if (l < r) {
        int mid = l + (r - l) / 2;
        inversions += mergeSort(arr, l, mid);
        inversions += mergeSort(arr, mid + 1, r);
        inversions += merge(arr, l, mid, r);
    }

    return inversions;
}

int main() {


#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif

    // mettlIssues();

    //Problem : count inversions
    int size;
    cin >> size;
    int arr[size];
    for (int i = 0; i < size; ++i) {
        cin >> arr[i];
    }

    //method 1 : brute force
    //O(n^2) time & O(1) space
    // int count = 0;
    // for(int i=0;i<size;++i){
    //     for(int j=i+1;j<size;++j){
    //         if(arr[i]>arr[j]) ++count;
    //     }
    // }
    // cout<<count<<"\n";

    //method 2 : enhanced merge sort
    //https://www.geeksforgeeks.org/counting-inversions/
    cout << mergeSort(arr, 0, size - 1);

    //method 3 : augmented self balancing bst
    /*approach
    =>
    augment every node to keep track of size of its right subtree

    =>
    1) Create an empty AVL Tree.  The tree is augmented here
       such that every node also maintains size of right subtree
       rooted with this node.

    2) Initialize inversion count or result as 0.

    3) Iterate from 0 to n-1 and do following for every
       element in arr[i]
         a) Insert arr[i] into the AVL Tree.  The insertion
            operation also updates result.  The idea is to
            keep counting greater nodes when tree is traversed
            from root to a leaf for insertion.

    4) Return result.

    =>
    More explanation for step 3.a:
    1) When we insert arr[i], elements from arr[0] to arr[i-1] are already inserted into AVL Tree.
    All we need to do is count these nodes.
    2) For insertion into AVL Tree, we traverse tree from root to a leaf by comparing every node
    with arr[i[]. When arr[i[ is smaller than current node, we increase inversion count by 1 plus
    the number of nodes in right subtree of current node. Which is basically count of
    greater elements on left of arr[i], i.e., inversions.
    */


    //method 4 : implementing method 3 using MULTISET STL & upper_bound()
    // multiset<int> mySet;
    // long int inversionCount = 0;
    // mySet.insert(arr[0]);
    // for (int i = 1; i < size; ++i) {

    //     mySet.insert(arr[i]);
    //     multiset<int>:: iterator itr = mySet.upper_bound(arr[i]);
    //     inversionCount += distance(itr, mySet.end());

    // }
    // cout << inversionCount << "\n";


    //method 5 : using Trie
    //https://www.geeksforgeeks.org/count-inversions-in-an-array-set-4-using-trie/?ref=rp

    return 0;
}




//MERGE SORT FOR LINKED LISTS : https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/11)%20Linked%20List/MergeSort

