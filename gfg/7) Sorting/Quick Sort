//PARTITON function of quicksort can be designed in 3 ways


#include <iostream>
using namespace std;

//1): Naive solution : 0(n) time & 0(n) space (takes 3 traversals of given array). Stable.
void naivePartition(int arr[], int l, int h){
    
}

//2): Lomuto Partition: 0(n) time & 0(1) space (takes 1 traversal of given array only). Not Stable Hence quicksort is not stable.
//In Lomuto, ensures that there is element<pivot on the left side and element>=pivot on right side and also ensures 
//that pivot is at its correct place.

void lomutoPartition(int arr[], int l, int h){
    //last element is the pivot always BUT it can also work on any specified pivot by swapping the pivot 
    //with the last element first and then performing lomuto.
    int piv = arr[h];     
    int i= l-1;
    for(int j=0;j<h;++j){
        if(arr[j]<piv){
            ++i;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i+1], arr[h]);
}

//3): Hoare Partition: 0(n) time & 0(1) space (takes 1 traversal). Not Stable Hence quicksort is not stable.
//Works better than Lomuto as it takes less number of comparisons in general
//In Hoare, ensures that there is element<=pivot on the left side of j(including j) and element>=pivot on right side of j BUT not 
//the correct position of pivot element.

int hoarePartition(int arr[], int l, int h){
    int i = l-1;
    int j = h+1;
    int piv = arr[l];   //first element is the pivot
    while(true){
        do{
            ++i;
        }while(arr[i]<piv);
        do{
            --j;
        }while(arr[j]>piv);
        
        if(i>=j) return j;
        swap(arr[i], arr[j]);
        
    }
}

int main()
{
    
    int arr[] = {10,80,30,90,40,50,70};
    int n = sizeof(arr)/sizeof(arr[0]);
    
    //lomutoPartition(arr, 0, n-1);
    int pivotIndex = hoarePartition(arr, 0, n-1);
    cout<<"pivot index is: "<<pivotIndex<<endl;
    for(int i=0;i<n;++i){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return 0;
}
