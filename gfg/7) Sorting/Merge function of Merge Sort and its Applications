//Merge function used in merge sort
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int arr1[] = {10,20,30,40};
    int arr2[] = {3,15,19};
    int size1 = sizeof(arr1)/sizeof(arr1[0]);
    int size2 = sizeof(arr2)/sizeof(arr2[0]);
    int i=0,j=0;
    int arr3[size1+size2];
    int index = -1;
   
    //0(size1+size2)
    while(i<size1 && j<size2){
        if(arr1[i] <= arr2[j]){                 //presence of equals here is necessary to main stability
            arr3[++index] = arr1[i];
            ++i;
        }else {
             arr3[++index] = arr2[j];
            ++j;
        }
    }
    if(i==size1){
        for(int k=j;k<size2;++k){
            arr3[++index] = arr2[k];
        }
    }else  if(j==size2){
        for(int k=i;k<size1;++k){
            arr3[++index] = arr1[k];
        }
    }
    for(int i=0;i<(size1+size2);++i){
        cout<<arr3[i]<<" ";
    }
    return 0;
}


//APPLICATIONS of merge function of mergesort
//1) INTERSECTION OF 2 SORTED ARRAY 
//Naive solution is 0(m*n), aux space 0(1), do it in 0(m+n) time and 0(1) space
//Note:- Hashing Version is used to find intersection & union of 2 arrays( not necessarily sorted) in 0(m+n) time BUT in 0(m) space.
#include <bits/stdc++.h>
using namespace std;

void intersectionOfSortedArrays(int arr1[], int arr2[], int m, int n){
    int i=0,j=0;
    while(i<m&&j<n){
        //skipping duplicates in array 1
        if(i>0&&arr1[i-1]==arr1[i]){
            ++i;
            continue;
        }
        
        if(arr1[i]==arr2[j]){
            cout<<arr1[i]<<" ";
            ++i,++j;
        }else if(arr1[i]<arr2[j]){
            ++i;
        }else if(arr1[i]>arr2[j]){
            ++j;
        } 
    }
    cout<<endl;
}

void unionOfSortedArrays(int arr1[], int arr2[], int m, int n){
    int i=0,j=0;
    while(i<m&&j<n){
        //skipping duplicates in array 1
        if(i>0&&arr1[i-1]==arr1[i]){
            ++i;
            continue;
        }
        
        if(arr1[i]==arr2[j]){
            cout<<arr1[i]<<" ";
            ++i,++j;
        }else if(arr1[i]<arr2[j]){
            cout<<arr1[i]<<" ";
            ++i;
        }else if(arr1[i]>arr2[j]){
            cout<<arr2[j]<<" ";
            ++j;
        } 
    }
    
    while(i<m){
        if(i<0&&arr1[i-1]==arr1[i]){
            ++i;
            continue;
        }
        cout<<arr1[i]<<" ";
        ++i;
        }
    while(j<n){
        if(j>0&&arr2[j-1]==arr2[j]){
            ++j;
            continue;
        }
        cout<<arr2[j];
        ++j;
    }
}

int main()
{
    int arr1[] = {3, 5, 10, 10, 10, 15, 15, 20, 100};
    int arr2[] = {5, 10, 10, 15, 30};
    int m = sizeof(arr1)/sizeof(arr1[0]);
    int n = sizeof(arr2)/sizeof(arr2[0]);
    
    cout<<"intersection: ";
    intersectionOfSortedArrays(arr1, arr2, m, n);
    cout<<"union: ";
    unionOfSortedArrays(arr1, arr2, m, n);
    return 0;
}

