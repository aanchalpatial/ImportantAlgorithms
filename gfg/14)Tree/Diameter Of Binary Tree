//Diameter of binary tree is Number of nodes on the longest path between 2 leaf nodes
//diameter of tree with zero nodes is 0 & tree with one node is 1
//HINT: iameter of a binary tree is nothing but the maximum of left subtree height + right subtree height + 1 for all
//the nodes that are present in the binary tree

//Naive is O(n^2) time & O(h) space: worst case happens when tree is skewed
int getHeight(Node *root){
    if(root==NULL) return 0;
    
    return 1+max(getHeight(root->left), getHeight(root->right));
}


int findDiameter(Node *root){       //using inorder traversal to access every node
    
    if(root==NULL) return 0;
    
    int d1 = findDiameter(root->left);
    int d2 = 1+getHeight(root->left)+getHeight(root->right);
    int d3 = findDiameter(root->right);
    
    return max(d1, max(d2, d3));
}


//Method 2: O(n) time & O(n) space 
//Precompute height of every node and store it in hashmap

unordered_map<Node *, int> hm;
int precomputeHeights(Node *root){
    if(root==NULL) return 0;
    
    int lh, rh;
    if(hm.find(root->left)!=hm.end()) lh = hm[root->left];
    else lh = precomputeHeights(root->left);
    if(hm.find(root->right)!=hm.end()) lh = hm[root->right];
    else rh = precomputeHeights(root->right);
    
    hm[root] =  1+max(lh, rh);
    return hm[root];
}


int findDiameter(Node *root){
    
    if(root==NULL) return 0;
    
    int d1 = findDiameter(root->left);
    int d2 = 1+hm[root->left]+hm[root->right];
    int d3 = findDiameter(root->right);
    
    return max(d1, max(d2, d3));
}


//Method 3) O(n) time & O(h) space          
int getHeight(Node *root, int &max_width){
    if(root==NULL) return 0;
    int lh = getHeight(root->left, max_width);
    int rh = getHeight(root->right, max_width);
    max_width = max(max_width, 1+lh+rh);  //**imp
    return 1+max(lh, rh);
}
int main() {
  Node *root = new Node(10);
	root->left = new Node(20);
	root->right = new Node(60);
	root->left->left = new Node(30);
	root->left->left->left = new Node(40);
	root->left->left->right = new Node(50);
	root->left->right = new Node(80);
	root->left->right->right = new Node(90);
	root->left->right->right->right = new Node(18);
  int max_width = 0;		//this variable stores the maximum diameter, it is passed by reference
  getHeight(root, max_width);
  cout<<"Diameter of binary tree: "<<max_width<<endl;
  return 0;
}
