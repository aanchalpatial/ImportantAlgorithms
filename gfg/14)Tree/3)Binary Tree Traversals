//Binary Tree TRAVERSALS :


//1) breadth first/ level order traversal: 0(n) time & O(n) space;
//***every time when space complexity is O(w) where w is width of tree, w can go upto (n+1)/2 (in a perfect binary tree) so basically
//space complexity is O(n)
void bfs(Node *root){
    if(root!=NULL){
        queue<Node *> q;
        q.push(root);
        while(!q.empty()){
            Node *temp = q.front();
            cout<<temp->key<<" ";
            q.pop();
            if(temp->left!=NULL){
                q.push(temp->left);
            }
            if(temp->right!=NULL){
                q.push(temp->right);
            }
        }
    }
}
//bfs traversal LINE BY LINE : 2 methods
//method 1: single loop
void bfsLineByLine(Node *root){       //O(n+h) time & 0(w)
    if(root!=NULL){
        queue<Node *> q;
        q.push(root);
        q.push(NULL);
        while(q.size()>1){      //**
            Node *temp = q.front();
            q.pop();
            if(temp==NULL) {
                cout<<endl;
                q.push(NULL);
            }else {
                cout<<temp->key<<" ";
                if(temp->left!=NULL){
                    q.push(temp->left);
                }
                if(temp->right!=NULL){
                    q.push(temp->right);
                }            
            }

        }
    }    
}
//method 2: nested loop
//**used in finding maximum width ,tree traversal in spiral form, iterative version of leftview & iterative versions of other properties of binary tree 
void bfsLineByLine2(Node *root){
    if(root!=NULL){
        queue<Node *> q;
        q.push(root);
        while(!q.empty()){
            int cnt = q.size();                 //*** most important step ***
            for(int i=0;i<cnt;++i){
                Node *temp = q.front();
                q.pop();
                cout<<temp->key<<" ";
                if(temp->left!=NULL){
                    q.push(temp->left);
                }
                if(temp->right!=NULL){
                    q.push(temp->right);
                }
                
            }
            cout<<endl;
        }
    }
}

//2) depth first traversal: recursion(standard) VS iterative methods

//2a)inorder: O(n) time & O(h) space; where h is height of tree
//2aa)RECURSIVE METHOD
void inorder(Node *root){
    if(root!=NULL){
        inorder(root->left);
        cout<<root->key<<", ";
        inorder(root->right);
    }
}
//2ab)ITERATIVE METHOD
//hint: Use Stacks
/*Approach:
1) Create an empty stack S.
2) Initialize current node as root
3) Push the current node to S and set current = current->left until current is NULL
4) If current is NULL and stack is not empty then 
     a) Pop the top item from stack.
     b) Print the popped item, set current = popped_item->right 
     c) Go to step 3.
5) If current is NULL and stack is empty then we are done.
*/
// 2aba) inOrderIterative1: O(n) time & O(h) space
void inOrderIterative1(struct Node *root)       // from gfg
{ 
    stack<Node *> s; 
    Node *curr = root; 
  
    while (curr != NULL || s.empty() == false) 
    { 
        while (curr !=  NULL) 
        { 
            s.push(curr); 
            curr = curr->left; 
        } 
        curr = s.top(); 
        s.pop(); 
  
        cout << curr->data << ", "; 
        
        curr = curr->right; 
    } 
}
// 2abb) inOrderIterative2: O(n) time & O(h) space
void inOrderIterative2(Node* root) {            // *** simpler iterative solution ***
    stack<Node *> st;
    Node *curr = root;
    jump:
    while(curr!=NULL) {
        st.push(curr);
        curr = curr->left;
    }
    
    while(!st.empty()) {
        // keep pushing node in stack until there is no left child
        
        Node *temp = st.top();
        cout<<temp->data<<", ";
        st.pop();
        if(temp->right!=NULL) {
            curr = temp->right;
            goto jump;
        }
    }
    
    return result;
    
}




//2b)preorder: O(n) time & O(h) space

//2ba)RECURSIVE METHOD
void preorder(Node *root){
    if(root!=NULL){
        cout<<root->key<<", ";
        preorder(root->left);
        preorder(root->right);
    }
}

//2bb)ITERATIVE METHOD

// 2bba) preorderIterative1: O(n) time & O(n) space
/* preorderIterative1                   // from gfg
Approach:
1) Create an empty stack nodeStack and push root node to stack.
2) Do following while nodeStack is not empty.
….a) Pop an item from stack and print it.
….b) Push right child of popped item to stack
….c) Push left child of popped item to stack

Right child is pushed before left child to make sure that left subtree is processed first.

*/

// 2bbb) preorderIterative2: O(n) time & O(h) space
void preorderIterative2(Node *root) {               // *** simpler iterative solution ***

    stack<Node *> st;
    Node *curr = root;
    
    jump:
    while(curr!=NULL) {
        cout<<curr->data<<", ";
        st.push(curr);
        curr = curr->left;
    }
    
    while(!st.empty()) {
        Node *temp = st.top();
        st.pop();
        if(temp->right!=NULL) { 
            curr = temp->right;
            goto jump;
        }
    }

}

//2c)postorder: O(n) time & O(h) space
void postorder(Node *root){
    if(root!=NULL){
        postorder(root->left);
        postorder(root->right);
        cout<<root->key<<", ";
    }
}
