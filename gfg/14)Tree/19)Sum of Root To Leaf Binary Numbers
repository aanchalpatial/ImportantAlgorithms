/*LEETCODE 1022
Given a binary tree, each node has value 0 or 1.  Each root-to-leaf path represents a binary number starting with 
the most significant bit.  For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.

For all leaves in the tree, consider the numbers represented by the path from the root to that leaf.

Return the sum of these numbers.
*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sum;
    
    void helper(TreeNode *root, string str){
        if(root->left==NULL&&root->right==NULL){
            str += to_string(root->val);
            cout<<str<<"\t";
            int n = str.size();
            int num = 0;
            for(int i=n-1;i>=0;--i){   //LSB to MSB
                if(str[i]=='1'){
                    //set n-i th bit
                    num = num|(1<<(n-1-i));
                }
            }
            sum += num;
        }
        
        str += to_string(root->val);
        if(root->left!=NULL) helper(root->left, str);
        if(root->right!=NULL) helper(root->right, str);
    }
    
    
    void helper2(TreeNode *root, int parentNodeSum){
        if(root->left==NULL&&root->right==NULL){
            parentNodeSum = 2*parentNodeSum + root->val;
            sum += parentNodeSum;
        }
        
        parentNodeSum = 2*parentNodeSum + root->val;    //forming number on the way
        
        if(root->left!=NULL) helper2(root->left, parentNodeSum);
        if(root->right!=NULL) helper2(root->right, parentNodeSum);
    }
    
    int sumRootToLeaf(TreeNode* root) {
        
        //NAIVE METHOD : dfs to leaf & then add number to sum
        //O(n^2) time & O(1) space
        //2 subproblems
        //1) Find all path from root to leaves. DFS recursion should help do that.
        //2) Transform a path from base to base 10.
        // sum = 0;
        // helper(root, "");
        // return sum;
        
        
        //METHOD2 2 : dfs & form number on the way & add to sum when reached a leaf
        //O(n) time & O(1) space
        //hint : In this solution, we combine above mentioned 2 subproblems together.
        //https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/discuss/387149/Java-100-beats-Time-and-Space.-Detailed-explanation.
        sum = 0;
        helper2(root, 0);
        return sum;
    }
};
