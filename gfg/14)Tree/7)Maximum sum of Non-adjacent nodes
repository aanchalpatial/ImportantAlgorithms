//Given a binary tree with a value associated with each node, we need to choose a subset of these nodes such that sum of chosen nodes
//is maximum under a constraint that no two chosen node in subset should be directly connected that is, if we have taken a node in our
//sum then we can’t take its any children in consideration and vice versa.

/*
 both node and its children can’t be in sum at same time, so when we take a node into our sum we will call recursively for 
 its grandchildren or when we don’t take this node we will call for all its children nodes and finally we will choose maximum 
 from both of these results
 */

int getMaxSumUtil(Node *root, unordered_map<Node *, int> &um) {
    if(root==NULL) return 0;
    if(root->left==NULL&&root->right==NULL) return root->data;
    
    if(um.find(root)==um.end()) {
        // Add your code here
        // choice 1: we consider the current node
        int sum1 = root->data;
        if(root->left!=NULL) sum1 += getMaxSumUtil(root->left->left, um);
        if(root->left!=NULL) sum1 += getMaxSumUtil(root->left->right, um);
        if(root->right!=NULL) sum1 += getMaxSumUtil(root->right->left, um);
        if(root->right!=NULL) sum1 += getMaxSumUtil(root->right->right, um);
    
        // choice 2: when we don't consider the current node
        int sum2 = getMaxSumUtil(root->left, um) + getMaxSumUtil(root->right, um);
    
        um[root] = max(sum1, sum2);
    }
    
    return um[root];
}
//Function to return the maximum sum of non-adjacent nodes.
int getMaxSum(Node *root) 
{
    unordered_map<Node *, int> um;      // need to use hashing to store result of overlapping/repeasting subproblems
    return getMaxSumUtil(root, um);
    
}

// time: O(n) & space: O(n)