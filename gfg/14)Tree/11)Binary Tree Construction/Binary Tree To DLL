/*
Convert a binary tree to doubly linked list IN PLACE(without use new space for nodes)
left pointer will be used as prev pointer & right pointer will be used as next pointer
The order of nodes in DLL must be same as Inorder of the given Binary Tree.
*/

/*Approach : https://www.geeksforgeeks.org/convert-a-given-binary-tree-to-doubly-linked-list-set-4/?ref=rp
Do inorder traversal of given binary tree & keep track of previously visited node. For every current node make 
previousNode->next = currentNode & currentNode->prev = previousnode
O(n) time & O(h) space
*/

//*** REMEMBER *** : inorder() traversal will automatically lead to desired result

Node *previousNode;
Node *inorder(Node *root, Node **head_ref){
    if(root==NULL) return NULL;
    
    inorder(root->left, head_ref);
    
    if(previousNode==NULL){             //used once to identify first node in inorder traversal as head
        root->left = previousNode;
        (*head_ref) = root;
    }else{
        root->left = previousNode;
        previousNode->right = root;
    }
    previousNode = root;
    
    
    inorder(root->right, head_ref);
}

// This function should convert a given Binary tree to Doubly
// Linked List

void bToDLL(Node *root, Node **head_ref)
{
    previousNode = NULL;
    inorder(root, head_ref);
}
