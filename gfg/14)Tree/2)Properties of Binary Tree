/*
Properties of BINARY TREES such as size, maximum value, height, height of spiral tree, nodes at distance k, children sum property, balanced,
maximum width, path of a node, mirror of a binary tree, are 2 trees identical & vertical width are studied here in LINEAR TIME & LINEAR SPACE.
*/


//1) Find SIZE of binary tree : 2 versions
//Recursive version : O(n) time & O(h) space , preferred for perfect trees
int getSize(Node *root){        
    if(root==NULL) return 0;
    else {
        return 1+getSize(root->left)+getSize(root->right);
    }
}
//Iterative Version: BFS, O(n) time & O(w) space , preferred for skewed trees


//2) Find MAXIMUM in binary tree : 2 versions
//Recursive version : O(n) time & O(h) space , preferred for perfect trees
int getMax(Node *root){
    if(root==NULL) return INT_MIN;
    else {
        return max(root->key, max(getMax(root->left),getMax(root->right)));
    }
}
//Iterative Version: BFS, O(n) time & O(w) space , preferred for skewed trees



//3A) Find HEIGHT of binary tree : O(n) time & O(h) space
int getHeight(Node *root){
    if(root==NULL) return 0;
    else {
        return max(1+getHeight(root->left), 1+getHeight(root->right));
    }
}

//3B) Height of Spiral Binary Tree
/*
Given a special binary tree of size N, whose leaf nodes are connected to form a circular doubly linked list, 
your task is to complete the function findTreeHeight(), that should return the height of the tree.
https://www.geeksforgeeks.org/find-height-of-a-special-binary-tree-whose-leaf-nodes-are-connected/
*/
int findTreeHeight(Node* node)
{
    //we have to write simple height function but with one extra
    //base condition
	if(node==NULL) return 0;
    
    //when a leaf node is reached
    if(node->left!=NULL&&node->right!=NULL&&node->left->right==node&&node->right->left==node) return 1;
    
    int lh = findTreeHeight(node->left);
    int rh = findTreeHeight(node->right);
    
    return max(lh,rh)+1;
}


//4) Print nodes at a distance K from ROOT : 2 versions
//Recursive version : O(n) time & O(h) space , preferred for perfect trees
void nodesAtDistanceK(Node *root, int k){
    if(root==NULL) return;
    else if(k==0) cout<<root->key<<", ";
    else{
        nodesAtDistanceK(root->left, k-1);
        nodesAtDistanceK(root->right, k-1);
    }
}
//Iterative Version: BFS, O(n) time & O(w) space , preferred for skewed trees


//5) Find whether tree follows CHILDREN SUM PROPERTY : O(n) time & O(h) space
//Children Sum Property is a property in which the sum of values of the left child and right child should be equal to the value of
their node if both children are present. Else if only one child is present then the value of the child should be equal to its node value.
//Note:- A tree with zero or one node also follows children sum property
bool childrenSumProperty(Node *root){
    if(root==NULL) return true; //No node
    else if(root->left==NULL&&root->right!=NULL){   //no left child
        bool res = (root->key==root->right->key&&childrenSumProperty(root->right));
        return res;
    }
    else if(root->left!=NULL&&root->right==NULL){   //no right child
        bool res = (root->key==root->left->key&&childrenSumProperty(root->left));
        return res;
    }
    else if(root->left==NULL&&root->right==NULL) return true;   //One node
    else {
        bool res = (root->key==root->left->key+root->right->key&&childrenSumProperty(root->left)&&childrenSumProperty(root->right));
        return res;
        
    }   
}


//6) Check if binary tree is HEIGHT BALANCED or not
//A binary tree is balanced if for every node the difference between left sub tree and right sub tree should not be more than 1
//Naive is O(n^2), do it in O(n)
bool naiveIsBalanced(Node *root){
  if(root==NULL) return true;
  int x = getHeight(root->left);
  int y = getHeight(root->right);
  return (abs(x-y)<=1)&&naiveIsBalanced(root->left)&&naiveIsBalanced(root->right);
  }
//**EFFICIENT linear time approach: our function now returns an integer value where if returned value is -1 it implies tree is not 
//balanced and is if returned valued is positive(including 0) it implies tree is balanced and it return the height of tree by the
//returned integer value i.e returned integer value will imply 2 things i)what is the height of tree ii)whether tree is balanced or not
int isBalanced(Node *root){
    if(root==NULL) return 0;
    else {
        int x = isBalanced(root->left);
        int y = isBalanced(root->right);
        return x>-1&&y>-1&&abs(x-y)<=1?1+max(x,y):-1;
    }
}

//7) Find MAXIMUM WIDTH of binary tree : O(n) time & O(w) space
//Maximum Width of Binary tree is the maximum number of nodes present in a level of the Tree
Hint:- we use level order traversal line by line logic to find maximum width of the Binary Tree.
void bfsLineByLine2(Node *root){
    int maxWidth = 0;
    if(root!=NULL){
        queue<Node *> q;
        q.push(root);
        while(!q.empty()){
            int cnt = q.size();   //number of nodes in current level of binary tree;
            maxWidth = max(maxWidth, cnt);
            for(int i=0;i<cnt;++i){
                Node *temp = q.front();
                q.pop();
                //cout<<temp->key<<" ";
                if(temp->left!=NULL){
                    q.push(temp->left);
                }
                if(temp->right!=NULL){
                    q.push(temp->right);
                }
                
            }
            //cout<<endl;
        }
    }
    cout<<"Maximum Width of binary tree: "<<maxWidth<<endl;
}

//8) Trace path of node in binary tree
//used in naive solution of LCA Problem
//Below function returns false if a node with given value doesn't exists
bool findPath(Node *root, vector<Node *> &path, int x){             //vector path is passed by reference & stores the path of given node
    if(root==NULL) return false;
    path.push_back(root);
    
    if(root->key==x) return true;
    if(findPath(root->left, path, x)||findPath(root->right, path, x)) return true;
    
    path.pop_back();
    return false;
}

//9) Convert a Binary Tree into its Mirror Tree
//Hint: The idea is to recursively call for left and right subtrees of a given node. On each recursive call
//SWAP the pointers of the children nodes.

void mirrorTree(Node *root){
    if(root==NULL) return;
    
    mirrorTree(root->left);
    mirrorTree(root->right);
    
    //swap pointers
    Node *temp = root->right;
    root->right = root->left;
    root->left = temp;
    
}

//10) Determine if Two Trees are Identical
bool isIdentical(Node *r1, Node *r2)
{
    //Your Code here
    if(r1==NULL&&r2!=NULL) return false;
    else if(r1!=NULL&&r2==NULL) return false;
    else if(r1==NULL&&r2==NULL) return true;
    
    return ((r1->data==r2->data)&&isIdentical(r1->left,r2->left)&&isIdentical(r1->right, r2->right));
    
}

//11) Given a Binary Tree of N nodes. The task is to find the vertical width of the tree.
//The width of a binary tree is the number of vertical paths in that tree.
void findVerticalWidth(Node *root, int level, set<int> &h){
    if(root==NULL) return;
    if(h.find(level)==h.end()){
        h.insert(level);
    }
    findVerticalWidth(root->left, level-1, h);
    findVerticalWidth(root->right, level+1, h);
}

int verticalWidth(Node* root)
{
    // Code here
    set<int> h;
    findVerticalWidth(root, 0, h);
    return h.size();
}



