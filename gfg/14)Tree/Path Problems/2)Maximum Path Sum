//Given a binary tree, find the maximum path sum. The path may start and end at any node in the tree.
/*
For each node there can be four ways that the max path goes through the node:
1. Node only
2. Max path through Left Child + Node
3. Max path through Right Child + Node
4. Max path through Left Child + Node + Max path through Right Child

The idea is to keep trace of four paths and pick up the max one in the end. An important thing to note is, root of every subtree 
need to return maximum path sum such that at most one child of root is involved. This is needed for parent function call. 
In below code, this sum is stored in ‘max_single’ and returned by the recursive function*/

int findSum(Node *root, int &res){
    if(root==NULL) return 0;
    
    int ls = findSum(root->left, res);
    int rs = findSum(root->right, res);
    
    // Max path for parent call of root. This path must 
    // include at-most one child of root 
    int max_single = max(root->data, max(root->data + ls, root->data + rs)); 
    
    // Max Top represents the sum when the Node under 
    // consideration is the root of the maxsum path and no 
    // ancestors of root are there in max sum path 
    int max_top  = max(max_single, root->data+ls+rs);
    res = max(res, max_top);
    return max_single;
}

int findMaxSum(Node* root)
{
    // Your code goes here
    int res = INT_MIN;
    findSum(root, res);
    return res;
}
