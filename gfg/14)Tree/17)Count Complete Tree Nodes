/*LEETCODE : 222
Given a complete binary tree, count the number of nodes.

Note:

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level
are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int helper(TreeNode *root){
        if(root==NULL) return 0;
        
        
        int lh = 1, rh = 1;
        TreeNode *curr1 = root, *curr2 = root;
        while(curr1!=NULL){
            curr1 = curr1->left;
            ++lh;
        }
        while(curr2!=NULL){
            curr2 = curr2->right;
        }
        
        if(lh==rh) return pow(2, lh)-1;
        
        return 1 + helper(root->left) + helper(root->right);
    }
    
    string binaryRepresentationOf(int n, int size){
        string res = "";
        
        while(n>0){
            if(n&1) res += "1";
            else res += "0";
            n >>= 1;
        }
        
        while(res.size()<size){
            res += "0";
        }
        
        reverse(res.begin(), res.end());
        
        return res;
    }
    
    int helper2(TreeNode *root){
        
        if(root==NULL) return 0;
        
        int cnt = 0;
        
        //step 1 : finding number of level in complete binary tree
        TreeNode *curr = root;
        int h = 0;
        while(curr!=NULL){
            curr = curr->left;
            ++h;
        }
        cnt += pow(2, h-1) - 1;       //adding all nodes except the nodes in last level
        
        //step 2 : finding number of nodes in last level using binary search
        int rightMostNode;
        int l = 0, r = pow(2, h-1) - 1;
        while(l<=r){
            int mid = l + (r-l)/2;
            string str = binaryRepresentationOf(mid, h-1);
            
            TreeNode *node = root;
            for(int i=0;i<str.size();++i){
                if(str[i]=='0') node = node->left;
                else node = node->right;
            }
            
            if(node==NULL) r = mid-1;
            else {
                //if current node is not null, then either current node is rightmost node or righmost node lies to 
                //right of it
                rightMostNode = mid;
                l = mid+1;
            }
        }
        cnt += (rightMostNode+1);
        
        return cnt;
        
    }
    
    int countNodes(TreeNode* root) {
        
        //method 1 : naive approach is using dfs/bfs
        //O(n) time & O(1) space
        
        //method 2 : see P100 video first: https://www.geeksforgeeks.org/batch/placement-100-2019/track/DSASP-Tree/video/MTQ3NA%3D%3D
        //O(logn^2) time & O(1) space
        //is O(logn^2) better than O(n) ? : https://stackoverflow.com/questions/13710629/on2-vs-o-nlogn2#:~:text=6%20Answers&text=n%20is%20only%20less%20than,which%20algorithm%20is%20better...
        
        /*method 2a :- 
        find number of levels & find number of nodes in last level : these 2 things are enough
        to calculate count of nodes in a binary tree
        
        finding levels is easy, but finding number of nodes in last level is a bit tricky.
        We use binary search to find the righmost nodes in last level : https://stackoverflow.com/questions/31172940/counting-number-of-nodes-in-a-complete-binary-tree
        */
        return helper2(root);
        
        /*method 2b :-
        https://leetcode.com/problems/count-complete-tree-nodes/discuss/61953/Easy-short-c++-recursive-solution
        this link gives a little bit different approach for the same question.
        https://leetcode.com/problems/count-complete-tree-nodes/discuss/61958/Concise-Java-solutions-O(log(n)2)
        
        Time analysis with this solution is actually very tricky. In the beginning, I thought if each node takes logN time,
        then it will be O(NlogN).
        On a second thought, however, if(hl==hr) return pow(2,hl)-1; makes sure on each level/depth of the tree,
        only one node can possibly trigger the recursion, therefore it becomes
        h (height of the tree=logN) + (h-1) + (h-2)...+1 = O(h^2) = O(logN*logN) . 
        */
        //return helper(root);
    }
};
