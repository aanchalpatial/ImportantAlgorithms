//Find nodes at distance k: from ROOT & from LEAF NODES


//1) Print nodes at a distance K from ROOT : 2 versions
//Recursive version : O(n) time & O(h) space , preferred for perfect trees
void nodesAtDistanceK(Node *root, int k){
    if(root==NULL) return;
    else if(k==0) cout<<root->key<<", ";
    else{
        nodesAtDistanceK(root->left, k-1);
        nodesAtDistanceK(root->right, k-1);
    }
}
//Iterative Version: BFS, O(n) time & O(w) space , preferred for skewed trees


//2) count all distinct nodes that are distance k from any leaf node. Here, k distance from leaf means k levels higher than a leaf node.
//For example, if k is more than the height of Binary Tree, then nothing should be counted.
/*
Approach:
The idea is to traverse the tree. Keep storing all ancestors till we hit a leaf node. When we reach a leaf node, 
we print the ancestor at distance k. We also need to keep track of nodes that are already printed as output.
For that we use a hash set.
*/
void helper(Node *root, int k, unordered_set<Node *> &h, vector<Node *> path, int dist) {
    if(root==NULL) return;
    path.push_back(root);
    if(root->left==NULL&&root->right==NULL) {
        // current node is a leaf
        if(dist-k>=0&&h.find(path[dist-k])==h.end()) {
            h.insert(path[dist-k]);
        }
        path.pop_back();
        return;
    }
    
    
    helper(root->left, k, h, path, 1 + dist);
    helper(root->right, k, h, path, 1 + dist);
    path.pop_back();
}
//Function to return count of nodes at a given distance from leaf nodes.
int printKDistantfromLeaf(Node* root, int k)
{
    //Add your code here. 
    unordered_set<Node *> h;
    vector<Node *> path;
    helper(root, k, h, path, 0);
    return h.size();
}
