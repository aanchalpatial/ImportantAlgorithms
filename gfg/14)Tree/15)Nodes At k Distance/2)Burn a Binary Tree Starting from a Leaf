//We are given a binary tree and a leaf node, we need to find time to burn the completeBinary Tree if we burn the given leaf at 0-th second. 
//At each second all the adjacent nodes of current NODES are burnt

// *** HINT ***: For given leaf node we need to find the FARTHEST NODE from it in binary tree and 
//And the required Farthest node can only be reachable through one of the ancestors of given leaf

/*APPROACH 1 : APPLICATION of Nodes at K Distance Approach : 
https://github.com/ap0996/ImportantAlgorithms/blob/master/gfg/14)Tree/15)Nodes%20At%20k%20Distance/1)Nodes%20At%20k%20Distance

Since we have to find the farthest node, we will begin with k=1 & apply nodeAtDistanceK() & keep on incrementing k till 
we are adding new nodes to our overall result vector. Iteration in which we did not add any node to result vector that value of k
is the (farthest distance + 1 from GIVEN leaf). So our result will be k-1.
*/

int minTime(Node* root, int target) 
{
    //METHOD 1 : using nodes at distance k from given node method
    result.clear();					//result vector defined in nodes at k distance solution
    int old_size = result.size();
    int k = 1;
    while(true){
        printkdistanceNodeUP(root, target, k);		//printkdistanceNodeUP() defined in nodes at k distance solution
        
        int new_size = result.size();
        if(old_size==new_size) break;
        old_size = new_size;    //if no new node was added, it means all nodes have burnt
        ++k;
    }
    return k-1;
}

/*
APPROACH 2:
So, for the minimum time required to burn any subtree will be:
The time required for fire to reach the root node from initial burnt leaf + depth of the opposite side

Therefore, to find time required to burn the complete tree, we need to calculate the above value for every node,
and take maximum of that value.
ans = max(ans, (time required for fire to reach current node + depth of other subtree))
*/

//2A) : Naive Solution : takes more than 1 traversal of binary tree

int getHeight(Node *root){
    if(root==NULL) return 0;
    return 1+max(getHeight(root->left), getHeight(root->right));
}
bool findPath(Node *root, vector<Node *> &path, int x){
    if(root==NULL) return false;
    path.push_back(root);
    if(root->key==x) return true;
    if(findPath(root->left, path, x)||findPath(root->right, path, x)) return true;
    path.pop_back();
    return false;
    
}
int burnOutTreeTime(Node *root, int leafValue){

    //STEP 1 : find path fromt root to given leaf (it will consists all ancestors of given leaf)
    vector<Node *> path;
    if(!findPath(root, path, leafValue)) return -1;
    
    //STEP 2 : for every ancestor check the farthest downward node they can find in the other subtree .
    //other subtree means if for a given node, leaf node lies in left subtree other subtree will be right subtree & vice versa.
    //return maximum of all ( leafToAncestor + ancestorToFarthestNodeOnOtherSide ) such distances
    
    int maxDistance = -1;
    for(int i=0;i<path.size()-1;++i) {
        int leafToAncestor = path.size()-i-1;
        
        int ancestorToFarthestNodeOnOtherSide = 0;
        if(path[i]->left==path[i+1]&&path[i]->right!=NULL){
            ancestorToFarthestNodeOnOtherSide = getHeight(path[i]->right);
        }else if(path[i]->left!=NULL) {
            ancestorToFarthestNodeOnOtherSide = getHeight(path[i]->left);
        }
        
        int d = leafToAncestor + ancestorToFarthestNodeOnOtherSide;
        cout<<leafToAncestor<<", "<<ancestorToFarthestNodeOnOtherSide<<" d: "<<d<<endl;
        maxDistance = max(maxDistance, d);
    }
    
    return maxDistance;
}

//2B) : EFFICIENT Solution : takes 1 traversal of binary tree
// we combine step 1 & step 2 of naive solution 2A.
/*
HINT:
So the solution is to apply recursion and for every node calculate the below-required values:
1)Left Subtree height.
2)Right subtree height.
3)If given leaf is descendent of current node we return distance between them & 
  If given leaf is not a descendent of current node we return -1
*/

int maxDistance;
    
int burnTree(Node *root, int target, int &distance){


//return type is used to return left & right subtree height & a reference variable distance is used to find distance 
//between current node & leaf if it is a descendent otherwise it's value is -1.

	if(root==NULL) return 0;

	if(root->data==target){
	    distance = 0;
	    return 1;
	}


	int ldis = -1, rdis = -1;
	int lh = burnTree(root->left, target, ldis);
	int rh = burnTree(root->right, target, rdis);

	if(ldis!=-1){
	    //target is in left subtree
	    distance = ldis+1;      //nodeToLeafDistance
	    maxDistance = max(maxDistance, distance+rh);
	}else if(rdis!=-1){
	    //target is in right subtree
	    distance = rdis+1;      //nodeToLeafDistance
	    maxDistance = max(maxDistance, distance+lh);

	}

	return 1+max(lh, rh);

        
    }


int minTime(Node* root, int target) 
{ 
    maxDistance = 0;
    int d = -1;
    burnTree(root, target, d);
    return maxDistance;
}
