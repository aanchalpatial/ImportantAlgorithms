//SUBARRAY: contiguous block of the original array's elements
//Involves Prefix Sum and Hashing



#include<bits/stdc++.h>
using namespace std;
int main(){

int arr[] = {1, 4, 13, -3, -10, 5};
//int arr[] = {3, -1, -2, 5};                         //corner case of zero sum
int size = sizeof(arr)/sizeof(arr[0]);

//1) SUB ARRAY WITH ZERO SUM: Naive is 0(n^2), do it in 0(n)
/*We first calculate prefix sum array. Then if prefix sum array contains 2 identical elements at index i and j, this means that
the subarray from i+1 to j is a subarray with sum zero. This logic doesn't cover one corner case: when an element is prefix sum array is zero.
In case an element is zero at index i in prefix sum array than the subarray from 0 to i is the subarray with sum zero.*/
int pre_sum = 0;
unordered_set<int> s;
bool result = false;
for(int i=0;i<size;++i){
  pre_sum += arr[i];
  if ( s.find(pre_sum) != s.end() ) result = true;
  if( pre_sum == 0 ) result = true;                       //handles corner case
  s.insert(pre_sum);
}
string zeroSumSubarrayExists = result?"YES":"NO";
cout<<zeroSumSubarrayExists;

//2) SUB ARRAY WITH GIVEN SUM: Naive is 0(n^2), do it in 0(n).
int arr1[] = {5, 8, 6, 13, 3, -1};
//int arr1[] = {1, 2, 4, 7};                              //corner case for given sum: 7
int size1 = sizeof(arr1)/sizeof(arr1[0]);

int givenSum = 22;
int prefix_sum = 0;
bool result1 = false;
unordered_set<int> s;
for(int i=0;i<size1;++i){
    prefix_sum += arr1[i];
    if( s.find(prefix_sum-givenSum) != s.end() ) result1 = true;
    if( prefix_sum == givenSum ) result1 = true;                  //handles corner case
    s.insert(prefix_sum);
}
string givenSumSubarrayExists = result1?"YES":"NO";
cout<<givenSumSubarrayExists;

/*
*** Interesting Fact *** : 
Subarray with zero or given sum problems can be solved in linear time using prefix sum + hashing.
BUT
Beyond a certain limit for the range of keys, unordered map has to map multiple values to same location( like chaining, etc).
In such a case, search in the map may not be O(1). In this question, the keys can be very large (order of 10^10), 
hence hash table will not be very handy.
So instead we can use SLIDING WINDOW Approach to solve above questions instead.
But LIMITATION of this approach is that it can't HANDLE NEGATIVE numbers.
//method 3 : sliding window
    //O(n) time & O(1) space
    long sum = 0;
    int l=0, r=0;
    while(l<=r&&r<n){
        //add element from right side of window till sum<s
        while(sum<s&&r<n){
            sum += arr[r];
            ++r;
        }
      
        //delete elements from left side of window till sum>s
        while(sum>s&&l<=r) {
            sum -= arr[l];
            ++l;
        }
        
        if(sum==s){
            cout<<l+1<<" "<<r;
            return;
        }
    }
    cout<<"-1";
*/





//3) LONGEST SUBARRAY WITH GIVEN SUM: Naive is 0(n^2), do it in 0(n)
int arr2[] = {8, 3, 1, 5, -6, 6, 2, 2};                              
//int arr2[] = {3,2,1} ;       //corner case of given sum: 5
int size2 = sizeof(arr2)/sizeof(arr2[0]);

int givSum = 4;
int pref_sum = 0;
int count = 0;
unordered_map<int, int> m;
for(int i=0;i<size2;++i){
    pref_sum += arr2[i];
    if( m.find(pref_sum-givSum) != m.end() ){
        count = max( count, i-m[pref_sum-givSum]);
    }
    if(pref_sum == givSum) count = i+1;             //handles corner case
    if( m.find(pref_sum) == m.end() ){              //insert if it isn't already inserted i.e store the leftmost index of any duplicate elements
        m.insert({pref_sum, i});
    }
}
cout<<"Length of maximum sub array of given sum : "<<count<<endl;


//4) LONGEST SUBARRAY WITH EQUAL NUMBER OF 0s and 1s IN BINARY ARRAY: Naive is 0(n^2), do it in 0(n)
//Hint: reduce this problem to finding length of longest subarray with zero sum i.e replace every 0 with -1 in given array
int arr[] = {1, 0, 1, 1, 1, 0, 0};
int size = sizeof(arr)/sizeof(arr[0]);

int arr2[size];
for(int i=0;i<size;++i){
    if (arr[i] == 0) arr2[i] = -1;        //replace 0 with -1
    else arr2[i] = arr[i];
}
int givSum = 0;
int pref_sum = 0;
int count = 0;
unordered_map<int, int> m;
for(int i=0;i<size;++i){
    pref_sum += arr2[i];
    if( m.find(pref_sum-givSum) != m.end() ){
        count = max( count, i-m[pref_sum-givSum]);
    }
    if(pref_sum == givSum) count = i+1;             //handles corner case
    //insert if it isn't already inserted i.e store the leftmost occcurence of any duplicate elements
    if( m.find(pref_sum) == m.end() ){
        m.insert({pref_sum, i});
    }
}
cout<<"Length of maximum sub array with equal number of 0s and 1s : "<<count<<endl;

//5) Longest Common Span with same sum in 2 binary arrays: Naive is 0(n^2), do it in 0(n)
//Note: Common Span means 2 subarrays with same starting and ending index respectively in both the arrays.
//Hint: reduce this problem to finding length of longest subarray with zero sum i.e substract 2nd subarray from 1st subarray and then 
//find the longest subarray with zero sum on the resultant subarray.
//Assumption: Same size of both the arrays
int arr5[] = {0, 1, 0, 0, 0, 0};
int arr6[] = {1, 0, 1, 0, 0, 1};
int size5 = sizeof(arr5)/sizeof(arr5[0]);

for(int i=0;i<size5;++i){
  arr5[i] -= arr6[i];
  }
 unordered_map<int, int> m1;
 int givenSum = 0;
 int prefix_sum = 0;
 int count = 0;
 for(int i=0;i<size5;++i){
  prefix_sum += arr5[i];
  if(m1.find(prefix_sum-givenSum) != m1.end()) {
    count = max(count, i-m1[prefix_sum]);
    }
  if(prefix_sum == 0) count = i+1;
  if( m1.find(prefix_sum) == m1.end() ){
    m1.insert({prefix_sum, i});
    }
  
  }
  
  cout<<"Length of longest common span with same sum in 2 given arrays is: "<<count<<endl;
  




return 0;
}
