/* Given a set of coin values {c1,c2,...,ck} and a sum of money x, our task is to form the sum x 
using as few coins as possible.The greedy algorithm does not necessarily produce an optimal solution.*/

#include<bits/stdc++.h>
using namespace std;

int arr[3]={1,3,4};             //available coins
int k = 3;                      //number of coins
int d1[100],d2[100],d3[100];            //used for memoization
//The constant N(100 in our case) has to be chosen so that all required values of the function fit in the array.
int e[100];
// The new array indicates for each sum of money the first coin that should be chosen in an optimal solution

int smallestNumberOfCoins(int x)
{   
    int result = 10e6;       //The code assumes 10^6 denotes infinity.
    if(x<0) return 10e6;
    if(x==0) return 0;
    if(d1[x] != -1){ return d1[x];}
    else {
        for(int i=0;i<3;++i){
            int result2 = smallestNumberOfCoins(x-arr[i])+1;
            if(result2 < result) e[x] = arr[i];
            result = min(result,result2);}
    }
    d1[x] = result;
    return d1[x];
    //  ****study tabulated version from book****
}

int possibleNumberOfSolutions(int x){
    int result = 0;
    if(x==0) return 1;
    if(x<0) return 0;
    if(d2[x] != 0) {return d2[x];}
    else{
    for(int i=0;i<3;++i){
        result += possibleNumberOfSolutions(x-arr[i]);
        //OPTIONAL:sometimes when the no of solutions is very large, it is enough to give the answer modulo m 
        unsigned long long m = 10e9 + 7;
        result %= m;
    }   
        }
    d2[x] = result;
    return result;
    
    //  ***study tabulated version from book***
}

int possibleNumberOfDistinctSolutions(int c[],int k,int x){
   //earlier we were using memoization, now we will use tabulation
   int table[x+1];
   memset(table,0,sizeof(table));
   table[0] = 1;
   for(int i=0;i<k;++i){
       for(int j=c[i];j<=x;++j){
           table[j] += table[j-c[i]];
       }
   }
   return table[x];
}


int main(){
    
    memset(d1, -1, sizeof(d1));
    memset(d2, 0, sizeof(d2));
    memset(d3, 0, sizeof(d3));
    
    
    int sum = 9;
    
        /*f (x) is the smallest number of coins required for constructing a sum x.*/
        //f(x)=min(f(x−c1),f(x−c2),...,f(x−ck))+1  ,  f(0)=0  ,  f(x)=∞ if x<0.
        cout<<"f("<<sum<<") = "<<smallestNumberOfCoins(sum)<<"\n";
        
        /*Sometimes we are asked both to find the value of an optimal solution 
        and also to give an example how such a solution can be CONSTRUCTED.*/
        cout<<"coins(least no. of) that produce the sum : "<<sum<<"\n";
        int sum2 = sum;
        while(sum2>0){
            cout<<"->"<<e[sum2];
            sum2 -= e[sum2];
        }
        cout<<endl;
        
        /*a variant of the problem that is otherwise like the original problem,but we should 
        count the total number of solutions instead of finding the optimal solution.*/
        //f(x)= f(x−c1)+f(x−c2)+···+f(x−ck)  ,  f(0)=1  ,  f(x)=0, when x<0. 
        //NOTE:- here for sum 5: (1,4) & (4,1) are 2 different solutions
        cout<<"f("<<sum<<") = "<<possibleNumberOfSolutions(sum)<<"\n";
        
        /*same as possibleNumberOfSolutions(sum) but this code gives DISTINCT solutions.*/
        //f(arr,k,sum) = f(arr,k-1,sum) + f(arr,k,sum-arr[n])
        //NOTE:- here for sum 5: (1,4) & (4,1) are same solutions
        cout<<"f("<<sum<<") = "<<possibleNumberOfDistinctSolutions(arr,k,sum)<<"\n";
        
        
    
    return 0;
}

//The time complexity of the resulting algorithm is O(xk) where the sum is x and the number of coins is k.
